searchState.loadedDescShard("tartan_pci", 0, "Support for Peripheral Component Interconnect (PCI) and …\nInformation to identify and locate capability registers\nPlaceholder value that will always be returned in the …\nHighest device number allowed by the PCI specification.\nHighest function number allowed by the PCI specification.\nAccess methods for PCI configuration space.\nReturn true if a function is available at the specified …\nData exposed in PCI configuration space.\nIterate over the devices and functions present on the …\nIterate over the devices present on the specified bus.\nIterate over the functions available on the specified …\nReturns the argument unchanged.\nCapability ID defined by PCI-SIG\nCalls <code>U::from(self)</code>.\nIterate over all capabilities defined in the configuration …\nRegister number in config space (offset in 4-byte units) …\nProvides methods to access PCI configuration space.\nLogical PCI address for a function of a specific …\nAccess to memory-mapped PCI configuration space\nAddress of register 0 on bus\nPCI bus number within the indicated segment group. The …\nBus numbers covered by this memory map\nPCI device number on the indicated bus.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPCI function number on the indicated device. Usually zero, …\nGet a register in PCI configuration space with an offset …\nGet a specific 32-bit register in PCI configuration space.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSupport for the I/O based configuration access method on …\nSegment group as defined by PCI Express. Always zero for …\nSet a register in PCI configuration space with an offset …\nSet a specific 32-bit register in PCI configuration space.\nI/O based configuration access method on x86/x86-64.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDifferentiates between memory and I/O addresses\nSize of address bus supported by a PCI function\nA pointer to a memory or I/O space that is used to …\nControl bits set by the host\nA register type that is always located at a specific offset\nStructure shared by all capability registers\nThe first register of the standard configuration header …\nThe second register of the standard configuration header …\nThe third register of the standard configuration header …\nThe fourth register of the standard configuration header …\nThis address is in I/O space (supported on x86/x86-64 only)\nUnknown address bus width\nThis address is in the normal memory address space\nFixed offset for this register type\nControl and status flags for a function’s self test …\nStatus bits indicated by the function\nTwelfth register of the standard configuration header for …\nFourtheenth register of the standard configuration header …\nSixteenth register of the standard configuration header …\n32-bit address bus\n64-bit address bus\nIndicates whether this BAR points to memory or I/O space\nThe address as a 32-bit number.\nThe address as a 64-bit number, when combined with the …\nSize of address bus supported by this PCI function.\nControls whether the device may act as a master of the PCI …\nInforms the device of the size of the system’s cache …\nIndicates whether the configuration space contains a …\nOffset within this function’s configuration space that …\nIndicates whether the function has a self-test capability.\nIndicates the general purpose of the function, from a list …\nControl bits set by the host\nIf a self-test is complete, then any non-zero value in …\nVendor-defined device ID\nIndicates how quickly the device can assert the <code>DEVSEL#</code> …\nIndicates whether the device can run at 66 MHz (true).\nIndicates whether the device supports receiving …\nControls whether the device may use fast back-to-back …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates which of the standard PCI configuration header …\nCapability ID defined by PCI-SIG\nIndicates a standard programming interface that can be …\nControls whether the device is prohibited from asserting …\nIndicates which system interrupt number the function uses, …\nIndicates which of the four interrupt pins on the PCI bus …\nIndicates whether the device wants to signal an interrupt, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls whether the device may respond to accesses …\nThe value of the bus master’s latency timer in PCI clock …\nIndicates whether the transaction was aborted with a …\nIndicates whether a partity error was detected while this …\nIndicates the longest period the device can wait to access …\nControls whether the device may respond to accesses …\nIndicates the desired length of bursts in units of 0.25 …\nIf true, then this device responds to at least some …\nByte offset within capability space of next capability …\nIndicates taht the device has detected a parity error, …\nControls whether the device responds normally to parity …\nIndicates whether the host can safely cache the memory …\nVendor-defined revision of the hardware\nControl and status flags for a function’s self test …\nControls whether the device may act as a master of the PCI …\nInforms the device of the size of the system’s cache …\nIndicates whether the configuration space contains a …\nOffset within this function’s configuration space that …\nIndicates whether the function has a self-test capability.\nIndicates the general purpose of the function, from a list …\nControl bits set by the host\nIf a self-test is complete, then any non-zero value in …\nVendor-defined device ID\nIndicates how quickly the device can assert the <code>DEVSEL#</code> …\nIndicates whether the device can run at 66 MHz (true).\nIndicates whether the device supports receiving …\nControls whether the device may use fast back-to-back …\nIndicates which of the standard PCI configuration header …\nCapability ID defined by PCI-SIG\nIndicates a standard programming interface that can be …\nControls whether the device is prohibited from asserting …\nIndicates which system interrupt number the function uses, …\nIndicates which of the four interrupt pins on the PCI bus …\nIndicates whether the device wants to signal an interrupt, …\nControls whether the device may respond to accesses …\nThe value of the bus master’s latency timer in PCI clock …\nIndicates whether the transaction was aborted with a …\nIndicates whether a partity error was detected while this …\nIndicates the longest period the device can wait to access …\nControls whether the device may respond to accesses …\nIndicates the desired length of bursts in units of 0.25 …\nIf true, then this device responds to at least some …\nByte offset within capability space of next capability …\nIndicates taht the device has detected a parity error, …\nControls whether the device responds normally to parity …\nVendor-defined revision of the hardware\nControl and status flags for a function’s self test …\nControls whether the device may respond to “special cycle…\nSetting this bit triggers the device to start its self …\nStatus bits indicated by the function\nIndicates the purpose of the function more specifically, …\nID of the device as defined by the card manufacturer.\nID of the card manufacturer, which may be different than …\nControls whether the device may signal critical errors in …\nIndicates that the device has detected a critical error in …\nIndicates whether the transaction was aborted with a …\nIndicates that this function generated an abort on the …\nID of the chipset manufacturer for this function, assigned …\nControls whether a VGA or graphics card device may “snoop…\nControls whether the device may send a “Memory Write and …\nControls whether the device may respond to “special cycle…\nSetting this bit triggers the device to start its self …\nStatus bits indicated by the function\nIndicates the purpose of the function more specifically, …\nID of the device as defined by the card manufacturer.\nID of the card manufacturer, which may be different than …\nControls whether the device may signal critical errors in …\nIndicates that the device has detected a critical error in …\nIndicates whether the transaction was aborted with a …\nIndicates that this function generated an abort on the …\nReturn false if the function is not present, as indicated …\nID of the chipset manufacturer for this function, assigned …\nControls whether a VGA or graphics card device may “snoop…\nControls whether the device may act as a master of the PCI …\nInforms the device of the size of the system’s cache …\nIndicates whether the configuration space contains a …\nOffset within this function’s configuration space that …\nIndicates whether the function has a self-test capability.\nIndicates the general purpose of the function, from a list …\nControl bits set by the host\nIf a self-test is complete, then any non-zero value in …\nVendor-defined device ID\nIndicates how quickly the device can assert the <code>DEVSEL#</code> …\nIndicates whether the device can run at 66 MHz (true).\nIndicates whether the device supports receiving …\nControls whether the device may use fast back-to-back …\nIndicates which of the standard PCI configuration header …\nCapability ID defined by PCI-SIG\nIndicates a standard programming interface that can be …\nControls whether the device is prohibited from asserting …\nIndicates which system interrupt number the function uses, …\nIndicates which of the four interrupt pins on the PCI bus …\nIndicates whether the device wants to signal an interrupt, …\nControls whether the device may respond to accesses …\nThe value of the bus master’s latency timer in PCI clock …\nIndicates whether the transaction was aborted with a …\nIndicates whether a partity error was detected while this …\nIndicates the longest period the device can wait to access …\nControls whether the device may respond to accesses …\nIndicates the desired length of bursts in units of 0.25 …\nIf true, then this device responds to at least some …\nByte offset within capability space of next capability …\nIndicates taht the device has detected a parity error, …\nControls whether the device responds normally to parity …\nVendor-defined revision of the hardware\nControl and status flags for a function’s self test …\nControls whether the device may respond to “special cycle…\nSetting this bit triggers the device to start its self …\nStatus bits indicated by the function\nIndicates the purpose of the function more specifically, …\nID of the device as defined by the card manufacturer.\nID of the card manufacturer, which may be different than …\nControls whether the device may signal critical errors in …\nIndicates that the device has detected a critical error in …\nIndicates whether the transaction was aborted with a …\nIndicates that this function generated an abort on the …\nID of the chipset manufacturer for this function, assigned …\nControls whether a VGA or graphics card device may “snoop…\nControls whether the device may send a “Memory Write and …\nControls whether the device may send a “Memory Write and …")