window.SIDEBAR_ITEMS = {"enum":[["LocalDescriptorTableRegister","`LDTR`: Contains a [`Selector`] referencing a [`SegmentDescriptor`] that points to the the local descriptor table (LDT)."],["SegmentRegister","Standard segment registers (`CS`, `DS`, `SS`, etc.), which contain [`Selector`]s."],["TaskRegister","`TR`: Contains a [`Selector`] referencing a [`SegmentDescriptor`] that points to the current task state segment (TSS)."]],"struct":[["GateDescriptor","An entry in a segment descriptor table that points to an existing segment rather than defining a new one."],["GateDescriptorFlags","Settings for [`GateDescriptor`]s."],["GenericDescriptor","Generic entry in a global/local/interrupt descriptor table. Can be a [`SegmentDescriptor`] or [`GateDescriptor`], depending on the type flags."],["GenericDescriptorFlags","Settings for [`GenericDescriptor`]s."],["GlobalDescriptorTableRegister","`GDTR`: Points to the memory range of the global descriptor table (GDT)."],["IOPermissionBitmap","Bitmap that controls which I/O port addresses are covered by privilege checks."],["SegmentDescriptor","An entry in a segment descriptor table that defines a new segment. This includes code, data, task state (TSS), and local descriptor table (LDT) segments."],["SegmentDescriptorFlags","Settings for [`SegmentDescriptor`]s."],["Selector","A reference to an entry in a segment descriptor table."],["SystemDescriptorType","Discriminate types of segment descriptors that are not code or data."]],"trait":[["DescriptorFlags","Settings common to [`SegmentDescriptor`]s and [`GateDescriptor`]s."]]};