var searchIndex = JSON.parse('{\
"aml_parse":{"doc":"","i":[[5,"main","aml_parse","",null,[[],[["box",3],["result",4]]]],[3,"UsageError","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]]],"p":[[3,"UsageError"]]},\
"tartan_acpi":{"doc":"Support for Advanced Configuration and Power Interface","i":[[0,"aml","tartan_acpi","Abstract syntax tree for ACPI Machine Language",null,null],[0,"parse","tartan_acpi::aml","Parsers for AML bytecode.",null,null],[0,"state","tartan_acpi::aml::parse","Parser context needed to disambiguate grammar",null,null],[3,"MethodSignature","tartan_acpi::aml::parse::state","Expected argument count for a method in the ACPI …",null,null],[12,"name","","",0,null],[12,"arg_count","","",0,null],[11,"new","","",0,[[["u8",15]]]],[3,"ParserState","","Input data plus context needed to disambiguate grammar",null,null],[12,"data","","",1,null],[12,"current_scope","","",1,null],[12,"method_signatures","","",1,null],[11,"new","","",1,[[]]],[11,"get_arg_count","","Get the argument count of the named method, if it is …",1,[[["namestring",3]],[["option",4],["u8",15]]]],[11,"in_scope","","Execute a parser in a new scope relative to the current …",1,[[["namestring",3]],["amlparseresult",6]]],[11,"lift","","Wraps a byte-oriented parser to work with <code>ParserState</code>",1,[[]]],[8,"ReplaceableParseError","","Helper trait used to convert a parser error from one …",null,null],[16,"From","","",2,null],[10,"replace_input","","",2,[[]]],[0,"name","tartan_acpi::aml::parse","Name objects, defined in §20.2.2",null,null],[5,"super_name_minus_invoke","tartan_acpi::aml::parse::name","Parse a [<code>SuperName</code>], but do <em>not</em> allow method invocations.",null,[[["parserstate",3]],[["supername",4],["amlparseresult",6],["amlparseerror",8]]]],[5,"parse_target","","Grammar:",null,[[["parserstate",3]],[["amlparseerror",8],["target",6],["amlparseresult",6]]]],[0,"data","tartan_acpi::aml::parse","Data objects, defined in §20.2.3",null,null],[0,"term","","Terms, defined in §20.2.5",null,null],[0,"misc","","Miscellaneous objects, defined in §20.2.6",null,null],[5,"parse_table","","Parse an ACPI table that contains AML, including the …",null,[[],[["errorwithposition",3],["result",4],["amltable",3]]]],[8,"Parse","","An object that can be parsed from AML bytecode",null,null],[10,"parse","","Try to parse an object of this type from the given input …",3,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[6,"AMLParseResult","","Alias for type returned by AML parsers",null,null],[8,"AMLParseError","","Trait \\\"alias\\\" for error type used by AML parsers",null,null],[0,"name","tartan_acpi::aml","Names of objects, arguments, and references",null,null],[5,"to_path","tartan_acpi::aml::name","Convert a list of segments in various formats into a path …",null,[[],[["nameseg",3],["vec",3]]]],[3,"NameSeg","","Four-character name segment, allowing underscores, …",null,null],[12,"0","","",4,null],[3,"NameString","","Fully qualified object path, either absolute or relative.",null,null],[12,"anchor","","Specifies how to resolve this path as absolute or …",5,null],[12,"path","","Segments of the path",5,null],[11,"empty","","",5,[[]]],[11,"new","","",5,[[]]],[11,"new_root","","",5,[[]]],[11,"new_parent","","",5,[[["usize",15]]]],[11,"resolve_as_decl","","Convert to an absolute namespace path in the context of …",5,[[],[["option",4],["vec",3]]]],[11,"resolve_as_ref","","List all possible absolute pathnames that this name may …",5,[[],[["vec",3],["vec",3]]]],[4,"PathAnchor","","Indicates whether a name is absolute or relative to the …",null,null],[13,"Root","","",6,null],[13,"Parent","","",6,null],[4,"SimpleName","","A named object or variable.",null,null],[13,"Name","","",7,null],[13,"Arg","","",7,null],[13,"Local","","",7,null],[4,"SuperName","","A named object, variable, reference expression, or debug …",null,null],[13,"Name","","",8,null],[13,"Debug","","",8,null],[13,"Reference","","",8,null],[6,"Target","","Location to store the result of an operation",null,null],[0,"data","tartan_acpi::aml","Data resources",null,null],[4,"ComputationalData","tartan_acpi::aml::data","Single value resolved at compile time.",null,null],[13,"Byte","","",9,null],[13,"Word","","",9,null],[13,"DWord","","",9,null],[13,"QWord","","",9,null],[13,"String","","",9,null],[13,"Zero","","",9,null],[13,"One","","",9,null],[13,"Ones","","",9,null],[13,"Revision","","",9,null],[13,"Buffer","","",9,null],[3,"Buffer","","Block of raw bytes, optionally initialized in whole or in …",null,null],[12,"size","","",10,null],[12,"initializer","","",10,null],[3,"Package","","Group of related data elements, optionally inititalized …",null,null],[12,"count","","",11,null],[12,"initializers","","",11,null],[3,"VarPackage","","Group of related data elements, with a number of elements …",null,null],[12,"count","","",12,null],[12,"initializers","","",12,null],[4,"PackageElement","","A name or reference that constitutes part of a [<code>Package</code>] …",null,null],[13,"Ref","","",13,null],[13,"Name","","",13,null],[4,"DataObject","","Data resolved at compile time, possibly grouped in a …",null,null],[13,"Data","","",14,null],[13,"Package","","",14,null],[13,"VarPackage","","",14,null],[4,"DataRefObject","","",null,null],[13,"Data","","",15,null],[13,"ObjectReference","","",15,null],[13,"DefinitionBlockHandle","","",15,null],[0,"term","tartan_acpi::aml","Top-level terms and opcodes.",null,null],[4,"TermObject","tartan_acpi::aml::term","Top-level, most general term type where the value (if …",null,null],[13,"Modifier","","",16,null],[13,"Named","","",16,null],[13,"Statement","","",16,null],[13,"Expression","","",16,null],[4,"TermArg","","Term that resolves to a value.",null,null],[13,"Expression","","",17,null],[13,"Data","","",17,null],[13,"Arg","","",17,null],[13,"Local","","",17,null],[13,"Name","","",17,null],[4,"NameSpaceModifier","","Term that attaches a name to its argument.",null,null],[13,"Alias","","Create a new <code>alias</code> for existing named <code>source</code> object.",18,null],[12,"source","tartan_acpi::aml::term::NameSpaceModifier","",19,null],[12,"alias","","",19,null],[13,"Name","tartan_acpi::aml::term","Attach a name to an anonymous data or reference.",18,null],[13,"Scope","","Evaluate the contained terms within a new scope.",18,null],[4,"NamedObject","","Term that defines an object with a name.",null,null],[13,"BankField","","Declare fields that can only be accessed after writing to …",20,null],[12,"region_name","tartan_acpi::aml::term::NamedObject","",21,null],[12,"bank_name","","",21,null],[12,"bank_value","","",21,null],[12,"flags","","",21,null],[12,"elements","","",21,null],[13,"CreateBitField","tartan_acpi::aml::term","Declare a single-bit field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",22,null],[12,"bit_index","","",22,null],[12,"name","","",22,null],[13,"CreateByteField","tartan_acpi::aml::term","Create a one-byte-wide field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",23,null],[12,"byte_index","","",23,null],[12,"name","","",23,null],[13,"CreateDWordField","tartan_acpi::aml::term","Declare a four-byte-wide field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",24,null],[12,"byte_index","","",24,null],[12,"name","","",24,null],[13,"CreateField","tartan_acpi::aml::term","Declare an arbitrary-width field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",25,null],[12,"bit_index","","",25,null],[12,"num_bits","","",25,null],[12,"name","","",25,null],[13,"CreateQWordField","tartan_acpi::aml::term","Declare an eight-byte-wide field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",26,null],[12,"byte_index","","",26,null],[12,"name","","",26,null],[13,"CreateWordField","tartan_acpi::aml::term","Declare a two-byte-wide field within a buffer",20,null],[12,"source_buffer","tartan_acpi::aml::term::NamedObject","",27,null],[12,"byte_index","","",27,null],[12,"name","","",27,null],[13,"DataTableRegion","tartan_acpi::aml::term","Allow an ACPI table indexed in the XSDT to be used as a …",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",28,null],[12,"signature","","",28,null],[12,"oem_id","","",28,null],[12,"oem_table_id","","",28,null],[13,"Device","tartan_acpi::aml::term","Declare a device and its associated fields, methods, and …",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",29,null],[12,"body","","",29,null],[13,"Event","tartan_acpi::aml::term","Declare a waitable synchronization object",20,null],[13,"External","","Declare an object that is defined in another ACPI table",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",30,null],[12,"object_type","","",30,null],[12,"argument_count","","",30,null],[13,"Field","tartan_acpi::aml::term","Declare a group of fields",20,null],[12,"region_name","tartan_acpi::aml::term::NamedObject","",31,null],[12,"flags","","",31,null],[12,"elements","","",31,null],[13,"IndexField","tartan_acpi::aml::term","Declare a group of field that must be accessed by writing …",20,null],[12,"index_name","tartan_acpi::aml::term::NamedObject","",32,null],[12,"data_name","","",32,null],[12,"flags","","",32,null],[12,"elements","","",32,null],[13,"Method","tartan_acpi::aml::term","Declare a control method",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",33,null],[12,"flags","","",33,null],[12,"body","","",33,null],[13,"Mutex","tartan_acpi::aml::term","Declare an acquirable mutex",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",34,null],[12,"sync_level","","",34,null],[13,"OperationRegion","tartan_acpi::aml::term","Declare an address space that can be used by fields",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",35,null],[12,"region_space","","",35,null],[12,"offset","","",35,null],[12,"length","","",35,null],[13,"PowerResource","tartan_acpi::aml::term","Declare a power resource object",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",36,null],[12,"system_level","","",36,null],[12,"resource_order","","",36,null],[12,"body","","",36,null],[13,"Processor","tartan_acpi::aml::term","Declare a processor and associated register block",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",37,null],[12,"id","","",37,null],[12,"register_block_addr","","",37,null],[12,"register_block_length","","",37,null],[12,"body","","",37,null],[13,"ThermalZone","tartan_acpi::aml::term","Declare a thermal zone namespace",20,null],[12,"name","tartan_acpi::aml::term::NamedObject","",38,null],[12,"body","","",38,null],[3,"FieldFlags","tartan_acpi::aml::term","Rules for reading and writing a field.",null,null],[12,"access_type","","",39,null],[12,"lock","","",39,null],[12,"update_rule","","",39,null],[4,"AccessType","","Width used to access a field.",null,null],[13,"Any","","",40,null],[13,"Byte","","",40,null],[13,"Word","","",40,null],[13,"DWord","","",40,null],[13,"QWord","","",40,null],[13,"Buffer","","",40,null],[4,"UpdateRule","","Indicates what to do with unused bits when writing a …",null,null],[13,"Preserve","","",41,null],[13,"WriteAsOnes","","",41,null],[13,"WriteAsZeros","","",41,null],[4,"FieldElement","","A substructure of a field.",null,null],[13,"Named","","A named bitfield.",42,null],[12,"name","tartan_acpi::aml::term::FieldElement","",43,null],[12,"bit_length","","",43,null],[13,"Reserved","tartan_acpi::aml::term","Indicates that the next most significant <code>bit_length</code> bits …",42,null],[12,"bit_length","tartan_acpi::aml::term::FieldElement","",44,null],[13,"AccessAs","tartan_acpi::aml::term","Sets access information for <strong>following</strong> fields.",42,null],[13,"ConnectNamed","","Indicates that <strong>following</strong> fields should be accessed with …",42,null],[13,"ConnectBuffer","","Indicates that <strong>following</strong> fields should be accessed with …",42,null],[4,"AccessAttrib","","Additional information about how a field is accessed.",null,null],[13,"None","","",45,null],[13,"Quick","","",45,null],[13,"SendReceive","","",45,null],[13,"Byte","","",45,null],[13,"Word","","",45,null],[13,"Block","","",45,null],[13,"ProcessCall","","",45,null],[13,"BlockProcessCall","","",45,null],[13,"Bytes","","",45,null],[13,"RawBytes","","",45,null],[13,"RawProcessBytes","","",45,null],[3,"MethodFlags","","Information about how to call a method.",null,null],[12,"arg_count","","",46,null],[12,"serialized","","",46,null],[12,"sync_level","","",46,null],[11,"unsynced","","",46,[[["u8",15]]]],[4,"RegionSpace","","Address space used to access a field.",null,null],[13,"SystemMemory","","",47,null],[13,"SystemIO","","",47,null],[13,"PCIConfig","","",47,null],[13,"EmbeddedControl","","",47,null],[13,"SMBus","","",47,null],[13,"SystemCMOS","","",47,null],[13,"PCIBarTarget","","",47,null],[13,"IPMI","","",47,null],[13,"GeneralPurposeIO","","",47,null],[13,"GenericSerialBus","","",47,null],[13,"PCC","","",47,null],[13,"OEMDefined","","",47,null],[4,"StatementOpcode","","Terminal operation that does not evaluate to a value, …",null,null],[13,"Break","","Break from a loop",48,null],[13,"BreakPoint","","Trigger a debugger breakpoint",48,null],[13,"Continue","","Continue to the next loop iteration",48,null],[13,"Fatal","","Signal an error that requires a system shutdown",48,null],[12,"fatal_type","tartan_acpi::aml::term::StatementOpcode","",49,null],[12,"code","","",49,null],[12,"arg","","",49,null],[13,"If","tartan_acpi::aml::term","Branch on a predicate",48,null],[12,"predicate","tartan_acpi::aml::term::StatementOpcode","",50,null],[12,"if_true","","",50,null],[12,"if_false","","",50,null],[13,"Load","tartan_acpi::aml::term","Load a dynamically-generated SSDT from a field, region, …",48,null],[12,"name","tartan_acpi::aml::term::StatementOpcode","",51,null],[12,"definition_block_handle","","",51,null],[13,"NoOp","tartan_acpi::aml::term","Do nothing",48,null],[13,"Notify","","Send a signal value to a device/processor/zone",48,null],[12,"device_or_zone","tartan_acpi::aml::term::StatementOpcode","",52,null],[12,"value","","",52,null],[13,"Release","tartan_acpi::aml::term","Release a held mutex",48,null],[12,"mutex","tartan_acpi::aml::term::StatementOpcode","",53,null],[13,"Reset","tartan_acpi::aml::term","Clear the signalled state of an event object",48,null],[12,"event","tartan_acpi::aml::term::StatementOpcode","",54,null],[13,"Return","tartan_acpi::aml::term","Exit the current method and yield the given value to the …",48,null],[13,"Signal","","Signal to one thread waiting on the event",48,null],[12,"event","tartan_acpi::aml::term::StatementOpcode","",55,null],[13,"Sleep","tartan_acpi::aml::term","Delay for at least the given milliseconds, releasing the …",48,null],[12,"milliseconds","tartan_acpi::aml::term::StatementOpcode","",56,null],[13,"Stall","tartan_acpi::aml::term","Delay for at least the given microseconds, but do <em>not</em> …",48,null],[12,"microseconds","tartan_acpi::aml::term::StatementOpcode","",57,null],[13,"While","tartan_acpi::aml::term","Execute a series of statements as long as the predicate …",48,null],[12,"predicate","tartan_acpi::aml::term::StatementOpcode","",58,null],[12,"body","","",58,null],[4,"ReferenceExpressionOpcode","tartan_acpi::aml::term","Terminal operation that evaluates to a reference.",null,null],[13,"RefOf","","Create a reference to the given name",59,null],[13,"Deref","","Get the target of a reference",59,null],[13,"Index","","Create a reference to an index within a buffer",59,null],[12,"source","tartan_acpi::aml::term::ReferenceExpressionOpcode","",60,null],[12,"index","","",60,null],[12,"result","","",60,null],[13,"Invoke","tartan_acpi::aml::term","Execute a control method",59,null],[4,"ExpressionOpcode","","Terminal operation that evaluates to a value or reference.",null,null],[13,"RefExpression","","",61,null],[13,"Buffer","","",61,null],[13,"Package","","",61,null],[13,"VarPackage","","",61,null],[13,"Acquire","","Try to acquire a mutex, returning <em>true</em> if the attempt …",61,null],[12,"mutex","tartan_acpi::aml::term::ExpressionOpcode","",62,null],[12,"timeout","","",62,null],[13,"Add","tartan_acpi::aml::term","Add two integers",61,null],[13,"BitwiseAnd","","Compute a bitwise AND of two integers",61,null],[13,"Concat","","Concatenate two strings or buffers",61,null],[13,"ConcatRes","","Concatenate two buffers containing resource templates",61,null],[13,"CondRefOf","","Try to create a reference, returning false if it is not …",61,null],[13,"CopyObject","","Update the destination with a copy of the given value, <em>…",61,null],[13,"Decrement","","Decrement an integer variable",61,null],[13,"Divide","","Perform integer (quotient-remainder) division",61,null],[12,"dividend","tartan_acpi::aml::term::ExpressionOpcode","",63,null],[12,"divisor","","",63,null],[12,"remainder","","",63,null],[12,"quotient","","",63,null],[13,"FindSetLeftBit","tartan_acpi::aml::term","Get the index of the most-significant set bit in a value",61,null],[13,"FindSetRightBit","","Get the index of the least-significant set bit in a value",61,null],[13,"FromBCD","","Decode a series of binary-coded decimal nibbles into an …",61,null],[13,"Increment","","Increment an integer variable",61,null],[13,"LogicalAnd","","Evaluate to true if both arguments are non-zero integers",61,null],[13,"Equal","","Evaluate to true if both values are equal",61,null],[13,"Greater","","Evaluate to true if the left value is greater than the …",61,null],[13,"GreaterEqual","","Evaluate to true if the left value is greater than or …",61,null],[13,"Less","","Evaluate to true if the left value is less than the right …",61,null],[13,"LessEqual","","Evaluate to true if the left value is less than or equal …",61,null],[13,"LogicalNot","","Evaluate to true if the value is zero",61,null],[13,"NotEqual","","Evaluate to true if the left value is not equal to the …",61,null],[13,"LoadTable","","Find an ACPI table indexed by the XSDT",61,null],[12,"signature","tartan_acpi::aml::term::ExpressionOpcode","",64,null],[12,"oem_id","","",64,null],[12,"oem_table_id","","",64,null],[12,"root_path","","",64,null],[12,"parameter_path","","",64,null],[12,"parameter_data","","",64,null],[13,"LogicalOr","tartan_acpi::aml::term","Evaluate to true if either of the values is a non-zero …",61,null],[13,"Match","","Search a package and return the index of the first …",61,null],[12,"search_package","tartan_acpi::aml::term::ExpressionOpcode","",65,null],[12,"a","","",65,null],[12,"b","","",65,null],[12,"start_index","","",65,null],[13,"Mid","tartan_acpi::aml::term","Copy a slice of a string or buffer.",61,null],[12,"source","tartan_acpi::aml::term::ExpressionOpcode","",66,null],[12,"index","","",66,null],[12,"length","","",66,null],[12,"result","","",66,null],[13,"Mod","tartan_acpi::aml::term","Compute the remainder of dividing the first integer by …",61,null],[13,"Multiply","","Multiply two integers",61,null],[13,"Nand","","Compute the bitwise NAND of two integers",61,null],[13,"Nor","","Compute the bitwise NOR of two integers",61,null],[13,"BitwiseNot","","Invert the bits of an integer",61,null],[13,"ObjectType","","Get an integer representing the type of the given value. …",61,null],[13,"BitwiseOr","","Compute the bitwise OR of the two integers",61,null],[13,"ShiftLeft","","Multiply an integer by the specified power of two",61,null],[13,"ShiftRight","","Divide an integer by the specified power of two",61,null],[13,"SizeOf","","Get the length of a string, buffer, or package",61,null],[13,"Store","","Update the destination with the given value, converting …",61,null],[13,"Subtract","","Subtract an integer from another, ignoring underflow",61,null],[13,"Timer","","Get the current value of the system timer in 100ns",61,null],[13,"ToBCD","","Encode an integer into a sequence of binary-coded decimal …",61,null],[13,"ToBuffer","","Convert a value to a buffer",61,null],[13,"ToDecimalString","","Encode a value as an ASCII decimal number",61,null],[13,"ToHexString","","Encode a value as an ASCII hexadecimal number",61,null],[13,"ToInteger","","Convert a value to an integer, either by parsing a string …",61,null],[13,"ToString","","Copy an ASCII string from a buffer into a string value",61,null],[12,"source","tartan_acpi::aml::term::ExpressionOpcode","",67,null],[12,"length","","",67,null],[12,"result","","",67,null],[13,"Wait","tartan_acpi::aml::term","Try to wait for another thread to signal an event object, …",61,null],[12,"event","tartan_acpi::aml::term::ExpressionOpcode","",68,null],[12,"timeout","","",68,null],[13,"BitwiseXor","tartan_acpi::aml::term","Compute the bitwise XOR of two integers",61,null],[4,"MatchOpcode","","Type of comparison used for a branch in an […",null,null],[13,"True","","",69,null],[13,"Equal","","",69,null],[13,"LessEqual","","",69,null],[13,"Less","","",69,null],[13,"GreaterEqual","","",69,null],[13,"Greater","","",69,null],[4,"ObjectType","","Type ID returned by [<code>ExpressionOpcode::ObjectType</code>].",null,null],[13,"Uninitialized","","",70,null],[13,"Integer","","",70,null],[13,"String","","",70,null],[13,"Buffer","","",70,null],[13,"Package","","",70,null],[13,"FieldUnit","","",70,null],[13,"Device","","",70,null],[13,"Event","","",70,null],[13,"Method","","",70,null],[13,"Mutex","","",70,null],[13,"OperationRegion","","",70,null],[13,"PowerResource","","",70,null],[13,"Processor","","",70,null],[13,"ThermalZone","","",70,null],[13,"BufferField","","",70,null],[13,"DDBHandle","","",70,null],[13,"DebugObject","","",70,null],[0,"misc","tartan_acpi::aml","Special symbols",null,null],[4,"ArgObject","tartan_acpi::aml::misc","Symbol for a positional argument passed to the current …",null,null],[13,"Arg0","","",71,null],[13,"Arg1","","",71,null],[13,"Arg2","","",71,null],[13,"Arg3","","",71,null],[13,"Arg4","","",71,null],[13,"Arg5","","",71,null],[13,"Arg6","","",71,null],[4,"LocalObject","","Symbol for a variable local to the current method.",null,null],[13,"Local0","","",72,null],[13,"Local1","","",72,null],[13,"Local2","","",72,null],[13,"Local3","","",72,null],[13,"Local4","","",72,null],[13,"Local5","","",72,null],[13,"Local6","","",72,null],[13,"Local7","","",72,null],[3,"DebugObject","","Symbol representing debugger output device.",null,null],[3,"AMLTable","tartan_acpi::aml","An ACPI table that contains AML, such as the DSDT or an …",null,null],[12,"header","","Common ACPI table header",73,null],[12,"body","","Top-level AML objects defined in the table",73,null],[3,"RootDescriptionPointerV1","tartan_acpi","Root System Description Pointer (RSDP) used in ACPI 1.0",null,null],[12,"signature","","",74,null],[12,"checksum","","",74,null],[12,"oem_id","","",74,null],[12,"revision","","",74,null],[12,"root_description_table_addr","","",74,null],[3,"RootDescriptionPointerV2","","Extended RDSP defined by ACPI 2.0",null,null],[12,"v1","","",75,null],[12,"length","","",75,null],[12,"extended_description_table_addr","","",75,null],[12,"extended_checksum","","",75,null],[3,"DescriptionHeader","","Common table header defined as <code>DESCRIPTION_HEADER</code> in the …",null,null],[12,"signature","","",76,null],[12,"length","","",76,null],[12,"revision","","",76,null],[12,"checksum","","",76,null],[12,"oem_id","","",76,null],[12,"oem_table_id","","",76,null],[12,"oem_revision","","",76,null],[12,"creator_id","","",76,null],[12,"creator_revision","","",76,null],[3,"FixedDescription","","Fixed ACPI Description Table (FADT)",null,null],[12,"header","","",77,null],[12,"firmware_api_ctrl_addr_32","","",77,null],[12,"diff_description_addr_32","","",77,null],[12,"preferred_power_profile","","",77,null],[12,"sci_interrupt","","",77,null],[12,"smi_command_port","","",77,null],[12,"smi_command_acpi_enable","","",77,null],[12,"smi_command_acpi_disable","","",77,null],[12,"smi_command_s4_bios_enter","","",77,null],[12,"smi_command_cpu_state_enable","","",77,null],[12,"pm_event_port_block_1a_32","","",77,null],[12,"pm_event_port_block_1b_32","","",77,null],[12,"pm_cntrl_port_block_1a_32","","",77,null],[12,"pm_cntrl_port_block_1b_32","","",77,null],[12,"pm_cntrl_port_block_2_32","","",77,null],[12,"pm_timer_port_block_32","","",77,null],[12,"general_event_port_block_0_32","","",77,null],[12,"general_event_port_block_1_32","","",77,null],[12,"pm_event_port_block_1_length","","",77,null],[12,"pm_cntrl_port_block_1_length","","",77,null],[12,"pm_cntrl_port_block_2_length","","",77,null],[12,"pm_timer_port_block_length","","",77,null],[12,"general_event_port_block_0_length","","",77,null],[12,"general_event_port_block_1_length","","",77,null],[12,"general_event_port_block_1_base","","",77,null],[12,"smi_command_c_state_enable","","",77,null],[12,"cpu_c2_latency","","",77,null],[12,"cpu_c3_latency","","",77,null],[12,"cache_flush_stride_count","","",77,null],[12,"cache_flush_stride_width","","",77,null],[12,"cpu_duty_cycle_register_offset","","",77,null],[12,"cpu_duty_cycle_register_width","","",77,null],[12,"rtc_day_alarm_index","","",77,null],[12,"rtc_month_alarm_index","","",77,null],[12,"rtc_century_alarm_index","","",77,null],[12,"pc_boot_architecture_flags","","",77,null],[12,"flags","","",77,null],[12,"reset_register","","",77,null],[12,"reset_register_value","","",77,null],[12,"arm_boot_architecture_flags","","",77,null],[12,"revision_minor","","",77,null],[12,"firmware_api_ctrl_addr_64","","",77,null],[12,"diff_description_addr_64","","",77,null],[12,"pm_event_port_block_1a_64","","",77,null],[12,"pm_event_port_block_1b_64","","",77,null],[12,"pm_control_port_block_1a_64","","",77,null],[12,"pm_control_port_block_1b_64","","",77,null],[12,"pm_control_port_block_2_64","","",77,null],[12,"pm_timer_port_block_64","","",77,null],[12,"general_event_port_block_0_64","","",77,null],[12,"general_event_port_block_1_64","","",77,null],[12,"sleep_control_register_addr","","",77,null],[12,"sleep_status_register_addr","","",77,null],[12,"hypervisor_vendor","","",77,null],[3,"GenericAddress","","Extended address structure defined in ACPI 2.0 to support …",null,null],[3,"AddressSpace","","Type of register address",null,null],[18,"SystemMemory","","",78,null],[18,"SystemIO","","",78,null],[18,"PCIConfiguration","","",78,null],[18,"EmbeddedController","","",78,null],[18,"SMBus","","",78,null],[18,"SystemCMOS","","",78,null],[18,"PCIBARTarget","","",78,null],[18,"IPMI","","",78,null],[18,"GeneralPurposeIo","","",78,null],[18,"GenericSerialBus","","",78,null],[18,"PlatformCommunicationsChannel","","",78,null],[18,"FunctionalFixed","","",78,null],[18,"OEMDefinedMin","","",78,null],[18,"OEMDefinedMax","","",78,null],[11,"name","","The name of the enum variant in code, if one is defined …",78,[[],[["option",4],["str",15]]]],[3,"AccessSize","","Memory width used to read/write from a register",null,null],[18,"Undefined","","",79,null],[18,"Byte","","",79,null],[18,"Word","","",79,null],[18,"DWord","","",79,null],[18,"QWord","","",79,null],[11,"name","","The name of the enum variant in code, if one is defined …",79,[[],[["option",4],["str",15]]]],[3,"FixedFlags","","Support flags from Fixed ACPI Description Table",null,null],[11,"x86_wbinvd_supported","","",80,[[],["bool",15]]],[11,"x86_wbinvd_requires_flush","","",80,[[],["bool",15]]],[11,"c1_supported","","",80,[[],["bool",15]]],[11,"c2_multi_cpu_supported","","",80,[[],["bool",15]]],[11,"power_button_is_control_method_device","","",80,[[],["bool",15]]],[11,"sleep_button_is_control_method_device","","",80,[[],["bool",15]]],[11,"rtc_not_fixed","","",80,[[],["bool",15]]],[11,"rtc_can_wake_s4","","",80,[[],["bool",15]]],[11,"timer_value_32_bit","","",80,[[],["bool",15]]],[11,"dock_capable","","",80,[[],["bool",15]]],[11,"fixed_description_reset_supported","","",80,[[],["bool",15]]],[11,"sealed_case","","",80,[[],["bool",15]]],[11,"headless","","",80,[[],["bool",15]]],[11,"execute_instruction_after_slp_typ","","",80,[[],["bool",15]]],[11,"pci_express_wake","","",80,[[],["bool",15]]],[11,"use_platform_clock","","",80,[[],["bool",15]]],[11,"rtc_status_valid_after_s4","","",80,[[],["bool",15]]],[11,"remote_power_on_supported","","",80,[[],["bool",15]]],[11,"force_apic_cluster_model","","",80,[[],["bool",15]]],[11,"force_apic_physical_destination_mode","","",80,[[],["bool",15]]],[11,"hardware_reduced_acpi","","",80,[[],["bool",15]]],[11,"low_power_s0_idle","","",80,[[],["bool",15]]],[11,"set_x86_wbinvd_supported","","",80,[[["bool",15]]]],[11,"set_x86_wbinvd_requires_flush","","",80,[[["bool",15]]]],[11,"set_c1_supported","","",80,[[["bool",15]]]],[11,"set_c2_multi_cpu_supported","","",80,[[["bool",15]]]],[11,"set_power_button_is_control_method_device","","",80,[[["bool",15]]]],[11,"set_sleep_button_is_control_method_device","","",80,[[["bool",15]]]],[11,"set_rtc_not_fixed","","",80,[[["bool",15]]]],[11,"set_rtc_can_wake_s4","","",80,[[["bool",15]]]],[11,"set_timer_value_32_bit","","",80,[[["bool",15]]]],[11,"set_dock_capable","","",80,[[["bool",15]]]],[11,"set_fixed_description_reset_supported","","",80,[[["bool",15]]]],[11,"set_sealed_case","","",80,[[["bool",15]]]],[11,"set_headless","","",80,[[["bool",15]]]],[11,"set_execute_instruction_after_slp_typ","","",80,[[["bool",15]]]],[11,"set_pci_express_wake","","",80,[[["bool",15]]]],[11,"set_use_platform_clock","","",80,[[["bool",15]]]],[11,"set_rtc_status_valid_after_s4","","",80,[[["bool",15]]]],[11,"set_remote_power_on_supported","","",80,[[["bool",15]]]],[11,"set_force_apic_cluster_model","","",80,[[["bool",15]]]],[11,"set_force_apic_physical_destination_mode","","",80,[[["bool",15]]]],[11,"set_hardware_reduced_acpi","","",80,[[["bool",15]]]],[11,"set_low_power_s0_idle","","",80,[[["bool",15]]]],[14,"parser_fn","","Defines a byte slice parser function, avoiding repetitive …",null,null],[11,"from","tartan_acpi::aml::parse::state","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","tartan_acpi::aml::name","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","tartan_acpi::aml::data","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","tartan_acpi::aml::term","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"from","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"from","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"from","tartan_acpi::aml::misc","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"from","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"into","","",81,[[]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"from","tartan_acpi::aml","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","tartan_acpi","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"from","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"from","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"from","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"into","","",77,[[]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"from","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"into","","",82,[[]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"from","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"into","","",78,[[]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"from","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"into","","",79,[[]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"from","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"into","","",80,[[]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"parse","tartan_acpi::aml::name","",4,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",5,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",6,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",7,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",8,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","tartan_acpi::aml::data","",9,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",10,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",11,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",12,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",13,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",14,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",15,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","tartan_acpi::aml::term","",16,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",17,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",18,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",20,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",39,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",42,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",46,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",47,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",48,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",59,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",61,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",69,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",70,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","tartan_acpi::aml::misc","",71,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",72,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"parse","","",81,[[["parserstate",3]],[["amlparseresult",6],["amlparseerror",8]]]],[11,"from","tartan_acpi::aml::parse::state","",1,[[]]],[11,"from","tartan_acpi::aml::name","",4,[[],["nameseg",3]]],[11,"from","","",5,[[],["namestring",3]]],[11,"from","","",5,[[["nameseg",3]],["namestring",3]]],[11,"from","","",7,[[["namestring",3]],["simplename",4]]],[11,"from","","",7,[[["argobject",4]],["simplename",4]]],[11,"from","","",7,[[["localobject",4]],["simplename",4]]],[11,"from","","",8,[[["simplename",4]],["supername",4]]],[11,"from","","",8,[[["namestring",3]],["supername",4]]],[11,"from","","",8,[[["argobject",4]],["supername",4]]],[11,"from","","",8,[[["localobject",4]],["supername",4]]],[11,"from","","",8,[[["referenceexpressionopcode",4]],["supername",4]]],[11,"from","tartan_acpi::aml::data","",13,[[["datarefobject",4]],["packageelement",4]]],[11,"from","","",13,[[["namestring",3]],["packageelement",4]]],[11,"from","","",14,[[["computationaldata",4]],["dataobject",4]]],[11,"from","","",14,[[["package",3]],["dataobject",4]]],[11,"from","","",14,[[["varpackage",3]],["dataobject",4]]],[11,"from","","",15,[[["dataobject",4]],["datarefobject",4]]],[11,"from","","",15,[[["computationaldata",4]],["datarefobject",4]]],[11,"from","","",15,[[["package",3]],["datarefobject",4]]],[11,"from","","",15,[[["varpackage",3]],["datarefobject",4]]],[11,"from","tartan_acpi::aml::term","",16,[[["namespacemodifier",4]],["termobject",4]]],[11,"from","","",16,[[["namedobject",4]],["termobject",4]]],[11,"from","","",16,[[["statementopcode",4]],["termobject",4]]],[11,"from","","",16,[[["expressionopcode",4]],["termobject",4]]],[11,"from","","",16,[[["referenceexpressionopcode",4]],["termobject",4]]],[11,"from","","",16,[[["buffer",3]],["termobject",4]]],[11,"from","","",16,[[["package",3]],["termobject",4]]],[11,"from","","",16,[[["varpackage",3]],["termobject",4]]],[11,"from","","",17,[[["expressionopcode",4]],["termarg",4]]],[11,"from","","",17,[[["referenceexpressionopcode",4]],["termarg",4]]],[11,"from","","",17,[[["buffer",3]],["termarg",4]]],[11,"from","","",17,[[["package",3]],["termarg",4]]],[11,"from","","",17,[[["varpackage",3]],["termarg",4]]],[11,"from","","",17,[[["dataobject",4]],["termarg",4]]],[11,"from","","",17,[[["computationaldata",4]],["termarg",4]]],[11,"from","","",17,[[["argobject",4]],["termarg",4]]],[11,"from","","",17,[[["localobject",4]],["termarg",4]]],[11,"from","","",17,[[["namestring",3]],["termarg",4]]],[11,"from","","",61,[[["referenceexpressionopcode",4]],["expressionopcode",4]]],[11,"from","","",61,[[["buffer",3]],["expressionopcode",4]]],[11,"from","","",61,[[["package",3]],["expressionopcode",4]]],[11,"from","","",61,[[["varpackage",3]],["expressionopcode",4]]],[11,"from","tartan_acpi","",78,[[["u8",15]]]],[11,"from","","",79,[[["u8",15]]]],[11,"from","","",80,[[["u32",15]]]],[11,"fmt","tartan_acpi::aml::parse::state","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml","",73,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml::name","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml::data","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml::term","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml::misc","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_acpi::aml::name","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","Format a <code>NameString</code> like a path in ASL",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","tartan_acpi::aml::parse::state","",0,[[["methodsignature",3]],["bool",15]]],[11,"ne","","",0,[[["methodsignature",3]],["bool",15]]],[11,"eq","","",1,[[["parserstate",3]],["bool",15]]],[11,"ne","","",1,[[["parserstate",3]],["bool",15]]],[11,"eq","tartan_acpi::aml","",73,[[["amltable",3]],["bool",15]]],[11,"ne","","",73,[[["amltable",3]],["bool",15]]],[11,"eq","tartan_acpi::aml::name","",4,[[["nameseg",3]],["bool",15]]],[11,"ne","","",4,[[["nameseg",3]],["bool",15]]],[11,"eq","","",5,[[["namestring",3]],["bool",15]]],[11,"ne","","",5,[[["namestring",3]],["bool",15]]],[11,"eq","","",6,[[["pathanchor",4]],["bool",15]]],[11,"ne","","",6,[[["pathanchor",4]],["bool",15]]],[11,"eq","","",7,[[["simplename",4]],["bool",15]]],[11,"ne","","",7,[[["simplename",4]],["bool",15]]],[11,"eq","","",8,[[["supername",4]],["bool",15]]],[11,"ne","","",8,[[["supername",4]],["bool",15]]],[11,"eq","tartan_acpi::aml::data","",9,[[["computationaldata",4]],["bool",15]]],[11,"ne","","",9,[[["computationaldata",4]],["bool",15]]],[11,"eq","","",10,[[["buffer",3]],["bool",15]]],[11,"ne","","",10,[[["buffer",3]],["bool",15]]],[11,"eq","","",11,[[["package",3]],["bool",15]]],[11,"ne","","",11,[[["package",3]],["bool",15]]],[11,"eq","","",12,[[["varpackage",3]],["bool",15]]],[11,"ne","","",12,[[["varpackage",3]],["bool",15]]],[11,"eq","","",13,[[["packageelement",4]],["bool",15]]],[11,"ne","","",13,[[["packageelement",4]],["bool",15]]],[11,"eq","","",14,[[["dataobject",4]],["bool",15]]],[11,"ne","","",14,[[["dataobject",4]],["bool",15]]],[11,"eq","","",15,[[["datarefobject",4]],["bool",15]]],[11,"ne","","",15,[[["datarefobject",4]],["bool",15]]],[11,"eq","tartan_acpi::aml::term","",16,[[["termobject",4]],["bool",15]]],[11,"ne","","",16,[[["termobject",4]],["bool",15]]],[11,"eq","","",17,[[["termarg",4]],["bool",15]]],[11,"ne","","",17,[[["termarg",4]],["bool",15]]],[11,"eq","","",18,[[["namespacemodifier",4]],["bool",15]]],[11,"ne","","",18,[[["namespacemodifier",4]],["bool",15]]],[11,"eq","","",20,[[["namedobject",4]],["bool",15]]],[11,"ne","","",20,[[["namedobject",4]],["bool",15]]],[11,"eq","","",39,[[["fieldflags",3]],["bool",15]]],[11,"ne","","",39,[[["fieldflags",3]],["bool",15]]],[11,"eq","","",40,[[["accesstype",4]],["bool",15]]],[11,"eq","","",41,[[["updaterule",4]],["bool",15]]],[11,"eq","","",42,[[["fieldelement",4]],["bool",15]]],[11,"ne","","",42,[[["fieldelement",4]],["bool",15]]],[11,"eq","","",45,[[["accessattrib",4]],["bool",15]]],[11,"ne","","",45,[[["accessattrib",4]],["bool",15]]],[11,"eq","","",46,[[["methodflags",3]],["bool",15]]],[11,"ne","","",46,[[["methodflags",3]],["bool",15]]],[11,"eq","","",47,[[["regionspace",4]],["bool",15]]],[11,"ne","","",47,[[["regionspace",4]],["bool",15]]],[11,"eq","","",48,[[["statementopcode",4]],["bool",15]]],[11,"ne","","",48,[[["statementopcode",4]],["bool",15]]],[11,"eq","","",59,[[["referenceexpressionopcode",4]],["bool",15]]],[11,"ne","","",59,[[["referenceexpressionopcode",4]],["bool",15]]],[11,"eq","","",61,[[["expressionopcode",4]],["bool",15]]],[11,"ne","","",61,[[["expressionopcode",4]],["bool",15]]],[11,"eq","","",69,[[["matchopcode",4]],["bool",15]]],[11,"eq","","",70,[[["objecttype",4]],["bool",15]]],[11,"eq","tartan_acpi::aml::misc","",71,[[["argobject",4]],["bool",15]]],[11,"eq","","",72,[[["localobject",4]],["bool",15]]],[11,"eq","","",81,[[["debugobject",3]],["bool",15]]],[11,"eq","tartan_acpi","",74,[[["rootdescriptionpointerv1",3]],["bool",15]]],[11,"ne","","",74,[[["rootdescriptionpointerv1",3]],["bool",15]]],[11,"eq","","",75,[[["rootdescriptionpointerv2",3]],["bool",15]]],[11,"ne","","",75,[[["rootdescriptionpointerv2",3]],["bool",15]]],[11,"eq","","",76,[[["descriptionheader",3]],["bool",15]]],[11,"ne","","",76,[[["descriptionheader",3]],["bool",15]]],[11,"eq","","",77,[[["fixeddescription",3]],["bool",15]]],[11,"ne","","",77,[[["fixeddescription",3]],["bool",15]]],[11,"eq","","",82,[[["genericaddress",3]],["bool",15]]],[11,"ne","","",82,[[["genericaddress",3]],["bool",15]]],[11,"eq","","",78,[[["addressspace",3]],["bool",15]]],[11,"ne","","",78,[[["addressspace",3]],["bool",15]]],[11,"eq","","",79,[[["accesssize",3]],["bool",15]]],[11,"ne","","",79,[[["accesssize",3]],["bool",15]]],[11,"eq","","",80,[[["fixedflags",3]],["bool",15]]],[11,"ne","","",80,[[["fixedflags",3]],["bool",15]]],[11,"cmp","","",78,[[["addressspace",3]],["ordering",4]]],[11,"cmp","","",79,[[["accesssize",3]],["ordering",4]]],[11,"partial_cmp","","",78,[[["addressspace",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",79,[[["accesssize",3]],[["ordering",4],["option",4]]]],[11,"hash","","",78,[[]]],[11,"hash","","",79,[[]]],[11,"try_from","tartan_acpi::aml::term","",40,[[["u8",15]],["result",4]]],[11,"try_from","","",41,[[["u8",15]],["result",4]]],[11,"clone","tartan_acpi::aml::parse::state","",0,[[],["methodsignature",3]]],[11,"clone","","",1,[[],["parserstate",3]]],[11,"clone","tartan_acpi::aml::name","",4,[[],["nameseg",3]]],[11,"clone","","",5,[[],["namestring",3]]],[11,"clone","","",6,[[],["pathanchor",4]]],[11,"clone","","",7,[[],["simplename",4]]],[11,"clone","","",8,[[],["supername",4]]],[11,"clone","tartan_acpi::aml::data","",9,[[],["computationaldata",4]]],[11,"clone","","",10,[[],["buffer",3]]],[11,"clone","","",11,[[],["package",3]]],[11,"clone","","",12,[[],["varpackage",3]]],[11,"clone","","",13,[[],["packageelement",4]]],[11,"clone","","",14,[[],["dataobject",4]]],[11,"clone","","",15,[[],["datarefobject",4]]],[11,"clone","tartan_acpi::aml::term","",16,[[],["termobject",4]]],[11,"clone","","",17,[[],["termarg",4]]],[11,"clone","","",18,[[],["namespacemodifier",4]]],[11,"clone","","",20,[[],["namedobject",4]]],[11,"clone","","",39,[[],["fieldflags",3]]],[11,"clone","","",40,[[],["accesstype",4]]],[11,"clone","","",41,[[],["updaterule",4]]],[11,"clone","","",42,[[],["fieldelement",4]]],[11,"clone","","",45,[[],["accessattrib",4]]],[11,"clone","","",46,[[],["methodflags",3]]],[11,"clone","","",47,[[],["regionspace",4]]],[11,"clone","","",48,[[],["statementopcode",4]]],[11,"clone","","",59,[[],["referenceexpressionopcode",4]]],[11,"clone","","",61,[[],["expressionopcode",4]]],[11,"clone","","",69,[[],["matchopcode",4]]],[11,"clone","","",70,[[],["objecttype",4]]],[11,"clone","tartan_acpi::aml::misc","",71,[[],["argobject",4]]],[11,"clone","","",72,[[],["localobject",4]]],[11,"clone","","",81,[[],["debugobject",3]]],[11,"clone","tartan_acpi","",74,[[],["rootdescriptionpointerv1",3]]],[11,"clone","","",75,[[],["rootdescriptionpointerv2",3]]],[11,"clone","","",76,[[],["descriptionheader",3]]],[11,"clone","","",77,[[],["fixeddescription",3]]],[11,"clone","","",82,[[],["genericaddress",3]]],[11,"clone","","",78,[[],["addressspace",3]]],[11,"clone","","",79,[[],["accesssize",3]]],[11,"clone","","",80,[[],["fixedflags",3]]],[11,"default","tartan_acpi::aml::parse::state","",0,[[],["methodsignature",3]]],[11,"default","","",1,[[],["parserstate",3]]],[11,"default","tartan_acpi","",78,[[],["addressspace",3]]],[11,"default","","",79,[[],["accesssize",3]]],[11,"default","","",80,[[],["fixedflags",3]]],[11,"name","","",78,[[],[["option",4],["str",15]]]],[11,"name","","",79,[[],[["option",4],["str",15]]]],[11,"input_len","tartan_acpi::aml::parse::state","",1,[[],["usize",15]]],[11,"as_bytes","","",1,[[]]],[11,"iter_indices","","",1,[[]]],[11,"iter_elements","","",1,[[]]],[11,"position","","",1,[[["fn",8]],[["usize",15],["option",4]]]],[11,"slice_index","","",1,[[["usize",15]],[["usize",15],["result",4],["needed",4]]]]],"p":[[3,"MethodSignature"],[3,"ParserState"],[8,"ReplaceableParseError"],[8,"Parse"],[3,"NameSeg"],[3,"NameString"],[4,"PathAnchor"],[4,"SimpleName"],[4,"SuperName"],[4,"ComputationalData"],[3,"Buffer"],[3,"Package"],[3,"VarPackage"],[4,"PackageElement"],[4,"DataObject"],[4,"DataRefObject"],[4,"TermObject"],[4,"TermArg"],[4,"NameSpaceModifier"],[13,"Alias"],[4,"NamedObject"],[13,"BankField"],[13,"CreateBitField"],[13,"CreateByteField"],[13,"CreateDWordField"],[13,"CreateField"],[13,"CreateQWordField"],[13,"CreateWordField"],[13,"DataTableRegion"],[13,"Device"],[13,"External"],[13,"Field"],[13,"IndexField"],[13,"Method"],[13,"Mutex"],[13,"OperationRegion"],[13,"PowerResource"],[13,"Processor"],[13,"ThermalZone"],[3,"FieldFlags"],[4,"AccessType"],[4,"UpdateRule"],[4,"FieldElement"],[13,"Named"],[13,"Reserved"],[4,"AccessAttrib"],[3,"MethodFlags"],[4,"RegionSpace"],[4,"StatementOpcode"],[13,"Fatal"],[13,"If"],[13,"Load"],[13,"Notify"],[13,"Release"],[13,"Reset"],[13,"Signal"],[13,"Sleep"],[13,"Stall"],[13,"While"],[4,"ReferenceExpressionOpcode"],[13,"Index"],[4,"ExpressionOpcode"],[13,"Acquire"],[13,"Divide"],[13,"LoadTable"],[13,"Match"],[13,"Mid"],[13,"ToString"],[13,"Wait"],[4,"MatchOpcode"],[4,"ObjectType"],[4,"ArgObject"],[4,"LocalObject"],[3,"AMLTable"],[3,"RootDescriptionPointerV1"],[3,"RootDescriptionPointerV2"],[3,"DescriptionHeader"],[3,"FixedDescription"],[3,"AddressSpace"],[3,"AccessSize"],[3,"FixedFlags"],[3,"DebugObject"],[3,"GenericAddress"]]},\
"tartan_arch":{"doc":"Architecture-specific primitives for Tartan OS","i":[[0,"aarch64","tartan_arch","Architecture-specific primitives for 64-bit Arm.",null,null],[0,"float","tartan_arch::aarch64","Floating-point control and status.",null,null],[3,"ControlRegister","tartan_arch::aarch64::float","<code>FPCR</code>: Influences floating-point instruction execution.",null,null],[11,"alternative_half_precision_format","","<code>AHP</code>: Use an alternative format for half-precision floats …",0,[[],["bool",15]]],[11,"default_nan","","<code>DN</code>: Always use the default encoding for NaN results. …",0,[[],["bool",15]]],[11,"flush_to_zero","","<code>FZ</code>: When a result would be denormal, yield zero instead. …",0,[[],["bool",15]]],[11,"rounding_mode","","<code>RMode</code>: The IEEE 754 rounding mode in use.",0,[[],["roundingmode",3]]],[11,"flush_to_zero_half_precision","","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …",0,[[],["bool",15]]],[11,"trapped_exceptions","","For each type of floating-point exception, defines …",0,[[],["exceptions",3]]],[11,"set_alternative_half_precision_format","","<code>AHP</code>: Use an alternative format for half-precision floats …",0,[[["bool",15]]]],[11,"set_default_nan","","<code>DN</code>: Always use the default encoding for NaN results. …",0,[[["bool",15]]]],[11,"set_flush_to_zero","","<code>FZ</code>: When a result would be denormal, yield zero instead. …",0,[[["bool",15]]]],[11,"set_rounding_mode","","<code>RMode</code>: The IEEE 754 rounding mode in use.",0,[[["roundingmode",3]]]],[11,"set_flush_to_zero_half_precision","","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …",0,[[["bool",15]]]],[11,"set_trapped_exceptions","","For each type of floating-point exception, defines …",0,[[["exceptions",3]]]],[11,"get","","Retrieve the current value of this register",0,[[]]],[11,"set","","Update the register to the given value.",0,[[]]],[3,"StatusRegister","","<code>FPSR</code>: Indicates non-trapped floating-point exceptions.",null,null],[11,"exceptions","","Indicates any non-trapped exceptions that have been …",1,[[],["exceptions",3]]],[11,"set_exceptions","","Indicates any non-trapped exceptions that have been …",1,[[["exceptions",3]]]],[11,"get","","Retrieve the current value of this register",1,[[]]],[11,"set","","Update the register to the given value.",1,[[]]],[3,"RoundingMode","","Floating-point rounding mode, as defined by IEEE 754.",null,null],[18,"Nearest","","Round to the nearest number, with ties toward even …",2,null],[18,"PlusInfinity","","Round toward positive infinity.",2,null],[18,"MinusInfinity","","Round toward negative infinity.",2,null],[18,"Zero","","Round toward zero (truncate).",2,null],[11,"name","","The name of the enum variant in code, if one is defined …",2,[[],[["option",4],["str",15]]]],[3,"Exceptions","","Status/mask bits for each type of floating-point …",null,null],[0,"interrupt","tartan_arch::aarch64","Exception and interrupt handling.",null,null],[4,"Kind","tartan_arch::aarch64::interrupt","The kind of exception being handled: sync, IRQ, FIQ, …",null,null],[13,"Synchronous","","A standard exception traceable to a specific instruction.",3,null],[13,"Interrupt","","An external interrupt (IRQ).",3,null],[13,"FastInterrupt","","An external interrupt through the higher-priority fast …",3,null],[13,"SystemError","","An internal error with the processor (SError).",3,null],[4,"Source","","The exception level that generated an exception.",null,null],[13,"CurrentLevelThread","","Exception from current level using SP_EL0 (thread mode)",4,null],[13,"CurrentLevelHandler","","Exception from current level using current-level SP …",4,null],[13,"LowerLevel","","Exception from lower level (e.g., EL0) in 64-bit mode",4,null],[13,"LowerLevel32Bit","","Exception from lower level (e.g., EL0) in 32-bit mode",4,null],[3,"VectorEntry","","A single entry in the exception [<code>VectorTable</code>].",null,null],[3,"VectorTable","","Exception vector table that contains code to handle …",null,null],[4,"VectorBaseAddressRegister","","<code>VBAR_ELx</code>: Contains the address of the [<code>VectorTable</code>] that …",null,null],[11,"get","","Retrieve the current value of this register for the …",5,[[["exceptionlevel",4]]]],[11,"set","","Update the register for the specified exception level …",5,[[["exceptionlevel",4]]]],[3,"MaskRegister","","<code>DAIF</code>: Controls masking of different kinds of exceptions.",null,null],[11,"fast_interrupts_masked","","<code>F</code>: Mask fast (FIQ) interrupts.",6,[[],["bool",15]]],[11,"interrupts_masked","","<code>I</code>: Mask regular (IRQ) interrupts.",6,[[],["bool",15]]],[11,"system_error_masked","","<code>A</code>: Mask system error (SError) exceptions.",6,[[],["bool",15]]],[11,"debug_masked","","<code>D</code>: Mask debugging-related exceptions (breakpoints, …",6,[[],["bool",15]]],[11,"set_fast_interrupts_masked","","<code>F</code>: Mask fast (FIQ) interrupts.",6,[[["bool",15]]]],[11,"set_interrupts_masked","","<code>I</code>: Mask regular (IRQ) interrupts.",6,[[["bool",15]]]],[11,"set_system_error_masked","","<code>A</code>: Mask system error (SError) exceptions.",6,[[["bool",15]]]],[11,"set_debug_masked","","<code>D</code>: Mask debugging-related exceptions (breakpoints, …",6,[[["bool",15]]]],[11,"get","","Retrieve the current value of this register",6,[[]]],[11,"set","","Update the register to the given value.",6,[[]]],[3,"SyndromeRegister","","<code>ESR_ELx</code>: Holds information about the cause of the …",null,null],[11,"class","","<code>EC</code>: The class of exception that was triggered.",7,[[],["class",3]]],[11,"length_32bit","","<code>IL</code>: When set, indicates that the instruction that …",7,[[],["bool",15]]],[11,"class_data","","<code>ISS</code>: Additional data about the exception in a format that …",7,[[],["u32",15]]],[11,"set_class","","<code>EC</code>: The class of exception that was triggered.",7,[[["class",3]]]],[11,"set_length_32bit","","<code>IL</code>: When set, indicates that the instruction that …",7,[[["bool",15]]]],[11,"set_class_data","","<code>ISS</code>: Additional data about the exception in a format that …",7,[[["u32",15]]]],[11,"get","","Retrieve the current value of this register for the …",7,[[["exceptionlevel",4]]]],[11,"set","","Update the register for the specified exception level …",7,[[["exceptionlevel",4]]]],[3,"Class","","Classifies different exception causes.",null,null],[18,"Unknown","","Tried to execute an undefined/unsupported opcode, or for …",8,null],[18,"Wait","","Trapped execution of a wait instruction (<code>WFE</code>/<code>WFI</code>).",8,null],[18,"FPUAccess","","Trapped access to a FPU/vector register or instruction.",8,null],[18,"IllegalState","","Tried to execute instructions after an illegal return.",8,null],[18,"SupervisorCall","","Triggered a system call via the <code>SVC</code> instruction.",8,null],[18,"SystemInstruction","","Trapped access to a system register or instruction.",8,null],[18,"VectorAccess","","Trapped access to a vector register or instruction.",8,null],[18,"PointerAuthFailure","","Improperly authenticated pointer detected. Requires …",8,null],[18,"InstructionAbortFromLower","","Instruction abort triggered at lower exception level.",8,null],[18,"InstructionAbortFromCurrent","","Instruction abort triggered at current exception level.",8,null],[18,"PCAlignment","","Program counter not properly aligned.",8,null],[18,"DataAbortFromLower","","Data abort triggered at lower exception level.",8,null],[18,"DataAbortFromCurrent","","Data abort triggered at current exception level.",8,null],[18,"SPAlignment","","Stack pointer not properly aligned.",8,null],[18,"FloatException","","Trapped floating point exception.",8,null],[18,"SystemError","","System error (SError).",8,null],[18,"BreakpointFromLower","","Breakpoint triggered at lower exception level.",8,null],[18,"BreakpointFromCurrent","","Breakpoint triggered at current exception level.",8,null],[18,"StepFromLower","","Software step at lower exception level.",8,null],[18,"StepFromCurrent","","Software step at current exception level.",8,null],[18,"WatchpointFromLower","","Watchpoint triggered at lower exception level.",8,null],[18,"WatchpointFromCurrent","","Watchpoint triggered at current exception level.",8,null],[18,"BreakpointInstruction","","Executed a <code>BRK</code> breakpoint instruction.",8,null],[11,"name","","The name of the enum variant in code, if one is defined …",8,[[],[["option",4],["str",15]]]],[4,"ExceptionLevel","tartan_arch::aarch64","<code>EL</code>: Defines the privilege level of executing code. Higher …",null,null],[13,"Zero","","<code>EL0</code>, used for unprivileged user code.",9,null],[13,"One","","<code>EL1</code>, used for OS kernel code.",9,null],[13,"Two","","<code>EL2</code>, used for hypervisors in virtualized systems.",9,null],[13,"Three","","<code>EL3</code>, used for the secure manager.",9,null],[11,"get","","Get the current exception level. Only accessible from EL1 …",9,[[]]],[4,"StackPointerSelect","","Controls which stack pointer register is used when …",null,null],[13,"Level0","","<code>T</code> (thread) mode: use the stack pointer register from EL0.",10,null],[13,"CurrentLevel","","<code>H</code> (handler) mode: use the stack pointer register for the …",10,null],[11,"get","","Get the value of the flag for the current exception …",10,[[]]],[11,"set","","Update the value of the flag for the current exception …",10,[[]]],[0,"x86_64","tartan_arch","Architecture-specific primitives for 64-bit x86 …",null,null],[0,"protection","tartan_arch::x86_64","Support for protected mode operation.",null,null],[3,"TaskStateSegmentHeader","tartan_arch::x86_64::protection","Stack and I/O permission map pointers that make up the …",null,null],[12,"privileged_stack","","Stack pointers to use when switching to privilege levels …",11,null],[12,"interrupt_stack","","Stack pointers available for use when handling …",11,null],[12,"io_permission_map_offset","","Offset from the start of this structure to start of the […",11,null],[11,"new","","Create a header with zero-initialized stack pointers and …",11,[[]]],[3,"ControlRegister8","tartan_arch::x86_64","<code>CR8</code>: System control register for controlling interrupts …",null,null],[11,"task_priority_level","","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …",12,[[],["u8",15]]],[11,"set_task_priority_level","","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …",12,[[["u8",15]]]],[11,"get","","Retrieve the current value of this register",12,[[]]],[11,"set","","Update the register to the given value.",12,[[]]],[3,"ExtendedFeatureEnableRegister","","<code>IA32_EFER</code>: Model-specific register that controls features …",null,null],[11,"syscall","","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.",13,[[],["bool",15]]],[11,"long_mode_enabled","","<code>IA32_EFER.LME</code>: Support 64-bit mode.",13,[[],["bool",15]]],[11,"long_mode_active","","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.",13,[[],["bool",15]]],[11,"no_execute","","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.",13,[[],["bool",15]]],[11,"set_syscall","","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.",13,[[["bool",15]]]],[11,"set_long_mode_enabled","","<code>IA32_EFER.LME</code>: Support 64-bit mode.",13,[[["bool",15]]]],[11,"set_long_mode_active","","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.",13,[[["bool",15]]]],[11,"set_no_execute","","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.",13,[[["bool",15]]]],[11,"get","","Retrieve the current value of this register",13,[[]]],[11,"set","","Update the register to the given value.",13,[[]]],[0,"x86","tartan_arch","Architecture-specific primitives for 32-bit x86 …",null,null],[0,"protection","tartan_arch::x86","Support for protected mode operation.",null,null],[3,"BasicTaskStateSegment","tartan_arch::x86::protection","A task state segment (TSS) with fixed redirect and I/O …",null,null],[12,"header","","Saved task data and pointer to bitmaps",14,null],[12,"bitmaps","","I/O permission map and interrupt redirect map",14,null],[3,"TaskStateSegmentHeader","","Saved task state that makes up the most significant part …",null,null],[12,"previous_task","","Segment selector saved by the processor referencing the …",15,null],[12,"privileged_stack","","Stack pointer and segment for privilege levels 0–2.",15,null],[12,"control_register_3","","Page table pointer from [<code>ControlRegister3</code>].",15,null],[12,"instruction_pointer","","<code>EIP</code> value saved by the processor.",15,null],[12,"flags","","<code>EFLAGS</code> value saved by the processor.",15,null],[12,"general_a","","<code>EAX</code> value saved by the processor.",15,null],[12,"general_c","","<code>ECX</code> value saved by the processor.",15,null],[12,"general_d","","<code>EDX</code> value saved by the processor.",15,null],[12,"general_b","","<code>EBX</code> value saved by the processor.",15,null],[12,"stack_pointer","","<code>SP</code> value saved by the processor for privilege level 3.",15,null],[12,"base_pointer","","<code>EBP</code> value saved by the processor.",15,null],[12,"source_index","","<code>ESI</code> value saved by the processor.",15,null],[12,"destination_index","","<code>EDI</code> value saved by the processor.",15,null],[12,"general_segment_e","","<code>ES</code> value saved by the processor.",15,null],[12,"code_segment","","<code>CS</code> value saved by the processor.",15,null],[12,"stack_segment","","<code>SS</code> value saved by the processor for privilege level 3.",15,null],[12,"data_segment","","<code>DS</code> value saved by the processor.",15,null],[12,"general_segment_f","","<code>FS</code> value saved by the processor.",15,null],[12,"general_segment_g","","<code>GS</code> value saved by the processor.",15,null],[12,"local_descriptor_table","","[<code>LocalDescriptorTableRegister</code>] value to load when …",15,null],[12,"debug_trap","","Indicates that a debug exception should be raised when …",15,null],[12,"io_permission_map_offset","","Offset from the start of this structure to start of the […",15,null],[12,"shadow_stack_pointer","","Pointer to the shadow stack.",15,null],[11,"new","","Create a new zero-initialized header",15,[[]]],[3,"PrivilegedStack","","Stack pointer and segment for a given privilege level",null,null],[12,"pointer","","Stack pointer (<code>SP</code>) value for this privilege level.",16,null],[12,"segment","","Stack segment (<code>SS</code>) value for this privilege level.",16,null],[11,"new","","Create a new zero-initialized stack pointer",16,[[]]],[3,"TaskStateSegmentBitmaps","","I/O permission map and interrupt redirect map, which are …",null,null],[12,"interrupt_redirect","","Indicates which handler to use for software-triggered …",17,null],[12,"io_permission","","The [<code>IOPermissionBitmap</code>] for this task.",17,null],[0,"x86_common","tartan_arch","Architecture-specific primitives common to 32-bit and …",null,null],[0,"features","tartan_arch::x86_common","Processor feature detection with CPUID.",null,null],[5,"cpuid","tartan_arch::x86_common::features","Low-level CPUID call. Writes the leaf/subleaf index given …",null,[[["u32",15]]]],[5,"max_cpuid_index_basic","","Get the maximum primary index value (EAX) supported for <em>…",null,[[],["u32",15]]],[5,"max_cpuid_index_extended","","Get the maximum primary index value (EAX) supported for <em>…",null,[[],["u32",15]]],[3,"BasicFeatures","","Primary feature list returned in <code>CPUID.01H:ECX+EDX</code>.",null,null],[11,"on_chip_fpu","","<code>FPU</code>: The processor has a built-in x87 floating-point unit",18,[[],["bool",15]]],[11,"virtual_8086_extensions","","<code>VME</code>: Supports virtual real-mode extensions (VME) and …",18,[[],["bool",15]]],[11,"debugging_extensions","","<code>DE</code>: Supports breaking on I/O and on accessing debug …",18,[[],["bool",15]]],[11,"page_size_extension","","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.",18,[[],["bool",15]]],[11,"time_stamp_counter","","<code>TSC</code>: Supports reading the processor\'s timestamp with <code>RDTSC</code>…",18,[[],["bool",15]]],[11,"model_registers","","<code>MSR</code>: Has model-specific registers which can be accessed …",18,[[],["bool",15]]],[11,"physical_address_extension","","<code>PAE</code>: Supports mapping virtual memory to physical …",18,[[],["bool",15]]],[11,"machine_check_exception","","<code>MCE</code>: Defines an exception (18) for reporting internal …",18,[[],["bool",15]]],[11,"compare_exchange_64bit","","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.",18,[[],["bool",15]]],[11,"on_chip_apic","","<code>APIC</code>: The processor has a built-in advanced programmable …",18,[[],["bool",15]]],[11,"sysenter","","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.",18,[[],["bool",15]]],[11,"memory_type_range_registers","","<code>MTRR</code>: Has memory type range registers.",18,[[],["bool",15]]],[11,"global_pages","","<code>PGE</code>: Supports global pages, which are available in all …",18,[[],["bool",15]]],[11,"machine_check_architecture","","<code>MCA</code>: Supports extended features for reporting internal …",18,[[],["bool",15]]],[11,"conditional_move","","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if …",18,[[],["bool",15]]],[11,"page_attribute_table","","<code>PAT</code>: Supports page attribute tables.",18,[[],["bool",15]]],[11,"page_size_extension_36bit","","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …",18,[[],["bool",15]]],[11,"serial_number","","<code>PSN</code>: Supports retrieving a processor serial number with …",18,[[],["bool",15]]],[11,"cache_line_flush","","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …",18,[[],["bool",15]]],[11,"debug_store","","<code>DS</code>: Supports writing debug information to memory.",18,[[],["bool",15]]],[11,"thermal_power_management","","<code>ACPI</code>: Supports thermal monitoring and power management …",18,[[],["bool",15]]],[11,"mmx","","<code>MMX</code>: Supports MMX instructions.",18,[[],["bool",15]]],[11,"fpu_save","","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.",18,[[],["bool",15]]],[11,"sse","","<code>SSE</code>: Supports SSE instructions.",18,[[],["bool",15]]],[11,"sse_2","","<code>SSE2</code>: Supports SSE2 instructions.",18,[[],["bool",15]]],[11,"self_snoop","","The processor can snoop on its own cache line. This helps …",18,[[],["bool",15]]],[11,"max_apic_id_field","","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …",18,[[],["bool",15]]],[11,"thermal_monitor","","<code>TM</code>: Has thermal monitor control circuitry (TCC).",18,[[],["bool",15]]],[11,"pending_break_enable","","<code>PBE</code>: Supports a pin notifying a stopped processor that an …",18,[[],["bool",15]]],[11,"sse_3","","<code>SSE3</code>: Supports SSE3 instructions.",18,[[],["bool",15]]],[11,"carryless_multiply_64bit","","Supports carry-less multiplication of two 64-bit integers …",18,[[],["bool",15]]],[11,"debug_store_64bit","","<code>DTES64</code>: Supports 64-bit addresses for the debug store.",18,[[],["bool",15]]],[11,"monitor","","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.",18,[[],["bool",15]]],[11,"permission_qualified_debug_store","","<code>DS-CPL</code>: Supports saving the permission level with data …",18,[[],["bool",15]]],[11,"virtual_machine_extensions","","<code>VMX</code>: Supports virtual machine extensions.",18,[[],["bool",15]]],[11,"safer_mode_extensions","","<code>SMX</code>: Supports safer-mode extensions",18,[[],["bool",15]]],[11,"enhanced_speedstep","","<code>EIST</code>: Supports enhanced SpeedStep throttling.",18,[[],["bool",15]]],[11,"thermal_monitor_2","","Supports the TM2 thermal monitor interface.",18,[[],["bool",15]]],[11,"supplemental_sse_3","","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.",18,[[],["bool",15]]],[11,"l1_context_id","","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …",18,[[],["bool",15]]],[11,"debug_interface_model_register","","<code>SDBG</code>: Supports an MSR for chip debugging.",18,[[],["bool",15]]],[11,"fused_multiply_add","","<code>FMA</code>: Supports fused multiply-add SSE instructions.",18,[[],["bool",15]]],[11,"compare_exchange_128bit","","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …",18,[[],["bool",15]]],[11,"chipset_task_priority_control","","Supports disabling xTPR task priority messages to the …",18,[[],["bool",15]]],[11,"monitor_debug_capabilities_register","","<code>PDCM</code>: Supports a model-specific register that lists …",18,[[],["bool",15]]],[11,"process_context_ids","","<code>PCID</code>: Supports process-context IDs.",18,[[],["bool",15]]],[11,"memory_mapped_prefetch","","<code>DCA</code>: Supports prefetching memory-mapped data from a …",18,[[],["bool",15]]],[11,"sse_4_1","","<code>SSE4_1</code>: Supports SSE4.1 instructions.",18,[[],["bool",15]]],[11,"sse_4_2","","<code>SSE4_2</code>: Supports SSE4.2 instructions.",18,[[],["bool",15]]],[11,"apic_x2","","<code>x2APIC</code>: Supports the enhanced \\\"x2\\\" interface for the APIC.",18,[[],["bool",15]]],[11,"byte_swap_move","","Supports byte swapping with the <code>MOVBE</code> instruction.",18,[[],["bool",15]]],[11,"count_bits","","Supports counting the set bits in a value with the <code>POPCNT</code> …",18,[[],["bool",15]]],[11,"apic_timestamp_deadline","","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …",18,[[],["bool",15]]],[11,"aes","","<code>AESNI</code>: Supports AES acceleration instructions.",18,[[],["bool",15]]],[11,"extended_state_save","","<code>XSAVE</code>: Supports instructions for saving and restoring …",18,[[],["bool",15]]],[11,"extended_state_save_enabled","","<code>OSXSAVE</code>: Reflects the value of […",18,[[],["bool",15]]],[11,"avx","","<code>AVX</code>: Supports AVX instructions.",18,[[],["bool",15]]],[11,"float_16_conversion","","<code>F16C</code>: Supports conversion instructions for 16-bit floats.",18,[[],["bool",15]]],[11,"random","","Supports random number generation with the <code>RDRAND</code> …",18,[[],["bool",15]]],[11,"set_on_chip_fpu","","<code>FPU</code>: The processor has a built-in x87 floating-point unit",18,[[["bool",15]]]],[11,"set_virtual_8086_extensions","","<code>VME</code>: Supports virtual real-mode extensions (VME) and …",18,[[["bool",15]]]],[11,"set_debugging_extensions","","<code>DE</code>: Supports breaking on I/O and on accessing debug …",18,[[["bool",15]]]],[11,"set_page_size_extension","","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.",18,[[["bool",15]]]],[11,"set_time_stamp_counter","","<code>TSC</code>: Supports reading the processor\'s timestamp with <code>RDTSC</code>…",18,[[["bool",15]]]],[11,"set_model_registers","","<code>MSR</code>: Has model-specific registers which can be accessed …",18,[[["bool",15]]]],[11,"set_physical_address_extension","","<code>PAE</code>: Supports mapping virtual memory to physical …",18,[[["bool",15]]]],[11,"set_machine_check_exception","","<code>MCE</code>: Defines an exception (18) for reporting internal …",18,[[["bool",15]]]],[11,"set_compare_exchange_64bit","","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.",18,[[["bool",15]]]],[11,"set_on_chip_apic","","<code>APIC</code>: The processor has a built-in advanced programmable …",18,[[["bool",15]]]],[11,"set_sysenter","","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.",18,[[["bool",15]]]],[11,"set_memory_type_range_registers","","<code>MTRR</code>: Has memory type range registers.",18,[[["bool",15]]]],[11,"set_global_pages","","<code>PGE</code>: Supports global pages, which are available in all …",18,[[["bool",15]]]],[11,"set_machine_check_architecture","","<code>MCA</code>: Supports extended features for reporting internal …",18,[[["bool",15]]]],[11,"set_conditional_move","","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if …",18,[[["bool",15]]]],[11,"set_page_attribute_table","","<code>PAT</code>: Supports page attribute tables.",18,[[["bool",15]]]],[11,"set_page_size_extension_36bit","","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …",18,[[["bool",15]]]],[11,"set_serial_number","","<code>PSN</code>: Supports retrieving a processor serial number with …",18,[[["bool",15]]]],[11,"set_cache_line_flush","","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …",18,[[["bool",15]]]],[11,"set_debug_store","","<code>DS</code>: Supports writing debug information to memory.",18,[[["bool",15]]]],[11,"set_thermal_power_management","","<code>ACPI</code>: Supports thermal monitoring and power management …",18,[[["bool",15]]]],[11,"set_mmx","","<code>MMX</code>: Supports MMX instructions.",18,[[["bool",15]]]],[11,"set_fpu_save","","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.",18,[[["bool",15]]]],[11,"set_sse","","<code>SSE</code>: Supports SSE instructions.",18,[[["bool",15]]]],[11,"set_sse_2","","<code>SSE2</code>: Supports SSE2 instructions.",18,[[["bool",15]]]],[11,"set_self_snoop","","The processor can snoop on its own cache line. This helps …",18,[[["bool",15]]]],[11,"set_max_apic_id_field","","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …",18,[[["bool",15]]]],[11,"set_thermal_monitor","","<code>TM</code>: Has thermal monitor control circuitry (TCC).",18,[[["bool",15]]]],[11,"set_pending_break_enable","","<code>PBE</code>: Supports a pin notifying a stopped processor that an …",18,[[["bool",15]]]],[11,"set_sse_3","","<code>SSE3</code>: Supports SSE3 instructions.",18,[[["bool",15]]]],[11,"set_carryless_multiply_64bit","","Supports carry-less multiplication of two 64-bit integers …",18,[[["bool",15]]]],[11,"set_debug_store_64bit","","<code>DTES64</code>: Supports 64-bit addresses for the debug store.",18,[[["bool",15]]]],[11,"set_monitor","","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.",18,[[["bool",15]]]],[11,"set_permission_qualified_debug_store","","<code>DS-CPL</code>: Supports saving the permission level with data …",18,[[["bool",15]]]],[11,"set_virtual_machine_extensions","","<code>VMX</code>: Supports virtual machine extensions.",18,[[["bool",15]]]],[11,"set_safer_mode_extensions","","<code>SMX</code>: Supports safer-mode extensions",18,[[["bool",15]]]],[11,"set_enhanced_speedstep","","<code>EIST</code>: Supports enhanced SpeedStep throttling.",18,[[["bool",15]]]],[11,"set_thermal_monitor_2","","Supports the TM2 thermal monitor interface.",18,[[["bool",15]]]],[11,"set_supplemental_sse_3","","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.",18,[[["bool",15]]]],[11,"set_l1_context_id","","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …",18,[[["bool",15]]]],[11,"set_debug_interface_model_register","","<code>SDBG</code>: Supports an MSR for chip debugging.",18,[[["bool",15]]]],[11,"set_fused_multiply_add","","<code>FMA</code>: Supports fused multiply-add SSE instructions.",18,[[["bool",15]]]],[11,"set_compare_exchange_128bit","","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …",18,[[["bool",15]]]],[11,"set_chipset_task_priority_control","","Supports disabling xTPR task priority messages to the …",18,[[["bool",15]]]],[11,"set_monitor_debug_capabilities_register","","<code>PDCM</code>: Supports a model-specific register that lists …",18,[[["bool",15]]]],[11,"set_process_context_ids","","<code>PCID</code>: Supports process-context IDs.",18,[[["bool",15]]]],[11,"set_memory_mapped_prefetch","","<code>DCA</code>: Supports prefetching memory-mapped data from a …",18,[[["bool",15]]]],[11,"set_sse_4_1","","<code>SSE4_1</code>: Supports SSE4.1 instructions.",18,[[["bool",15]]]],[11,"set_sse_4_2","","<code>SSE4_2</code>: Supports SSE4.2 instructions.",18,[[["bool",15]]]],[11,"set_apic_x2","","<code>x2APIC</code>: Supports the enhanced \\\"x2\\\" interface for the APIC.",18,[[["bool",15]]]],[11,"set_byte_swap_move","","Supports byte swapping with the <code>MOVBE</code> instruction.",18,[[["bool",15]]]],[11,"set_count_bits","","Supports counting the set bits in a value with the <code>POPCNT</code> …",18,[[["bool",15]]]],[11,"set_apic_timestamp_deadline","","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …",18,[[["bool",15]]]],[11,"set_aes","","<code>AESNI</code>: Supports AES acceleration instructions.",18,[[["bool",15]]]],[11,"set_extended_state_save","","<code>XSAVE</code>: Supports instructions for saving and restoring …",18,[[["bool",15]]]],[11,"set_extended_state_save_enabled","","<code>OSXSAVE</code>: Reflects the value of […",18,[[["bool",15]]]],[11,"set_avx","","<code>AVX</code>: Supports AVX instructions.",18,[[["bool",15]]]],[11,"set_float_16_conversion","","<code>F16C</code>: Supports conversion instructions for 16-bit floats.",18,[[["bool",15]]]],[11,"set_random","","Supports random number generation with the <code>RDRAND</code> …",18,[[["bool",15]]]],[11,"get","","Retrieve the feature list from the processor using the …",18,[[]]],[3,"ExtendedFeatures","","Features applicable to 64-bit processors, returned in …",null,null],[11,"get","","Retrieve the extended feature list from the processor …",19,[[]]],[3,"AddressSpaceSizes","","Indicates the processor\'s maximum supported physical and …",null,null],[11,"get","","Retrieve the supported address space sizes from the …",20,[[]]],[0,"interrupt","tartan_arch::x86_common","Support for managing interrupts.",null,null],[3,"InterruptVector","tartan_arch::x86_common::interrupt","An interrupt/exception number.",null,null],[18,"DivideError","","<code>#DE</code>: Division by zero or overflow in division.",21,null],[18,"DebugException","","<code>#DB</code>: Breakpoints or other debugging-related traps/faults.",21,null],[18,"NonMaskable","","<code>NMI</code>: Severe external interrupt that cannot be ignored.",21,null],[18,"Breakpoint","","<code>#BP</code>: Breakpoint via <code>INT3</code> instruction.",21,null],[18,"Overflow","","<code>#OF</code>: Overflow condition was detected with <code>INTO</code> …",21,null],[18,"Bound","","<code>#BR</code>: Out-of-bounds index detected with <code>BOUND</code> instruction.",21,null],[18,"InvalidOpcode","","<code>#UD</code>: Unrecognized or reserved instruction opcode.",21,null],[18,"DeviceNotAvailable","","<code>#NM</code>: Tried to execute FPU instruction with no coprocessor …",21,null],[18,"DoubleFault","","<code>#DF</code>: A fault was triggered while handling another …",21,null],[18,"InvalidTaskSegment","","<code>#TS</code>: An error was found in the TSS while task switching.",21,null],[18,"SegmentNotPresent","","<code>#NP</code>: Tried to use a segment without a descriptor defined. …",21,null],[18,"StackFault","","<code>#SS</code>: The stack overflowed its segment or the segment was …",21,null],[18,"ProtectionFault","","<code>#GP</code>: Memory protection or other miscellaneous error.",21,null],[18,"PageFault","","<code>#PF</code>: Tried to load a page that was not present, or used a …",21,null],[18,"FloatingPointError","","<code>#MF</code>: Unmasked floating-point error that was <em>not</em> part of a …",21,null],[18,"AlignmentCheck","","<code>#AC</code>: Improperly aligned memory access in user mode while …",21,null],[18,"MachineCheck","","<code>#MC</code>: Internal processor/bus error.",21,null],[18,"SIMDFloatingPointError","","<code>#XM</code>: Unmasked floating-point error during SIMD operation.",21,null],[18,"VirtualizationException","","<code>#VE</code>: Improper use of virtualization extensions.",21,null],[18,"ControlProtectionException","","<code>#CP</code>: Improper branching detected by control-flow guard.",21,null],[11,"name","","The name of the enum variant in code, if one is defined …",21,[[],[["option",4],["str",15]]]],[11,"reserved","","Indicates that this is interrupt vector is reserved by …",21,[[],["bool",15]]],[3,"InterruptDescriptorTableRegister","","<code>IDTR</code>: Contains the memory range of the interrupt …",null,null],[12,"limit","","The inclusive maximum address offset (i.e., size - 1) of …",22,null],[12,"address","","Base address of the descriptor table.",22,null],[11,"get","","Retrieve the current value of this register",22,[[]]],[11,"set","","Update the register to the given value.",22,[[]]],[3,"APICBaseRegister","","<code>IA32_APIC_BASE</code>: A model-specific register that allows …",null,null],[11,"enabled","","Can be cleared to disable the APIC. However, it cannot be …",23,[[],["bool",15]]],[11,"x2_interface","","Enable the APIC\'s",23,[[],["bool",15]]],[11,"bootstrap_processor","","Indicates that this core was designated as the bootstrap …",23,[[],["bool",15]]],[11,"set_enabled","","Can be cleared to disable the APIC. However, it cannot be …",23,[[["bool",15]]]],[11,"set_x2_interface","","Enable the APIC\'s",23,[[["bool",15]]]],[11,"set_bootstrap_processor","","Indicates that this core was designated as the bootstrap …",23,[[["bool",15]]]],[18,"DEFAULT_ADDRESS","","The default APIC base address when the processor is reset.",23,null],[11,"address","","Base address of the APIC\'s registers.",23,[[],["usize",15]]],[11,"set_address","","Update the base address of the APIC\'s registers.",23,[[["usize",15]]]],[11,"get","","Retrieve the current value of this register",23,[[]]],[11,"set","","Update the register to the given value.",23,[[]]],[0,"io","tartan_arch::x86_common","Access to I/O space",null,null],[5,"in_u8","tartan_arch::x86_common::io","Read an 8-bit value from the port at the given address in …",null,[[["u16",15]],["u8",15]]],[5,"in_u16","","Read a 16-bit value from the port at the given address in …",null,[[["u16",15]],["u16",15]]],[5,"in_u32","","Read a 32-bit value from the port at the given address in …",null,[[["u16",15]],["u32",15]]],[5,"out_u8","","Write an 8-bit value to the port at the given address in …",null,[[["u16",15],["u8",15]]]],[5,"out_u16","","Write a 16-bit value to the port at the given address in …",null,[[["u16",15]]]],[5,"out_u32","","Write a 16-bit value to the port at the given address in …",null,[[["u32",15],["u16",15]]]],[0,"paging","tartan_arch::x86_common","Support for virtual memory paging.",null,null],[3,"ControlRegister2","tartan_arch::x86_common::paging","<code>CR2</code>: Contains the address that triggered a page fault.",null,null],[11,"get","","Retrieve the current value of this register",24,[[]]],[11,"set","","Update the register to the given value.",24,[[]]],[3,"ControlRegister3","","<code>CR3</code>: System control register that contains the top-level …",null,null],[11,"write_through","","<code>CR3.PWT</code>: Enables write-through caching for the top-level …",25,[[],["bool",15]]],[11,"cache_disabled","","<code>CR3.PCD</code>: Disables caching for the top-level page table.",25,[[],["bool",15]]],[11,"process_context_id","","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …",25,[[],["u16",15]]],[11,"set_write_through","","<code>CR3.PWT</code>: Enables write-through caching for the top-level …",25,[[["bool",15]]]],[11,"set_cache_disabled","","<code>CR3.PCD</code>: Disables caching for the top-level page table.",25,[[["bool",15]]]],[11,"set_process_context_id","","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …",25,[[["u16",15]]]],[11,"get","","Retrieve the current value of this register",25,[[]]],[11,"set","","Update the register to the given value.",25,[[]]],[11,"address","","Get the address of the top-level page table.",25,[[],["usize",15]]],[11,"set_address","","Set the address of the top-level page table.",25,[[["usize",15]]]],[8,"GenericPageTableEntry","","An entry in a page table at any level.",null,null],[11,"present","","<code>P</code>: Indicates that this entry is mapped. Otherwise the …",26,[[],["bool",15]]],[11,"writable","","<code>R/W</code>: Allows writes to this memory region.",26,[[],["bool",15]]],[11,"user","","<code>U/S</code>: Allows access to this memory region from permission …",26,[[],["bool",15]]],[11,"write_through","","<code>PWT</code>: Enables write-through caching for this memory region.",26,[[],["bool",15]]],[11,"cache_disabled","","<code>PCD</code>: Disables caching for this memory region.",26,[[],["bool",15]]],[11,"accessed","","<code>A</code>: Set by the processor when an instruction accesses the …",26,[[],["bool",15]]],[11,"no_execute","","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …",26,[[],["bool",15]]],[11,"set_present","","<code>P</code>: Indicates that this entry is mapped. Otherwise the …",26,[[["bool",15]]]],[11,"set_writable","","<code>R/W</code>: Allows writes to this memory region.",26,[[["bool",15]]]],[11,"set_user","","<code>U/S</code>: Allows access to this memory region from permission …",26,[[["bool",15]]]],[11,"set_write_through","","<code>PWT</code>: Enables write-through caching for this memory region.",26,[[["bool",15]]]],[11,"set_cache_disabled","","<code>PCD</code>: Disables caching for this memory region.",26,[[["bool",15]]]],[11,"set_accessed","","<code>A</code>: Set by the processor when an instruction accesses the …",26,[[["bool",15]]]],[11,"set_no_execute","","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …",26,[[["bool",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",26,[[["debugstruct",3]]]],[8,"DirectPageTableEntry","","An page table entry (any level) that directly maps a page.",null,null],[11,"dirty","","<code>D</code>: Set by the processor when an instruction modifies the …",27,[[],["bool",15]]],[11,"attribute_table","","<code>PAT</code>: Used to associate this page with a page attribute …",27,[[],["bool",15]]],[11,"global","","<code>G</code>: Indicates that this is a global page shared by all …",27,[[],["bool",15]]],[11,"protection_key","","The protection key that applies to this memory region.",27,[[],["u8",15]]],[11,"set_dirty","","<code>D</code>: Set by the processor when an instruction modifies the …",27,[[["bool",15]]]],[11,"set_attribute_table","","<code>PAT</code>: Used to associate this page with a page attribute …",27,[[["bool",15]]]],[11,"set_global","","<code>G</code>: Indicates that this is a global page shared by all …",27,[[["bool",15]]]],[11,"set_protection_key","","The protection key that applies to this memory region.",27,[[["u8",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",27,[[["debugstruct",3]]]],[8,"HybridPageTableEntry","","A page table entry (any level) that either directly maps …",null,null],[11,"is_page","","<code>PS</code>: Indicates that this entry directly maps a page. …",28,[[],["bool",15]]],[11,"set_is_page","","<code>PS</code>: Indicates that this entry directly maps a page. …",28,[[["bool",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",28,[[["debugstruct",3]]]],[3,"Level2PageTableEntry","","Second-level page table (page directory) entry that …",null,null],[3,"Level1PageTableEntry","","Bottom-level page table entry that maps a single 4KB page.",null,null],[0,"protection","tartan_arch::x86_common","Support for protected mode operation.",null,null],[3,"GlobalDescriptorTableRegister","tartan_arch::x86_common::protection","<code>GDTR</code>: Points to the memory range of the global descriptor …",null,null],[12,"limit","","The inclusive maximum address offset (i.e., size - 1) of …",29,null],[12,"address","","Base address of the descriptor table",29,null],[11,"get","","Retrieve the current value of this register",29,[[]]],[11,"set","","Update the register to the given value.",29,[[]]],[11,"set_with_segments","","Update the global descriptor table pointer and all …",29,[[["selector",3]]]],[4,"LocalDescriptorTableRegister","","<code>LDTR</code>: Contains a [<code>Selector</code>] referencing a […",null,null],[11,"get","","Retrieve the current value of this register",30,[[],["selector",3]]],[11,"set","","Update the register with the value in this struct.",30,[[["selector",3]]]],[11,"current_descriptor","","Get a pointer to the [<code>SegmentDescriptor</code>] for the …",30,[[]]],[4,"TaskRegister","","<code>TR</code>: Contains a [<code>Selector</code>] referencing a [<code>SegmentDescriptor</code>…",null,null],[11,"get","","Retrieve the current value of this register",31,[[],["selector",3]]],[11,"set","","Update the register with the provided selector value.",31,[[["selector",3]]]],[4,"SegmentRegister","","Standard segment registers (<code>CS</code>, <code>DS</code>, <code>SS</code>, etc.), which …",null,null],[13,"Code","","<code>CS</code> register, which controls instruction loading",32,null],[13,"Data","","<code>DS</code> register, which controls the default segment for …",32,null],[13,"Stack","","<code>SS</code> segment register, which controls the location of the …",32,null],[13,"Extra","","<code>ES</code> segment register, which can be used as an additional …",32,null],[13,"ExtraF","","<code>FS</code> segment register, which can be used as an additional …",32,null],[13,"ExtraG","","<code>GS</code> segment register, which can be used as an additional …",32,null],[11,"get","","Retrieve the current value of this register",32,[[],["selector",3]]],[11,"set","","Update the register with the provided selector value.",32,[[["selector",3]]]],[3,"Selector","","A reference to an entry in a segment descriptor table.",null,null],[11,"privilege_level","","<code>RPL</code>: The privilege level \\\"requested\\\" when accessing the …",33,[[],["u8",15]]],[11,"local","","Indicates that this selector references a descriptor in …",33,[[],["bool",15]]],[11,"set_privilege_level","","<code>RPL</code>: The privilege level \\\"requested\\\" when accessing the …",33,[[["u8",15]]]],[11,"set_local","","Indicates that this selector references a descriptor in …",33,[[["bool",15]]]],[11,"new","","Create a new selector with the given field values",33,[[["bool",15],["u16",15],["u8",15]]]],[11,"null","","Create a null selector",33,[[]]],[11,"offset","","The offset of the referenced segment entry in the …",33,[[],["u16",15]]],[11,"set_offset","","Update the offset of the referenced entry in the …",33,[[["u16",15]]]],[11,"descriptor_address","","Calculate the address of the descriptor referenced by …",33,[[],["usize",15]]],[8,"DescriptorFlags","","Settings common to [<code>SegmentDescriptor</code>]s and […",null,null],[11,"system_type","","If this is a system descriptor, indicates which type.",34,[[],["systemdescriptortype",3]]],[11,"application_accessed","","The processor sets this bit whenever a segment register …",34,[[],["bool",15]]],[11,"code_readable","","If this is a code descriptor, indicates that the segment …",34,[[],["bool",15]]],[11,"data_writable","","If this is a data descriptor, indicates that this segment …",34,[[],["bool",15]]],[11,"code_conforming","","If this is a code descriptor, indicates that this segment …",34,[[],["bool",15]]],[11,"data_expand_down","","If this is a data descriptor, indicates that the segment …",34,[[],["bool",15]]],[11,"is_code","","Indicates whether this is a code (true) or data (false) …",34,[[],["bool",15]]],[11,"is_application","","<code>S</code>: Indicates that this is an application section …",34,[[],["bool",15]]],[11,"privilege_level","","<code>DPL</code>: The privilege level associated with the segment.",34,[[],["u8",15]]],[11,"present","","<code>P</code>: Indicates that the segment is defined.",34,[[],["bool",15]]],[11,"code_mode_64","","<code>L</code>: If this is a code segment, indicates that it should be …",34,[[],["bool",15]]],[11,"application_mode_32","","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …",34,[[],["bool",15]]],[11,"set_system_type","","If this is a system descriptor, indicates which type.",34,[[["systemdescriptortype",3]]]],[11,"set_application_accessed","","The processor sets this bit whenever a segment register …",34,[[["bool",15]]]],[11,"set_code_readable","","If this is a code descriptor, indicates that the segment …",34,[[["bool",15]]]],[11,"set_data_writable","","If this is a data descriptor, indicates that this segment …",34,[[["bool",15]]]],[11,"set_code_conforming","","If this is a code descriptor, indicates that this segment …",34,[[["bool",15]]]],[11,"set_data_expand_down","","If this is a data descriptor, indicates that the segment …",34,[[["bool",15]]]],[11,"set_is_code","","Indicates whether this is a code (true) or data (false) …",34,[[["bool",15]]]],[11,"set_is_application","","<code>S</code>: Indicates that this is an application section …",34,[[["bool",15]]]],[11,"set_privilege_level","","<code>DPL</code>: The privilege level associated with the segment.",34,[[["u8",15]]]],[11,"set_present","","<code>P</code>: Indicates that the segment is defined.",34,[[["bool",15]]]],[11,"set_code_mode_64","","<code>L</code>: If this is a code segment, indicates that it should be …",34,[[["bool",15]]]],[11,"set_application_mode_32","","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …",34,[[["bool",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",34,[[["debugstruct",3]]]],[11,"is_gate","","Indicates that this is a [<code>GateDescriptor</code>].",34,[[],["bool",15]]],[3,"SystemDescriptorType","","Discriminate types of segment descriptors that are not …",null,null],[18,"TaskStateAvailable16Bit","","A [<code>SegmentDescriptor</code>] for a 16-bit task state segment …",35,null],[18,"LocalDescriptorTable","","A [<code>SegmentDescriptor</code>] for a segment that contains a local …",35,null],[18,"TaskStateBusy16Bit","","A [<code>SegmentDescriptor</code>] for a 16-bit task state segment …",35,null],[18,"CallGate16Bit","","A [<code>GateDescriptor</code>] for a call to 16-bit code.",35,null],[18,"TaskGate","","A [<code>GateDescriptor</code>] for task switching.",35,null],[18,"InterruptGate16Bit","","A [<code>GateDescriptor</code>] for a 16-bit interrupt handler.",35,null],[18,"TrapGate16Bit","","A [<code>GateDescriptor</code>] for a 16-bit trap handler.",35,null],[18,"TaskStateAvailable","","A [<code>SegmentDescriptor</code>] for a 32/64-bit task state segment …",35,null],[18,"TaskStateBusy","","A [<code>SegmentDescriptor</code>] for a 32/64-bit task state segment …",35,null],[18,"CallGate","","A [<code>GateDescriptor</code>] for a call to 32/64-bit code.",35,null],[18,"InterruptGate","","A [<code>GateDescriptor</code>] for a 32/64-bit interrupt handler.",35,null],[18,"TrapGate","","A [<code>GateDescriptor</code>] for a 32/64-bit interrupt handler.",35,null],[11,"name","","The name of the enum variant in code, if one is defined …",35,[[],[["option",4],["str",15]]]],[11,"is_gate","","Indicates that this is a [<code>GateDescriptor</code>].",35,[[],["bool",15]]],[3,"GenericDescriptor","","Generic entry in a global/local/interrupt descriptor …",null,null],[12,"flags","","Common descriptor settings.",36,null],[3,"GenericDescriptorFlags","","Settings for [<code>GenericDescriptor</code>]s.",null,null],[3,"SegmentDescriptor","","An entry in a segment descriptor table that defines a new …",null,null],[12,"flags","","Common segment descriptor settings.",37,null],[18,"LIMIT_MAX","","The maximum supported value of the <code>limit</code> field (20 bits).",37,null],[11,"new","","Create a zero-initialized descriptor",37,[[]]],[11,"address","","Base virtual address of the segment, to which offsets are …",37,[[],["usize",15]]],[11,"set_address","","Update the base address.",37,[[["usize",15]]]],[11,"limit","","The \\\"limit\\\" of the segment, which is a maximum or minimum …",37,[[],["u32",15]]],[11,"set_limit","","Update the segment limit.",37,[[["u32",15]]]],[3,"SegmentDescriptorFlags","","Settings for [<code>SegmentDescriptor</code>]s.",null,null],[11,"os_defined","","<code>AVL</code>: Ignored bit that can be used by the operating system.",38,[[],["bool",15]]],[11,"granularity","","<code>G</code>: Indicates that the segment limit is in units of 4KB. …",38,[[],["bool",15]]],[11,"set_os_defined","","<code>AVL</code>: Ignored bit that can be used by the operating system.",38,[[["bool",15]]]],[11,"set_granularity","","<code>G</code>: Indicates that the segment limit is in units of 4KB. …",38,[[["bool",15]]]],[3,"GateDescriptor","","An entry in a segment descriptor table that points to an …",null,null],[12,"flags","","Common gate descriptor settings.",39,null],[11,"new","","Create a zero-initialized descriptor",39,[[]]],[11,"selector","","Selector that points to the code or task state segment to …",39,[[],["selector",3]]],[11,"set_selector","","Update the selector pointing to the segment to be …",39,[[["selector",3]]]],[11,"entry_point_offset","","Offset of the entry point in code segment referenced by …",39,[[],["usize",15]]],[11,"set_entry_point_offset","","Update the offset of the entry point within the …",39,[[["usize",15]]]],[3,"GateDescriptorFlags","","Settings for [<code>GateDescriptor</code>]s.",null,null],[11,"call_param_count","","Number of stack parameters to copy if the code segment …",40,[[],["u8",15]]],[11,"interrupt_stack_index","","One-based index of the <code>interrupt_stack</code> pointer to use …",40,[[],["u8",15]]],[11,"set_call_param_count","","Number of stack parameters to copy if the code segment …",40,[[["u8",15]]]],[11,"set_interrupt_stack_index","","One-based index of the <code>interrupt_stack</code> pointer to use …",40,[[["u8",15]]]],[3,"IOPermissionBitmap","","Bitmap that controls which I/O port addresses are covered …",null,null],[18,"MAX_SIZE","","Size in bytes required to map all I/O ports",41,null],[11,"required_size","","Calculate the size in bytes of a map that has bits for …",41,[[["u16",15]],["usize",15]]],[11,"max_port_for_size","","Calculate the last I/O port that is covered by a map of …",41,[[["usize",15]],[["option",4],["nonzerou16",3]]]],[11,"size","","The number of bytes in this structure.",41,[[],["usize",15]]],[11,"max_port","","The last I/O port that is covered by this map. The bits …",41,[[],[["option",4],["nonzerou16",3]]]],[11,"is_port_checked","","Get the value in this bitmap that indicates whether the …",41,[[["u16",15]],["bool",15]]],[11,"set_port_checked","","Set the value in this bitmap that indicates whether the …",41,[[["bool",15],["u16",15]]]],[3,"FlagRegister","tartan_arch::x86_common","<code>EFLAGS</code>/<code>RFLAGS</code>: General flags, including control, status, …",null,null],[11,"carry","","<code>CF</code>: Indicates an arithmetic instruction generated a …",42,[[],["bool",15]]],[11,"parity","","<code>PF</code>: Indicates that the least-significant byte of the …",42,[[],["bool",15]]],[11,"aux_carry","","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …",42,[[],["bool",15]]],[11,"zero","","<code>ZF</code>: Indicates that the result of an instruction is zero.",42,[[],["bool",15]]],[11,"sign","","<code>SF</code>: Indicates that the most-significant bit of a result …",42,[[],["bool",15]]],[11,"trap","","<code>TF</code>: Enable single-step debugging.",42,[[],["bool",15]]],[11,"interrupt_enabled","","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …",42,[[],["bool",15]]],[11,"direction","","<code>DF</code>: String instructions work on addresses high-to-low …",42,[[],["bool",15]]],[11,"signed_overflow","","<code>OF</code>: Indicates that the result overflowed for signed …",42,[[],["bool",15]]],[11,"io_privilege_level","","<code>IOPL</code>: Sets the privilege threshold for a task to access …",42,[[],["u8",15]]],[11,"nested_task","","<code>NT</code>: Indicates that the processor should switch back to a …",42,[[],["bool",15]]],[11,"resume","","<code>RF</code>: Disable instruction breakpoints.",42,[[],["bool",15]]],[11,"virtual_8086_mode","","<code>VM</code>: Enable virtual real mode.",42,[[],["bool",15]]],[11,"alignment_check_or_access_control","","<code>AC</code>: Enable strict alignment checks for memory accesses in …",42,[[],["bool",15]]],[11,"virtual_interrupt_enabled","","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …",42,[[],["bool",15]]],[11,"virtual_interrupt_pending","","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.",42,[[],["bool",15]]],[11,"identification","","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.",42,[[],["bool",15]]],[11,"set_carry","","<code>CF</code>: Indicates an arithmetic instruction generated a …",42,[[["bool",15]]]],[11,"set_parity","","<code>PF</code>: Indicates that the least-significant byte of the …",42,[[["bool",15]]]],[11,"set_aux_carry","","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …",42,[[["bool",15]]]],[11,"set_zero","","<code>ZF</code>: Indicates that the result of an instruction is zero.",42,[[["bool",15]]]],[11,"set_sign","","<code>SF</code>: Indicates that the most-significant bit of a result …",42,[[["bool",15]]]],[11,"set_trap","","<code>TF</code>: Enable single-step debugging.",42,[[["bool",15]]]],[11,"set_interrupt_enabled","","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …",42,[[["bool",15]]]],[11,"set_direction","","<code>DF</code>: String instructions work on addresses high-to-low …",42,[[["bool",15]]]],[11,"set_signed_overflow","","<code>OF</code>: Indicates that the result overflowed for signed …",42,[[["bool",15]]]],[11,"set_io_privilege_level","","<code>IOPL</code>: Sets the privilege threshold for a task to access …",42,[[["u8",15]]]],[11,"set_nested_task","","<code>NT</code>: Indicates that the processor should switch back to a …",42,[[["bool",15]]]],[11,"set_resume","","<code>RF</code>: Disable instruction breakpoints.",42,[[["bool",15]]]],[11,"set_virtual_8086_mode","","<code>VM</code>: Enable virtual real mode.",42,[[["bool",15]]]],[11,"set_alignment_check_or_access_control","","<code>AC</code>: Enable strict alignment checks for memory accesses in …",42,[[["bool",15]]]],[11,"set_virtual_interrupt_enabled","","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …",42,[[["bool",15]]]],[11,"set_virtual_interrupt_pending","","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.",42,[[["bool",15]]]],[11,"set_identification","","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.",42,[[["bool",15]]]],[11,"get","","Retrieve the current value of the <code>EFLAGS</code> register.",42,[[]]],[11,"set","","Update the <code>EFLAGS</code> register with the given value, as …",42,[[]]],[3,"ControlRegister0","","<code>CR0</code>: System control register with flags affecting …",null,null],[11,"paging","","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.",43,[[],["bool",15]]],[11,"cache_disabled","","<code>CR0.CD</code>: Disable all memory caching.",43,[[],["bool",15]]],[11,"cache_not_write_through","","<code>CR0.NW</code>: Disable write-back/write-through caching.",43,[[],["bool",15]]],[11,"alignment_check_mask","","<code>CR0.AM</code>: Enables strict alignment checks for memory …",43,[[],["bool",15]]],[11,"write_protect","","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …",43,[[],["bool",15]]],[11,"native_fpu_error","","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …",43,[[],["bool",15]]],[11,"fpu_extension_type","","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …",43,[[],["bool",15]]],[11,"task_switched_without_fpu_state","","<code>CR0.TS</code>: Set by processor when task was switched but FPU …",43,[[],["bool",15]]],[11,"fpu_emulation","","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. …",43,[[],["bool",15]]],[11,"monitor_fpu","","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code>…",43,[[],["bool",15]]],[11,"protected_mode","","Enable protected mode. Does not enable paging on its own. …",43,[[],["bool",15]]],[11,"set_paging","","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.",43,[[["bool",15]]]],[11,"set_cache_disabled","","<code>CR0.CD</code>: Disable all memory caching.",43,[[["bool",15]]]],[11,"set_cache_not_write_through","","<code>CR0.NW</code>: Disable write-back/write-through caching.",43,[[["bool",15]]]],[11,"set_alignment_check_mask","","<code>CR0.AM</code>: Enables strict alignment checks for memory …",43,[[["bool",15]]]],[11,"set_write_protect","","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …",43,[[["bool",15]]]],[11,"set_native_fpu_error","","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …",43,[[["bool",15]]]],[11,"set_fpu_extension_type","","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …",43,[[["bool",15]]]],[11,"set_task_switched_without_fpu_state","","<code>CR0.TS</code>: Set by processor when task was switched but FPU …",43,[[["bool",15]]]],[11,"set_fpu_emulation","","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. …",43,[[["bool",15]]]],[11,"set_monitor_fpu","","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code>…",43,[[["bool",15]]]],[11,"set_protected_mode","","Enable protected mode. Does not enable paging on its own. …",43,[[["bool",15]]]],[11,"get","","Retrieve the current value of this register",43,[[]]],[11,"set","","Update the register to the given value.",43,[[]]],[11,"clear_task_switched_without_fpu_state","","Directly clear the <code>task_switched_without_fpu_state</code> flag in…",43,[[]]],[3,"ControlRegister4","","<code>CR4</code>: Miscellaneous system control flags.",null,null],[11,"virtual_8086_extensions","","<code>CR4.VME</code>: Enable interrupts and exception handling in …",44,[[],["bool",15]]],[11,"protected_virtual_interrupts","","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.",44,[[],["bool",15]]],[11,"timestamp_disabled","","<code>CR4.TSD</code>: Disable access to processor timestamp counter …",44,[[],["bool",15]]],[11,"debugging_extensions","","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …",44,[[],["bool",15]]],[11,"page_size_extensions","","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit …",44,[[],["bool",15]]],[11,"physical_address_extension","","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …",44,[[],["bool",15]]],[11,"machine_check_exception","","<code>CR4.MCE</code>: Enable machine-check exception.",44,[[],["bool",15]]],[11,"global_pages","","<code>CR4.PGE</code>: Enable global pages, which are shared across …",44,[[],["bool",15]]],[11,"performance_counter","","<code>CR4.PCE</code>: Allow access to performance monitoring counter …",44,[[],["bool",15]]],[11,"sse_and_fpu_save","","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …",44,[[],["bool",15]]],[11,"simd_exceptions","","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …",44,[[],["bool",15]]],[11,"restrict_user_mode_instructions","","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …",44,[[],["bool",15]]],[11,"five_level_paging","","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging …",44,[[],["bool",15]]],[11,"virtual_machine_extensions","","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.",44,[[],["bool",15]]],[11,"safer_mode_extensions","","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.",44,[[],["bool",15]]],[11,"extended_base_registers","","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> …",44,[[],["bool",15]]],[11,"process_context_ids","","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …",44,[[],["bool",15]]],[11,"extended_state_save","","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …",44,[[],["bool",15]]],[11,"supervisor_execution_prevention","","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …",44,[[],["bool",15]]],[11,"supervisor_access_prevention","","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …",44,[[],["bool",15]]],[11,"user_protection_keys","","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …",44,[[],["bool",15]]],[11,"control_flow_enforcement","","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …",44,[[],["bool",15]]],[11,"supervisor_protection_keys","","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …",44,[[],["bool",15]]],[11,"set_virtual_8086_extensions","","<code>CR4.VME</code>: Enable interrupts and exception handling in …",44,[[["bool",15]]]],[11,"set_protected_virtual_interrupts","","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.",44,[[["bool",15]]]],[11,"set_timestamp_disabled","","<code>CR4.TSD</code>: Disable access to processor timestamp counter …",44,[[["bool",15]]]],[11,"set_debugging_extensions","","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …",44,[[["bool",15]]]],[11,"set_page_size_extensions","","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit …",44,[[["bool",15]]]],[11,"set_physical_address_extension","","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …",44,[[["bool",15]]]],[11,"set_machine_check_exception","","<code>CR4.MCE</code>: Enable machine-check exception.",44,[[["bool",15]]]],[11,"set_global_pages","","<code>CR4.PGE</code>: Enable global pages, which are shared across …",44,[[["bool",15]]]],[11,"set_performance_counter","","<code>CR4.PCE</code>: Allow access to performance monitoring counter …",44,[[["bool",15]]]],[11,"set_sse_and_fpu_save","","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …",44,[[["bool",15]]]],[11,"set_simd_exceptions","","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …",44,[[["bool",15]]]],[11,"set_restrict_user_mode_instructions","","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …",44,[[["bool",15]]]],[11,"set_five_level_paging","","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging …",44,[[["bool",15]]]],[11,"set_virtual_machine_extensions","","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.",44,[[["bool",15]]]],[11,"set_safer_mode_extensions","","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.",44,[[["bool",15]]]],[11,"set_extended_base_registers","","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> …",44,[[["bool",15]]]],[11,"set_process_context_ids","","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …",44,[[["bool",15]]]],[11,"set_extended_state_save","","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …",44,[[["bool",15]]]],[11,"set_supervisor_execution_prevention","","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …",44,[[["bool",15]]]],[11,"set_supervisor_access_prevention","","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …",44,[[["bool",15]]]],[11,"set_user_protection_keys","","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …",44,[[["bool",15]]]],[11,"set_control_flow_enforcement","","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …",44,[[["bool",15]]]],[11,"set_supervisor_protection_keys","","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …",44,[[["bool",15]]]],[11,"get","","Retrieve the current value of this register",44,[[]]],[11,"set","","Update the register to the given value.",44,[[]]],[3,"ExtendedControlRegister0","","<code>XCR0</code>: System control flags that indicate OS support for …",null,null],[11,"fpu","","<code>XCR0.X87</code>: Hardcoded to 1.",45,[[],["bool",15]]],[11,"sse","","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …",45,[[],["bool",15]]],[11,"avx_256","","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …",45,[[],["bool",15]]],[11,"mpx_bounds","","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.",45,[[],["bool",15]]],[11,"mpx_bound_config_status","","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …",45,[[],["bool",15]]],[11,"avx_512_opmask","","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.",45,[[],["bool",15]]],[11,"avx_512","","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …",45,[[],["bool",15]]],[11,"avx_512_extended","","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …",45,[[],["bool",15]]],[11,"protection_key_rights","","<code>XCR0.PKRU</code>: Manage protection key rights registers with …",45,[[],["bool",15]]],[11,"set_fpu","","<code>XCR0.X87</code>: Hardcoded to 1.",45,[[["bool",15]]]],[11,"set_sse","","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …",45,[[["bool",15]]]],[11,"set_avx_256","","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …",45,[[["bool",15]]]],[11,"set_mpx_bounds","","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.",45,[[["bool",15]]]],[11,"set_mpx_bound_config_status","","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …",45,[[["bool",15]]]],[11,"set_avx_512_opmask","","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.",45,[[["bool",15]]]],[11,"set_avx_512","","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …",45,[[["bool",15]]]],[11,"set_avx_512_extended","","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …",45,[[["bool",15]]]],[11,"set_protection_key_rights","","<code>XCR0.PKRU</code>: Manage protection key rights registers with …",45,[[["bool",15]]]],[11,"get","","Retrieve the current value of this register",45,[[]]],[11,"set","","Update the register to the given value.",45,[[]]],[5,"jump","tartan_arch","Unconditionally transfer control to the instruction at …",null,[[["usize",15]]]],[14,"aarch64_exception_vector_table","","Define an exception vector table that forwards all …",null,null],[11,"from","tartan_arch::aarch64::float","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","tartan_arch::aarch64::interrupt","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","tartan_arch::aarch64","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","tartan_arch::x86_64::protection","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","tartan_arch::x86_64","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","tartan_arch::x86::protection","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","tartan_arch::x86_common::features","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","tartan_arch::x86_common::interrupt","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","tartan_arch::x86_common::paging","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"attribute_table","","",49,[[],["bool",15]]],[11,"set_attribute_table","","",49,[[["bool",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",49,[[["debugstruct",3]]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","tartan_arch::x86_common::protection","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","tartan_arch::x86_common","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","tartan_arch::aarch64::float","",0,[[["u64",15]]]],[11,"from","","",1,[[["u64",15]]]],[11,"from","","",2,[[["u8",15]]]],[11,"from","","",46,[[["u8",15]]]],[11,"from","tartan_arch::aarch64::interrupt","",6,[[["u64",15]]]],[11,"from","","",7,[[["u64",15]]]],[11,"from","","",8,[[["u8",15]]]],[11,"from","tartan_arch::aarch64","",9,[[["u8",15]]]],[11,"from","tartan_arch::x86_64","",12,[[["usize",15]]]],[11,"from","","",13,[[["u64",15]]]],[11,"from","tartan_arch::x86_common::features","",18,[[["u64",15]]]],[11,"from","","",19,[[["u64",15]]]],[11,"from","","",20,[[["u32",15]]]],[11,"from","tartan_arch::x86_common::interrupt","",21,[[["u8",15]]]],[11,"from","","",23,[[["u64",15]]]],[11,"from","tartan_arch::x86_common::paging","",24,[[["usize",15]]]],[11,"from","","",25,[[["usize",15]]]],[11,"from","","",49,[[["usize",15]]]],[11,"from","","",50,[[["usize",15]]]],[11,"from","tartan_arch::x86_common::protection","",33,[[["u16",15]]]],[11,"from","","",35,[[["u8",15]]]],[11,"from","","",51,[[["u32",15]]]],[11,"from","","",38,[[["u32",15]]]],[11,"from","","",40,[[["u32",15]]]],[11,"from","tartan_arch::x86_common","",42,[[["usize",15]]]],[11,"from","","",43,[[["usize",15]]]],[11,"from","","",44,[[["usize",15]]]],[11,"from","","",45,[[["u64",15]]]],[11,"fmt","tartan_arch::aarch64::float","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::aarch64::interrupt","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_64::protection","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_64","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86::protection","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_common::features","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_common::interrupt","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_common::paging","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_common::protection","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_arch::x86_common","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"eq","tartan_arch::aarch64::float","",0,[[["controlregister",3]],["bool",15]]],[11,"ne","","",0,[[["controlregister",3]],["bool",15]]],[11,"eq","","",1,[[["statusregister",3]],["bool",15]]],[11,"ne","","",1,[[["statusregister",3]],["bool",15]]],[11,"eq","","",2,[[["roundingmode",3]],["bool",15]]],[11,"ne","","",2,[[["roundingmode",3]],["bool",15]]],[11,"eq","","",46,[[["exceptions",3]],["bool",15]]],[11,"ne","","",46,[[["exceptions",3]],["bool",15]]],[11,"eq","tartan_arch::aarch64::interrupt","",3,[[["kind",4]],["bool",15]]],[11,"eq","","",4,[[["source",4]],["bool",15]]],[11,"eq","","",6,[[["maskregister",3]],["bool",15]]],[11,"ne","","",6,[[["maskregister",3]],["bool",15]]],[11,"eq","","",7,[[["syndromeregister",3]],["bool",15]]],[11,"ne","","",7,[[["syndromeregister",3]],["bool",15]]],[11,"eq","","",8,[[["class",3]],["bool",15]]],[11,"ne","","",8,[[["class",3]],["bool",15]]],[11,"eq","tartan_arch::x86_64::protection","",11,[[["taskstatesegmentheader",3]],["bool",15]]],[11,"ne","","",11,[[["taskstatesegmentheader",3]],["bool",15]]],[11,"eq","tartan_arch::x86_64","",12,[[["controlregister8",3]],["bool",15]]],[11,"ne","","",12,[[["controlregister8",3]],["bool",15]]],[11,"eq","","",13,[[["extendedfeatureenableregister",3]],["bool",15]]],[11,"ne","","",13,[[["extendedfeatureenableregister",3]],["bool",15]]],[11,"eq","tartan_arch::x86::protection","",14,[[["basictaskstatesegment",3]],["bool",15]]],[11,"ne","","",14,[[["basictaskstatesegment",3]],["bool",15]]],[11,"eq","","",15,[[["taskstatesegmentheader",3]],["bool",15]]],[11,"ne","","",15,[[["taskstatesegmentheader",3]],["bool",15]]],[11,"eq","","",16,[[["privilegedstack",3]],["bool",15]]],[11,"ne","","",16,[[["privilegedstack",3]],["bool",15]]],[11,"eq","","",17,[[["taskstatesegmentbitmaps",3]],["bool",15]]],[11,"ne","","",17,[[["taskstatesegmentbitmaps",3]],["bool",15]]],[11,"eq","tartan_arch::x86_common::features","",18,[[["basicfeatures",3]],["bool",15]]],[11,"ne","","",18,[[["basicfeatures",3]],["bool",15]]],[11,"eq","","",19,[[["extendedfeatures",3]],["bool",15]]],[11,"ne","","",19,[[["extendedfeatures",3]],["bool",15]]],[11,"eq","","",20,[[["addressspacesizes",3]],["bool",15]]],[11,"ne","","",20,[[["addressspacesizes",3]],["bool",15]]],[11,"eq","tartan_arch::x86_common::interrupt","",21,[[["interruptvector",3]],["bool",15]]],[11,"ne","","",21,[[["interruptvector",3]],["bool",15]]],[11,"eq","","",22,[[["interruptdescriptortableregister",3]],["bool",15]]],[11,"ne","","",22,[[["interruptdescriptortableregister",3]],["bool",15]]],[11,"eq","","",23,[[["apicbaseregister",3]],["bool",15]]],[11,"ne","","",23,[[["apicbaseregister",3]],["bool",15]]],[11,"eq","tartan_arch::x86_common::paging","",24,[[["controlregister2",3]],["bool",15]]],[11,"ne","","",24,[[["controlregister2",3]],["bool",15]]],[11,"eq","","",25,[[["controlregister3",3]],["bool",15]]],[11,"ne","","",25,[[["controlregister3",3]],["bool",15]]],[11,"eq","","",49,[[["level2pagetableentry",3]],["bool",15]]],[11,"ne","","",49,[[["level2pagetableentry",3]],["bool",15]]],[11,"eq","","",50,[[["level1pagetableentry",3]],["bool",15]]],[11,"ne","","",50,[[["level1pagetableentry",3]],["bool",15]]],[11,"eq","tartan_arch::x86_common::protection","",29,[[["globaldescriptortableregister",3]],["bool",15]]],[11,"ne","","",29,[[["globaldescriptortableregister",3]],["bool",15]]],[11,"eq","","",33,[[["selector",3]],["bool",15]]],[11,"ne","","",33,[[["selector",3]],["bool",15]]],[11,"eq","","",35,[[["systemdescriptortype",3]],["bool",15]]],[11,"ne","","",35,[[["systemdescriptortype",3]],["bool",15]]],[11,"eq","","",36,[[["genericdescriptor",3]],["bool",15]]],[11,"ne","","",36,[[["genericdescriptor",3]],["bool",15]]],[11,"eq","","",51,[[["genericdescriptorflags",3]],["bool",15]]],[11,"ne","","",51,[[["genericdescriptorflags",3]],["bool",15]]],[11,"eq","","",37,[[["segmentdescriptor",3]],["bool",15]]],[11,"ne","","",37,[[["segmentdescriptor",3]],["bool",15]]],[11,"eq","","",38,[[["segmentdescriptorflags",3]],["bool",15]]],[11,"ne","","",38,[[["segmentdescriptorflags",3]],["bool",15]]],[11,"eq","","",39,[[["gatedescriptor",3]],["bool",15]]],[11,"ne","","",39,[[["gatedescriptor",3]],["bool",15]]],[11,"eq","","",40,[[["gatedescriptorflags",3]],["bool",15]]],[11,"ne","","",40,[[["gatedescriptorflags",3]],["bool",15]]],[11,"eq","","",41,[[["iopermissionbitmap",3]],["bool",15]]],[11,"ne","","",41,[[["iopermissionbitmap",3]],["bool",15]]],[11,"eq","tartan_arch::x86_common","",42,[[["flagregister",3]],["bool",15]]],[11,"ne","","",42,[[["flagregister",3]],["bool",15]]],[11,"eq","","",43,[[["controlregister0",3]],["bool",15]]],[11,"ne","","",43,[[["controlregister0",3]],["bool",15]]],[11,"eq","","",44,[[["controlregister4",3]],["bool",15]]],[11,"ne","","",44,[[["controlregister4",3]],["bool",15]]],[11,"eq","","",45,[[["extendedcontrolregister0",3]],["bool",15]]],[11,"ne","","",45,[[["extendedcontrolregister0",3]],["bool",15]]],[11,"cmp","tartan_arch::aarch64::float","",2,[[["roundingmode",3]],["ordering",4]]],[11,"cmp","tartan_arch::aarch64::interrupt","",8,[[["class",3]],["ordering",4]]],[11,"cmp","tartan_arch::x86_common::interrupt","",21,[[["interruptvector",3]],["ordering",4]]],[11,"cmp","tartan_arch::x86_common::protection","",35,[[["systemdescriptortype",3]],["ordering",4]]],[11,"partial_cmp","tartan_arch::aarch64::float","",2,[[["roundingmode",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tartan_arch::aarch64::interrupt","",8,[[["class",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tartan_arch::x86_common::interrupt","",21,[[["interruptvector",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tartan_arch::x86_common::protection","",35,[[["systemdescriptortype",3]],[["ordering",4],["option",4]]]],[11,"hash","tartan_arch::aarch64::float","",2,[[]]],[11,"hash","tartan_arch::aarch64::interrupt","",8,[[]]],[11,"hash","tartan_arch::x86_common::interrupt","",21,[[]]],[11,"hash","tartan_arch::x86_common::protection","",35,[[]]],[11,"clone","tartan_arch::aarch64::float","",0,[[],["controlregister",3]]],[11,"clone","","",1,[[],["statusregister",3]]],[11,"clone","","",2,[[],["roundingmode",3]]],[11,"clone","","",46,[[],["exceptions",3]]],[11,"clone","tartan_arch::aarch64::interrupt","",3,[[],["kind",4]]],[11,"clone","","",4,[[],["source",4]]],[11,"clone","","",6,[[],["maskregister",3]]],[11,"clone","","",7,[[],["syndromeregister",3]]],[11,"clone","","",8,[[],["class",3]]],[11,"clone","tartan_arch::x86_64::protection","",11,[[],["taskstatesegmentheader",3]]],[11,"clone","tartan_arch::x86_64","",12,[[],["controlregister8",3]]],[11,"clone","","",13,[[],["extendedfeatureenableregister",3]]],[11,"clone","tartan_arch::x86::protection","",15,[[],["taskstatesegmentheader",3]]],[11,"clone","","",16,[[],["privilegedstack",3]]],[11,"clone","tartan_arch::x86_common::features","",18,[[],["basicfeatures",3]]],[11,"clone","","",19,[[],["extendedfeatures",3]]],[11,"clone","","",20,[[],["addressspacesizes",3]]],[11,"clone","tartan_arch::x86_common::interrupt","",21,[[],["interruptvector",3]]],[11,"clone","","",22,[[],["interruptdescriptortableregister",3]]],[11,"clone","","",23,[[],["apicbaseregister",3]]],[11,"clone","tartan_arch::x86_common::paging","",24,[[],["controlregister2",3]]],[11,"clone","","",25,[[],["controlregister3",3]]],[11,"clone","","",49,[[],["level2pagetableentry",3]]],[11,"clone","","",50,[[],["level1pagetableentry",3]]],[11,"clone","tartan_arch::x86_common::protection","",29,[[],["globaldescriptortableregister",3]]],[11,"clone","","",33,[[],["selector",3]]],[11,"clone","","",35,[[],["systemdescriptortype",3]]],[11,"clone","","",36,[[],["genericdescriptor",3]]],[11,"clone","","",51,[[],["genericdescriptorflags",3]]],[11,"clone","","",37,[[],["segmentdescriptor",3]]],[11,"clone","","",38,[[],["segmentdescriptorflags",3]]],[11,"clone","","",39,[[],["gatedescriptor",3]]],[11,"clone","","",40,[[],["gatedescriptorflags",3]]],[11,"clone","tartan_arch::x86_common","",42,[[],["flagregister",3]]],[11,"clone","","",43,[[],["controlregister0",3]]],[11,"clone","","",44,[[],["controlregister4",3]]],[11,"clone","","",45,[[],["extendedcontrolregister0",3]]],[11,"default","tartan_arch::aarch64::float","",0,[[],["controlregister",3]]],[11,"default","","",1,[[],["statusregister",3]]],[11,"default","","",2,[[],["roundingmode",3]]],[11,"default","","",46,[[],["exceptions",3]]],[11,"default","tartan_arch::aarch64::interrupt","",6,[[],["maskregister",3]]],[11,"default","","",7,[[],["syndromeregister",3]]],[11,"default","","",8,[[],["class",3]]],[11,"default","tartan_arch::x86_64::protection","",11,[[]]],[11,"default","tartan_arch::x86_64","",12,[[],["controlregister8",3]]],[11,"default","","",13,[[],["extendedfeatureenableregister",3]]],[11,"default","tartan_arch::x86_common::features","",18,[[],["basicfeatures",3]]],[11,"default","","",19,[[],["extendedfeatures",3]]],[11,"default","","",20,[[],["addressspacesizes",3]]],[11,"default","tartan_arch::x86_common::interrupt","",21,[[],["interruptvector",3]]],[11,"default","","",22,[[],["interruptdescriptortableregister",3]]],[11,"default","","",23,[[],["apicbaseregister",3]]],[11,"default","tartan_arch::x86_common::paging","",24,[[],["controlregister2",3]]],[11,"default","","",25,[[],["controlregister3",3]]],[11,"default","","",49,[[],["level2pagetableentry",3]]],[11,"default","","",50,[[],["level1pagetableentry",3]]],[11,"default","tartan_arch::x86_common::protection","",29,[[],["globaldescriptortableregister",3]]],[11,"default","","",33,[[],["selector",3]]],[11,"default","","",35,[[],["systemdescriptortype",3]]],[11,"default","","",51,[[],["genericdescriptorflags",3]]],[11,"default","","",37,[[]]],[11,"default","","",38,[[],["segmentdescriptorflags",3]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[],["gatedescriptorflags",3]]],[11,"default","tartan_arch::x86_common","",42,[[],["flagregister",3]]],[11,"default","","",43,[[],["controlregister0",3]]],[11,"default","","",44,[[],["controlregister4",3]]],[11,"default","","",45,[[],["extendedcontrolregister0",3]]],[11,"name","tartan_arch::aarch64::float","",2,[[],[["option",4],["str",15]]]],[11,"name","tartan_arch::aarch64::interrupt","",8,[[],[["option",4],["str",15]]]],[11,"name","tartan_arch::x86_common::interrupt","",21,[[],[["option",4],["str",15]]]],[11,"name","tartan_arch::x86_common::protection","",35,[[],[["option",4],["str",15]]]]],"p":[[3,"ControlRegister"],[3,"StatusRegister"],[3,"RoundingMode"],[4,"Kind"],[4,"Source"],[4,"VectorBaseAddressRegister"],[3,"MaskRegister"],[3,"SyndromeRegister"],[3,"Class"],[4,"ExceptionLevel"],[4,"StackPointerSelect"],[3,"TaskStateSegmentHeader"],[3,"ControlRegister8"],[3,"ExtendedFeatureEnableRegister"],[3,"BasicTaskStateSegment"],[3,"TaskStateSegmentHeader"],[3,"PrivilegedStack"],[3,"TaskStateSegmentBitmaps"],[3,"BasicFeatures"],[3,"ExtendedFeatures"],[3,"AddressSpaceSizes"],[3,"InterruptVector"],[3,"InterruptDescriptorTableRegister"],[3,"APICBaseRegister"],[3,"ControlRegister2"],[3,"ControlRegister3"],[8,"GenericPageTableEntry"],[8,"DirectPageTableEntry"],[8,"HybridPageTableEntry"],[3,"GlobalDescriptorTableRegister"],[4,"LocalDescriptorTableRegister"],[4,"TaskRegister"],[4,"SegmentRegister"],[3,"Selector"],[8,"DescriptorFlags"],[3,"SystemDescriptorType"],[3,"GenericDescriptor"],[3,"SegmentDescriptor"],[3,"SegmentDescriptorFlags"],[3,"GateDescriptor"],[3,"GateDescriptorFlags"],[3,"IOPermissionBitmap"],[3,"FlagRegister"],[3,"ControlRegister0"],[3,"ControlRegister4"],[3,"ExtendedControlRegister0"],[3,"Exceptions"],[3,"VectorEntry"],[3,"VectorTable"],[3,"Level2PageTableEntry"],[3,"Level1PageTableEntry"],[3,"GenericDescriptorFlags"]]},\
"tartan_bitfield":{"doc":"Define structures that wrap a number with accessors for …","i":[[8,"Bitfield","tartan_bitfield","Marker trait implemented by types defined with the […",null,null],[11,"new","","Construct a new bitfield type from its underlying …",0,[[]]],[11,"value","","Unwrap the bitfield into its underlying representation",0,[[]]],[5,"get_bit","","Get a boolean reflecting a single bit of the value.",null,[[["u8",15]],["bool",15]]],[5,"set_bit","","Create a copy of the value with a single bit modified.",null,[[["bool",15],["u8",15]]]],[5,"get_bits","","Extract a range of bits from the value, shifted so the …",null,[[["u8",15]]]],[5,"set_bits","","Create a copy of the value with a subset of bits updated …",null,[[["u8",15]]]],[8,"TruncateInto","","A type whose values can be truncated into another type. …",null,null],[10,"truncate_into","","Truncate the value to fit in the destination type",1,[[]]],[8,"OverflowingShl","","A type with an overflowing left shift operation. Also …",null,null],[10,"overflowing_shl","","Shift the value left by <code>n mod m</code> bits, where <code>m</code> is the …",2,[[["u32",15]]]],[11,"saturating_shl","","Shift the value left by <code>n</code> bits. If <code>n</code> is greater than or …",2,[[["u32",15]]]],[8,"OverflowingShr","","A type with an overflowing right shift operation. Also …",null,null],[10,"overflowing_shr","","Shift the value right by <code>n mod m</code> bits, where <code>m</code> is the …",3,[[["u32",15]]]],[11,"saturating_shr","","Shift the value right by <code>n</code> bits. If <code>n</code> is greater than or …",3,[[["u32",15]]]],[14,"bitfield","","Define a structure that wraps a number with accessors for …",null,null],[14,"bitfield_without_debug","","Same as the [<code>bitfield</code>] macro without a [<code>Debug</code>] …",null,null],[14,"bitfield_accessors","","Define getters and setters for certain bit ranges. The …",null,null]],"p":[[8,"Bitfield"],[8,"TruncateInto"],[8,"OverflowingShl"],[8,"OverflowingShr"]]},\
"tartan_c_enum":{"doc":"Support for C-style enums that support unknown values.","i":[[8,"CEnum","tartan_c_enum","Trait implemented by all [<code>c_enum</code>] types.",null,null],[10,"name","","The name of the enum variant in code, if one is defined …",0,[[],[["option",4],["str",15]]]],[14,"c_enum","","Define a struct that wraps an integer type and acts like …",null,null]],"p":[[8,"CEnum"]]},\
"tartan_devicetree":{"doc":"Support for the Devicetree specification.","i":[[0,"blob","tartan_devicetree","Flattened device tree, a.k.a. devicetree blob (DTB), as …",null,null],[3,"Tree","tartan_devicetree::blob","Represents a full flattened device tree blob (DTB).",null,null],[11,"from_ptr","","Parse a devicetree blob that begins at the specified …",0,[[],[["err",4],["result",4]]]],[11,"from_buffer","","Parse a devicetree blob that starts at the beginning of …",0,[[],[["err",4],["result",4]]]],[11,"memory_reservation_iter","","Iterate over memory reservations defined by this …",0,[[["tree",3]]]],[11,"structure_iter","","Iterate over elements in the device tree. Note that this …",0,[[["tree",3]]]],[4,"StructureData","","An event that signals the start/end of a node or a …",null,null],[13,"BeginNode","","Indicates that the following events are within the scope …",1,null],[13,"EndNode","","Indicates that the previous current node is complete, and …",1,null],[13,"Property","","Defines a property of the current node",1,null],[12,"name","tartan_devicetree::blob::StructureData","The name of the property.",2,null],[12,"value","","The value of the property.",2,null],[3,"Value","tartan_devicetree","Wrapper for a raw byte array used as the value of a …",null,null],[12,"data","","Property value as raw bytes",3,null],[3,"MemoryReservation","","Indicates an area of memory that the kernel does not have …",null,null],[12,"address","","Start address of the reserved memory",4,null],[12,"size","","Size of the reserved memory in bytes",4,null],[11,"from","tartan_devicetree::blob","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","tartan_devicetree","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"fmt","tartan_devicetree::blob","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_devicetree","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"eq","tartan_devicetree::blob","",0,[[["tree",3]],["bool",15]]],[11,"ne","","",0,[[["tree",3]],["bool",15]]],[11,"eq","","",1,[[["structuredata",4]],["bool",15]]],[11,"ne","","",1,[[["structuredata",4]],["bool",15]]],[11,"eq","tartan_devicetree","",3,[[["value",3]],["bool",15]]],[11,"ne","","",3,[[["value",3]],["bool",15]]],[11,"eq","","",4,[[["memoryreservation",3]],["bool",15]]],[11,"ne","","",4,[[["memoryreservation",3]],["bool",15]]],[11,"clone","tartan_devicetree::blob","",0,[[],["tree",3]]],[11,"clone","","",1,[[],["structuredata",4]]],[11,"clone","tartan_devicetree","",3,[[],["value",3]]],[11,"clone","","",4,[[],["memoryreservation",3]]],[11,"default","tartan_devicetree::blob","",0,[[],["tree",3]]],[11,"default","tartan_devicetree","",4,[[],["memoryreservation",3]]]],"p":[[3,"Tree"],[4,"StructureData"],[13,"Property"],[3,"Value"],[3,"MemoryReservation"]]},\
"tartan_elf":{"doc":"Support for Executable and Linkable Format (ELF) binaries.","i":[[6,"HeaderNative","tartan_elf","Variant of the [<code>Header</code>] structure native to the current …",null,null],[3,"Header","","File header for an ELF file with a specific address size.",null,null],[12,"ident","","Header common to all ELF variants.",0,null],[12,"file_type","","Distinguishes executables, libraries, etc.",0,null],[12,"machine","","CPU architecture",0,null],[12,"version","","ELF format version",0,null],[12,"entry_point","","Virtual address of executable entry point. Zero if not …",0,null],[12,"program_header_offset","","File offset to the array of program section headers which …",0,null],[12,"section_header_offset","","File offset to the array of section header which control …",0,null],[12,"flags","","CPU architecture-specific flags.",0,null],[12,"header_size","","Size in bytes of this header. May be longer than the …",0,null],[12,"program_header_size","","Size in bytes of of each program segment header. May be …",0,null],[12,"program_header_count","","Number of program segment headers.",0,null],[12,"section_header_size","","Size in bytes of each section header. May be longer than …",0,null],[12,"section_header_count","","Number of section headers.",0,null],[12,"section_names_index","","Index of the section header which contains the list of …",0,null],[18,"VERSION","","Expected value of the <code>version</code> field.",0,null],[11,"verify_native","","Checks that the header represents a valid ELF file for …",0,[[]]],[3,"HeaderIdent","","Initial header which has the same layout in all ELF …",null,null],[12,"magic","","Magic number that identifies this as an ELF file.",1,null],[12,"class","","Specifies the address size (32- or 64-bit) of the file.",1,null],[12,"endianness","","Specifies whether the file uses big or little endian byte …",1,null],[12,"header_version","","Version of the ELF header.",1,null],[12,"os_abi","","Operating-system-specific ABI extensions that this file …",1,null],[12,"os_abi_version","","Backwards-incompatible version number of the <code>os_abi</code> …",1,null],[18,"MAGIC","","Expected value of the <code>magic</code> field.",1,null],[18,"VERSION","","Expected value of the <code>header_version</code> field.",1,null],[11,"verify_format","","Checks that the header represents a valid ELF file, of …",1,[[]]],[11,"verify_native","","Checks that the header represents an ELF file in the …",1,[[]]],[3,"FileClass","","Specifies the address size (32- or 64-bit) of the file.",null,null],[18,"None","","Invalid placeholder value.",2,null],[18,"Size32","","File uses 32-bit addresses/offsets.",2,null],[18,"Size64","","File uses 64-bit addresses/offsets.",2,null],[11,"name","","The name of the enum variant in code, if one is defined …",2,[[],[["option",4],["str",15]]]],[18,"NATIVE","","The expected file class for the current platform.",2,null],[18,"NATIVE","","The expected file class for the current platform.",2,null],[3,"Endianness","","Specifies whether the file uses big or little endian byte …",null,null],[18,"None","","Invalid placeholder value.",3,null],[18,"Little","","File uses little-endian (LSB first) byte ordering.",3,null],[18,"Big","","File uses big-endian (MSB-first) byte ordering.",3,null],[11,"name","","The name of the enum variant in code, if one is defined …",3,[[],[["option",4],["str",15]]]],[18,"NATIVE","","The expected endianness value for the current platform.",3,null],[3,"OSABI","","Operating-system-specific ABI extensions supported by the …",null,null],[18,"None","","Original Unix System V ABI",4,null],[18,"HPUX","","HP-UX",4,null],[18,"NetBSD","","NetBSD",4,null],[18,"Linux","","GNU with Linux kernel",4,null],[18,"Hurd","","GNU with Hurd kernel",4,null],[18,"Solaris","","Sun/Oracle Solaris",4,null],[18,"AIX","","IBM AIX",4,null],[18,"IRIX","","SGI IRIX",4,null],[18,"FreeBSD","","FreeBSD",4,null],[18,"TRU64","","Compaq TRU64 Unix",4,null],[18,"Modesto","","Novell Modesto",4,null],[18,"OpenBSD","","OpenBSD",4,null],[18,"OpenVMS","","DEC OpenVMS",4,null],[18,"NonStopKernel","","HP Non-Stop Kernel",4,null],[18,"AROS","","AROS (Amiga)",4,null],[18,"FenixOS","","FenixOS (Passas and Karlsson 2011?)",4,null],[18,"CloudABI","","Nuxi CloudABI",4,null],[18,"OpenVOS","","Stratus Open VOS",4,null],[18,"MinArchDefined","","Beginning of range (inclusive) for CPU …",4,null],[18,"MaxArchDefined","","End of range (inclusive) for CPU architecture-specific …",4,null],[11,"name","","The name of the enum variant in code, if one is defined …",4,[[],[["option",4],["str",15]]]],[3,"FileType","","Types of object files supported by the ELF specification",null,null],[18,"None","","Invalid placeholder value.",5,null],[18,"Relocatable","","Relocatable object file",5,null],[18,"Executable","","A file with an entry point that can be executed",5,null],[18,"SharedObject","","Dynamic shared library",5,null],[18,"Core","","Core dump",5,null],[18,"MinOSDefined","","Beginning of range (inclusive) for OS-specific values",5,null],[18,"MaxOSDefined","","End of range (inclusive) for OS-specific values",5,null],[18,"MinArchDefined","","Beginning of range (inclusive) for CPU …",5,null],[18,"MaxArchDefined","","Beginning of range (inclusive) for CPU …",5,null],[11,"name","","The name of the enum variant in code, if one is defined …",5,[[],[["option",4],["str",15]]]],[3,"Machine","","Identifies the target CPU architecture.",null,null],[18,"None","","No specific architecture defined.",6,null],[18,"SPARC","","Sun/Oracle SPARC",6,null],[18,"X86","","32-bit x86",6,null],[18,"M68K","","Motorola 68000",6,null],[18,"MIPS","","MIPS I",6,null],[18,"MIPSRS3kLittleEndian","","MIPS RS3000 (little-endian)",6,null],[18,"PowerPC","","32-bit PowerPC",6,null],[18,"PowerPC64","","64-bit PowerPC",6,null],[18,"Arm","","32-bit Arm",6,null],[18,"IA64","","Intel Itanium IA-64",6,null],[18,"X86_64","","64-bit x86",6,null],[18,"Arm64","","64-bit Arm",6,null],[18,"RISCV","","RISC-V",6,null],[11,"name","","The name of the enum variant in code, if one is defined …",6,[[],[["option",4],["str",15]]]],[18,"NATIVE","","The expected machine type for the current platform.",6,null],[18,"NATIVE","","The expected machine type for the current platform.",6,null],[6,"ProgramHeaderNative","","Program header variant native to the current target",null,null],[3,"ProgramHeader32","","Header that controls loading of a single segment of an …",null,null],[12,"segment_type","","Indicates the contents/meaning of the segment described …",7,null],[12,"file_offset","","File offset to the start of this segment\'s data.",7,null],[12,"virtual_addr","","Virtual base address where the segment should be loaded.",7,null],[12,"physical_addr","","Physical base address where the segment should be loaded. …",7,null],[12,"file_size","","Size in bytes of the file data for this segment.",7,null],[12,"mem_size","","Size in bytes of this segment once it is loaded into …",7,null],[12,"flags","","Controls permissions and other OS/arch-specific flags.",7,null],[12,"alignment","","Alignment of the segment in bytes, for both the file and …",7,null],[3,"ProgramHeader64","","Header that controls loading of a single segment of an …",null,null],[12,"segment_type","","Indicates the contents/meaning of the segment described …",8,null],[12,"flags","","Controls permissions and other OS/arch-specific flags.",8,null],[12,"file_offset","","File offset to the start of this segment\'s data.",8,null],[12,"virtual_addr","","Virtual base address where the segment should be loaded.",8,null],[12,"physical_addr","","Physical base address where the segment should be loaded. …",8,null],[12,"file_size","","Size in bytes of the file data for this segment.",8,null],[12,"mem_size","","Size in bytes of this segment once it is loaded into …",8,null],[12,"alignment","","Alignment of the segment in bytes, for both the file and …",8,null],[3,"ProgramSegmentType","","Defines the contents and meaning of individual program …",null,null],[18,"None","","Marks an ignored or unused segment.",9,null],[18,"Loadable","","Segment that should be loaded into memory.",9,null],[18,"DynamicLink","","Segment containing information for the dynamic linker.",9,null],[18,"Interpreter","","Segment containing the path to the program\'s interpreter …",9,null],[18,"Note","","Segment containing auxillary information.",9,null],[18,"ProgramHeaderTable","","Segment that contains the program header itself, …",9,null],[18,"ThreadLocalStorage","","Segment that contains a template for the thread-local …",9,null],[18,"MinOSDefined","","Beginning of range (inclusive) for OS-specific values",9,null],[18,"MaxOSDefined","","End of range (inclusive) for OS-specific values",9,null],[18,"MinArchDefined","","Beginning of range (inclusive) for CPU …",9,null],[18,"MaxArchDefined","","End of range (inclusive) for CPU architecture-specific …",9,null],[11,"name","","The name of the enum variant in code, if one is defined …",9,[[],[["option",4],["str",15]]]],[3,"ProgramSegmentFlags","","Permissions and other OS/arch-specific flags for …",null,null],[11,"execute","","Indicates the segment contains code that should be …",10,[[],["bool",15]]],[11,"write","","Indicates the segment contains data that should be …",10,[[],["bool",15]]],[11,"read","","Indicates the segment contains data that should be …",10,[[],["bool",15]]],[11,"os_defined","","Bits that are left for OS-specific flags.",10,[[],["u8",15]]],[11,"arch_defined","","Bits that are left for CPU architecture-specific flags.",10,[[],["u8",15]]],[11,"set_execute","","Indicates the segment contains code that should be …",10,[[["bool",15]]]],[11,"set_write","","Indicates the segment contains data that should be …",10,[[["bool",15]]]],[11,"set_read","","Indicates the segment contains data that should be …",10,[[["bool",15]]]],[11,"set_os_defined","","Bits that are left for OS-specific flags.",10,[[["u8",15]]]],[11,"set_arch_defined","","Bits that are left for CPU architecture-specific flags.",10,[[["u8",15]]]],[6,"SectionHeaderNative","","Variant of the [<code>SectionHeader</code>] structure native to the …",null,null],[3,"SectionHeader","","Header that controls linking",null,null],[12,"name_table_offset","","Offset within the names section to the start of this …",11,null],[12,"section_type","","Indicates the contents/meaning of the section described …",11,null],[12,"flags_raw","","Flags for various attributes of this section.",11,null],[12,"virtual_addr","","Virtual address where this section should be loaded in …",11,null],[12,"file_offset","","File offset to the start of this section\'s data.",11,null],[12,"file_size","","Size in bytes of this section\'s file data.",11,null],[12,"associated_section_index","","Depending on the <code>section_type</code>, this may identify another …",11,null],[12,"extra_info","","Additional flags that depend on the <code>section_type</code>.",11,null],[12,"alignment","","Required alignment of the section in bytes.",11,null],[12,"entry_size","","Depending on the <code>section_type</code>, this may identify the size …",11,null],[11,"flags","","Flags for various attributes of this section.",11,[[],["sectionflags",3]]],[11,"set_flags","","Flags for various attributes of this section.",11,[[["sectionflags",3]]]],[3,"SectionType","","Defines the contents and meaning of individual sections.",null,null],[18,"None","","Marks an ignored or unused section.",12,null],[18,"ProgramDefined","","Section containing data that is only meaningful to the …",12,null],[18,"Symbols","","Section containing the symbol table for this object file.",12,null],[18,"Strings","","Section containing packed null-terminated strings.",12,null],[18,"RelocationWithAdded","","Section containing relocation data with addends given in …",12,null],[18,"SymbolHash","","Section containing the hash table for symbols.",12,null],[18,"DynamicLink","","Section containing information for the dynamic linker.",12,null],[18,"Note","","Section containing auxillary information.",12,null],[18,"NoBits","","An empty file section that will be filled with zeros when …",12,null],[18,"RelocationNoAdded","","Section containing relocation data where the addends are …",12,null],[18,"DynamicLinkSymbol","","Section containing the symbol table for dynamic linking.",12,null],[18,"Constructors","","Section containing the addresses of constructor functions …",12,null],[18,"Destructors","","Section containing the addresses of destructor functions …",12,null],[18,"PreConstructors","","Section containing the addresses of constructor functions …",12,null],[18,"Group","","Section that groups other sections.",12,null],[18,"SymbolIndirectSections","","Table of section indexes that correspond to entries in …",12,null],[18,"MinOSDefined","","Beginning of range (inclusive) for OS-specific values",12,null],[18,"MaxOSDefined","","End of range (inclusive) for OS-specific values",12,null],[18,"MinArchDefined","","Beginning of range (inclusive) for CPU …",12,null],[18,"MaxArchDefined","","End of range (inclusive) for CPU architecture-specific …",12,null],[18,"MinUserDefined","","Beginning of range (inclusive) for user-defined values",12,null],[18,"MaxUserDefined","","End of range (inclusive) for user-defined values",12,null],[11,"name","","The name of the enum variant in code, if one is defined …",12,[[],[["option",4],["str",15]]]],[3,"SectionFlags","","Additional attributes for object file sections.",null,null],[11,"write","","Indicates the section contains data that should be …",13,[[],["bool",15]]],[11,"allocate","","Indicates this section should be loaded into memory when …",13,[[],["bool",15]]],[11,"execute","","Indicates this section contains code that should be …",13,[[],["bool",15]]],[11,"merged","","Indicates that multiple sections of this type can be …",13,[[],["bool",15]]],[11,"strings","","Indicates the section contains null-terminate strings.",13,[[],["bool",15]]],[11,"extra_info_is_link","","Indicates that the <code>extra_info</code> field of the section header …",13,[[],["bool",15]]],[11,"keep_order","","Indicates that this section and the […",13,[[],["bool",15]]],[11,"os_nonconforming","","Indicates that the section must be processed in an …",13,[[],["bool",15]]],[11,"group_member","","Indicates the section is listed by a section with type […",13,[[],["bool",15]]],[11,"thread_locals","","Indicates the section contains a template for the …",13,[[],["bool",15]]],[11,"os_defined","","Bits that are left for OS-defined flags.",13,[[],["u8",15]]],[11,"arch_defined","","Bits that are left for CPU architecture-defined flags.",13,[[],["u8",15]]],[11,"set_write","","Indicates the section contains data that should be …",13,[[["bool",15]]]],[11,"set_allocate","","Indicates this section should be loaded into memory when …",13,[[["bool",15]]]],[11,"set_execute","","Indicates this section contains code that should be …",13,[[["bool",15]]]],[11,"set_merged","","Indicates that multiple sections of this type can be …",13,[[["bool",15]]]],[11,"set_strings","","Indicates the section contains null-terminate strings.",13,[[["bool",15]]]],[11,"set_extra_info_is_link","","Indicates that the <code>extra_info</code> field of the section header …",13,[[["bool",15]]]],[11,"set_keep_order","","Indicates that this section and the […",13,[[["bool",15]]]],[11,"set_os_nonconforming","","Indicates that the section must be processed in an …",13,[[["bool",15]]]],[11,"set_group_member","","Indicates the section is listed by a section with type […",13,[[["bool",15]]]],[11,"set_thread_locals","","Indicates the section contains a template for the …",13,[[["bool",15]]]],[11,"set_os_defined","","Bits that are left for OS-defined flags.",13,[[["u8",15]]]],[11,"set_arch_defined","","Bits that are left for CPU architecture-defined flags.",13,[[["u8",15]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",2,[[["u8",15]]]],[11,"from","","",3,[[["u8",15]]]],[11,"from","","",4,[[["u8",15]]]],[11,"from","","",5,[[["u16",15]]]],[11,"from","","",6,[[["u8",15]]]],[11,"from","","",9,[[["u32",15]]]],[11,"from","","",10,[[["u32",15]]]],[11,"from","","",12,[[["u32",15]]]],[11,"from","","",13,[[["u32",15]]]],[11,"from","","",13,[[["usize",15]],["sectionflags",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["header",3]],["bool",15]]],[11,"ne","","",0,[[["header",3]],["bool",15]]],[11,"eq","","",1,[[["headerident",3]],["bool",15]]],[11,"ne","","",1,[[["headerident",3]],["bool",15]]],[11,"eq","","",2,[[["fileclass",3]],["bool",15]]],[11,"ne","","",2,[[["fileclass",3]],["bool",15]]],[11,"eq","","",3,[[["endianness",3]],["bool",15]]],[11,"ne","","",3,[[["endianness",3]],["bool",15]]],[11,"eq","","",4,[[["osabi",3]],["bool",15]]],[11,"ne","","",4,[[["osabi",3]],["bool",15]]],[11,"eq","","",5,[[["filetype",3]],["bool",15]]],[11,"ne","","",5,[[["filetype",3]],["bool",15]]],[11,"eq","","",6,[[["machine",3]],["bool",15]]],[11,"ne","","",6,[[["machine",3]],["bool",15]]],[11,"eq","","",7,[[["programheader32",3]],["bool",15]]],[11,"ne","","",7,[[["programheader32",3]],["bool",15]]],[11,"eq","","",8,[[["programheader64",3]],["bool",15]]],[11,"ne","","",8,[[["programheader64",3]],["bool",15]]],[11,"eq","","",9,[[["programsegmenttype",3]],["bool",15]]],[11,"ne","","",9,[[["programsegmenttype",3]],["bool",15]]],[11,"eq","","",10,[[["programsegmentflags",3]],["bool",15]]],[11,"ne","","",10,[[["programsegmentflags",3]],["bool",15]]],[11,"eq","","",11,[[["sectionheader",3]],["bool",15]]],[11,"ne","","",11,[[["sectionheader",3]],["bool",15]]],[11,"eq","","",12,[[["sectiontype",3]],["bool",15]]],[11,"ne","","",12,[[["sectiontype",3]],["bool",15]]],[11,"eq","","",13,[[["sectionflags",3]],["bool",15]]],[11,"ne","","",13,[[["sectionflags",3]],["bool",15]]],[11,"cmp","","",2,[[["fileclass",3]],["ordering",4]]],[11,"cmp","","",3,[[["endianness",3]],["ordering",4]]],[11,"cmp","","",4,[[["osabi",3]],["ordering",4]]],[11,"cmp","","",5,[[["filetype",3]],["ordering",4]]],[11,"cmp","","",6,[[["machine",3]],["ordering",4]]],[11,"cmp","","",9,[[["programsegmenttype",3]],["ordering",4]]],[11,"cmp","","",12,[[["sectiontype",3]],["ordering",4]]],[11,"partial_cmp","","",2,[[["fileclass",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",3,[[["endianness",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[["osabi",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",5,[[["filetype",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",6,[[["machine",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",9,[[["programsegmenttype",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",12,[[["sectiontype",3]],[["ordering",4],["option",4]]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",12,[[]]],[11,"clone","","",0,[[],["header",3]]],[11,"clone","","",1,[[],["headerident",3]]],[11,"clone","","",2,[[],["fileclass",3]]],[11,"clone","","",3,[[],["endianness",3]]],[11,"clone","","",4,[[],["osabi",3]]],[11,"clone","","",5,[[],["filetype",3]]],[11,"clone","","",6,[[],["machine",3]]],[11,"clone","","",7,[[],["programheader32",3]]],[11,"clone","","",8,[[],["programheader64",3]]],[11,"clone","","",9,[[],["programsegmenttype",3]]],[11,"clone","","",10,[[],["programsegmentflags",3]]],[11,"clone","","",11,[[],["sectionheader",3]]],[11,"clone","","",12,[[],["sectiontype",3]]],[11,"clone","","",13,[[],["sectionflags",3]]],[11,"default","","",0,[[],["header",3]]],[11,"default","","",1,[[],["headerident",3]]],[11,"default","","",2,[[],["fileclass",3]]],[11,"default","","",3,[[],["endianness",3]]],[11,"default","","",4,[[],["osabi",3]]],[11,"default","","",5,[[],["filetype",3]]],[11,"default","","",6,[[],["machine",3]]],[11,"default","","",7,[[],["programheader32",3]]],[11,"default","","",8,[[],["programheader64",3]]],[11,"default","","",9,[[],["programsegmenttype",3]]],[11,"default","","",10,[[],["programsegmentflags",3]]],[11,"default","","",11,[[],["sectionheader",3]]],[11,"default","","",12,[[],["sectiontype",3]]],[11,"default","","",13,[[],["sectionflags",3]]],[11,"name","","",2,[[],[["option",4],["str",15]]]],[11,"name","","",3,[[],[["option",4],["str",15]]]],[11,"name","","",4,[[],[["option",4],["str",15]]]],[11,"name","","",5,[[],[["option",4],["str",15]]]],[11,"name","","",6,[[],[["option",4],["str",15]]]],[11,"name","","",9,[[],[["option",4],["str",15]]]],[11,"name","","",12,[[],[["option",4],["str",15]]]]],"p":[[3,"Header"],[3,"HeaderIdent"],[3,"FileClass"],[3,"Endianness"],[3,"OSABI"],[3,"FileType"],[3,"Machine"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"ProgramSegmentType"],[3,"ProgramSegmentFlags"],[3,"SectionHeader"],[3,"SectionType"],[3,"SectionFlags"]]},\
"tartan_kernel":{"doc":"","i":[[0,"allocator","tartan_kernel","",null,null],[3,"Allocator","tartan_kernel::allocator","Simple kernel allocator that keeps a singly-linked list …",null,null],[12,"block_list","","",0,null],[11,"uninitialized","","",0,[[]]],[11,"init","","",0,[[["blocklist",3]]]],[3,"BlockList","","",null,null],[12,"data","","",1,null],[11,"from_block","","",1,[[]]],[11,"cursor_from_data_ptr","","",1,[[],["cursormut",3]]],[11,"front_mut","","",1,[[],["cursormut",3]]],[3,"CursorMut","","",null,null],[12,"0","","",2,null],[11,"current","","",2,[[],["pin",3]]],[11,"move_next","","",2,[[]]],[11,"split_exact","","",2,[[["usize",15]]]],[11,"split_to_minimum","","",2,[[["usize",15]]]],[11,"split_to_align","","",2,[[["layout",3]]]],[11,"merge_next_if_free","","",2,[[]]],[3,"BlockHeader","","",null,null],[12,"0","","",3,null],[11,"free","","",3,[[],["bool",15]]],[11,"set_free","","",3,[[["bool",15]]]],[11,"fmt_fields","","Print this object\'s bitfield values. Helper method for …",3,[[["debugstruct",3]]]],[18,"SIZE_MASK","","",3,null],[11,"data_size","","",3,[[],["usize",15]]],[11,"set_data_size","","",3,[[["usize",15]]]],[11,"data_ptr","","",3,[[["pin",3]]]],[11,"is_end","","",3,[[],["bool",15]]],[11,"next_ptr","","",3,[[["pin",3]],["option",4]]],[11,"next","","",3,[[["pin",3]],[["option",4],["pin",3]]]],[11,"next_mut","","",3,[[["pin",3]],[["option",4],["pin",3]]]],[11,"can_fit","","",3,[[["pin",3],["layout",3]],["bool",15]]],[5,"align_up","","",null,[[["usize",15],["layout",3]],["usize",15]]],[5,"align_mask","","",null,[[["layout",3]],["usize",15]]],[0,"arch","tartan_kernel","Interface to architecture-specific code",null,null],[0,"x86_common","tartan_kernel::arch","Shared architecture-specific bindings for 32-bit and …",null,null],[7,"GLOBAL_DESCRIPTOR_TABLE","tartan_kernel::arch::x86_common","",null,null],[7,"INTERRUPT_DESCRIPTOR_TABLE","","",null,null],[7,"TASK_STATE_SEGMENT","","",null,null],[3,"GlobalDescriptorTable","","Global descriptor table structure specific to Tartan OS.",null,null],[12,"null_segment","","Dummy descriptor for segment index 0. The processor …",4,null],[12,"code_segment","","Main code segment that covers all memory, used by CS.",4,null],[12,"data_segment","","Main data that covers all memory, used by everything but …",4,null],[12,"task_state_segment","","Sole task state segment required by task register.",4,null],[3,"InterruptDescriptorTable","","",null,null],[12,"descriptors","","",5,null],[5,"initialize_control_registers","","Set flags in general control registers to a known state",null,[[]]],[5,"initialize_segments","","Initialize the segmentation system to use a flat memory …",null,[[]]],[5,"make_code_descriptor","","",null,[[],["segmentdescriptor",3]]],[5,"make_data_descriptor","","",null,[[],["segmentdescriptor",3]]],[5,"make_task_state_descriptor","","",null,[[],["segmentdescriptor",3]]],[5,"initialize_interrupts","","",null,[[]]],[5,"make_interrupt_gate","","",null,[[["selector",3]],["gatedescriptor",3]]],[5,"handle_unknown_interrupt","","",null,[[["interruptvector",3]]]],[0,"x86_64","tartan_kernel::arch","Architecture-specific bindings for 64-bit Intel x86-based …",null,null],[5,"initialize","tartan_kernel::arch::x86_64","Perform early architecture-specific setup",null,[[]]],[0,"cpu","tartan_kernel","",null,null],[5,"print_state","tartan_kernel::cpu","",null,[[["write",8]],["result",6]]],[5,"describe_segment_register","","",null,[[["str",15],["selector",3],["write",8]],["result",6]]],[0,"intrinsics","tartan_kernel","This module contains some compiler-rt intrinsics that are …",null,null],[5,"memcpy","tartan_kernel::intrinsics","",null,[[["usize",15]]]],[5,"memmove","","",null,[[["usize",15]]]],[5,"memset","","",null,[[["usize",15],["i32",15]]]],[5,"memcmp","","",null,[[["usize",15]],["i32",15]]],[5,"bcmp","","",null,[[["usize",15]],["i32",15]]],[0,"pci","tartan_kernel","",null,null],[5,"find_pci_access","tartan_kernel::pci","",null,[[]]],[5,"print_devices","","",null,[[["write",8]],["result",6]]],[7,"X","tartan_kernel","",null,null],[5,"_start","","",null,[[["isize",15]],["isize",15]]],[5,"kernel_main","","",null,[[]]],[5,"find_uart","","",null,[[]]],[7,"ALLOCATOR","","",null,null],[7,"HEAP","","",null,null],[5,"alloc_error","","",null,[[["layout",3]]]],[5,"panic_handler","","",null,[[["panicinfo",3]]]],[5,"eh_personality","","",null,[[]]],[11,"from","tartan_kernel::allocator","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","tartan_kernel::arch::x86_common","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","tartan_kernel::allocator","",3,[[["usize",15]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"eq","","",3,[[["blockheader",3]],["bool",15]]],[11,"ne","","",3,[[["blockheader",3]],["bool",15]]],[11,"clone","","",3,[[],["blockheader",3]]],[11,"default","","",3,[[],["blockheader",3]]],[11,"alloc","","",0,[[["layout",3]]]],[11,"dealloc","","",0,[[["layout",3]]]]],"p":[[3,"Allocator"],[3,"BlockList"],[3,"CursorMut"],[3,"BlockHeader"],[3,"GlobalDescriptorTable"],[3,"InterruptDescriptorTable"]]},\
"tartan_parsers":{"doc":"Utilities for nom parsers","i":[[0,"error","tartan_parsers","Helpers for reporting parsing errors",null,null],[8,"GeneralParseError","tartan_parsers::error","Trait alias combining the nom error traits <code>ParseError</code> and …",null,null],[5,"err","","Shortcut for constructing parser errors",null,[[["errorkind",4]],[["iresult",6],["parseerror",8]]]],[3,"Position","","Helper struct that prints human-readable position …",null,null],[12,"state","","The state of the parser at the time we are interested in",0,null],[12,"full_input","","The complete input we are trying to parse",0,null],[3,"ErrorWithPosition","","A parser error with position info useful for printing …",null,null],[12,"error","","The error returned by the parser",1,null],[12,"full_input","","The complete input we were trying to parse",1,null],[11,"new","","Associate a parse error with its full input, to reference …",1,[[["verboseerror",3],["err",4]]]],[5,"opcode","tartan_parsers","Combinator for productions that use a deterministic opcode",null,[[["str",15]]]],[5,"result_iterator","","Create an iterator that repeatedly executes the parser.",null,[[]]],[14,"struct_parser","","Parse struct fields in order using an initializer-like …",null,null],[11,"from","tartan_parsers::error","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",1,[[],["errorwithposition",3]]]],"p":[[3,"Position"],[3,"ErrorWithPosition"]]},\
"tartan_pci":{"doc":"Support for Peripheral Component Interconnect (PCI) and …","i":[[0,"access","tartan_pci","Access methods for PCI configuration space.",null,null],[0,"io","tartan_pci::access","Support for the I/O based configuration access method on …",null,null],[3,"IOConfigAccess","tartan_pci::access::io","I/O based configuration access method on x86/x86-64.",null,null],[8,"ConfigAccess","tartan_pci::access","Provides methods to access PCI configuration space.",null,null],[10,"get_register","","Get a specific 32-bit register in PCI configuration space.",0,[[["configselector",3],["u16",15]],["u32",15]]],[10,"set_register","","Set a specific 32-bit register in PCI configuration space.",0,[[["u32",15],["configselector",3],["u16",15]]]],[11,"get_fixed_register","","Get a register in PCI configuration space with an offset …",0,[[["configselector",3]],["fixedconfigregister",8]]],[11,"set_fixed_register","","Set a register in PCI configuration space with an offset …",0,[[["fixedconfigregister",8],["configselector",3]]]],[3,"ConfigSelector","","Logical PCI address for a function of a specific …",null,null],[12,"segment_group","","Segment group as defined by PCI Express. Always zero for …",1,null],[12,"bus","","PCI bus number within the indicated segment group. The …",1,null],[12,"device","","PCI device number on the indicated bus.",1,null],[12,"function","","PCI function number on the indicated device. Usually …",1,null],[3,"MemMapConfigAccess","","Access to memory-mapped PCI configuration space",null,null],[12,"base_address","","Address of register 0 on bus",2,null],[12,"bus_range","","Bus numbers covered by this memory map",2,null],[0,"config","tartan_pci","Data exposed in PCI configuration space.",null,null],[8,"FixedConfigRegister","tartan_pci::config","A register type that is always located at a specific …",null,null],[18,"REGISTER_NUMBER","","Fixed offset for this register type",3,null],[3,"HeaderRegister0","","The first register of the standard configuration header …",null,null],[11,"device","","Vendor-defined device ID",4,[[],["u16",15]]],[11,"vendor","","ID of the chipset manufacturer for this function, …",4,[[],["u16",15]]],[11,"set_device","","Vendor-defined device ID",4,[[["u16",15]]]],[11,"set_vendor","","ID of the chipset manufacturer for this function, …",4,[[["u16",15]]]],[11,"valid","","Return false if the function is not present, as indicated …",4,[[],["bool",15]]],[3,"HeaderRegister1","","The second register of the standard configuration header …",null,null],[11,"status","","Status bits indicated by the function",5,[[],["statusregister",3]]],[11,"command","","Control bits set by the host",5,[[],["commandregister",3]]],[11,"set_status","","Status bits indicated by the function",5,[[["statusregister",3]]]],[11,"set_command","","Control bits set by the host",5,[[["commandregister",3]]]],[3,"HeaderRegister2","","The third register of the standard configuration header …",null,null],[11,"class","","Indicates the general purpose of the function, from a …",6,[[],["u8",15]]],[11,"subclass","","Indicates the purpose of the function more specifically, …",6,[[],["u8",15]]],[11,"interface","","Indicates a standard programming interface that can be …",6,[[],["u8",15]]],[11,"revision","","Vendor-defined revision of the hardware",6,[[],["u8",15]]],[11,"set_class","","Indicates the general purpose of the function, from a …",6,[[["u8",15]]]],[11,"set_subclass","","Indicates the purpose of the function more specifically, …",6,[[["u8",15]]]],[11,"set_interface","","Indicates a standard programming interface that can be …",6,[[["u8",15]]]],[11,"set_revision","","Vendor-defined revision of the hardware",6,[[["u8",15]]]],[3,"HeaderRegister3","","The fourth register of the standard configuration header …",null,null],[11,"self_test","","Control and status flags for a function\'s self test …",7,[[],["selftest",3]]],[11,"multi_function","","If true, then this device responds to at least some …",7,[[],["bool",15]]],[11,"header_type","","Indicates which of the standard PCI configuration header …",7,[[],["u8",15]]],[11,"latency_timer","","The value of the bus master\'s latency timer in PCI clock …",7,[[],["u8",15]]],[11,"cache_line_size","","Informs the device of the size of the system\'s cache …",7,[[],["u8",15]]],[11,"set_self_test","","Control and status flags for a function\'s self test …",7,[[["selftest",3]]]],[11,"set_multi_function","","If true, then this device responds to at least some …",7,[[["bool",15]]]],[11,"set_header_type","","Indicates which of the standard PCI configuration header …",7,[[["u8",15]]]],[11,"set_latency_timer","","The value of the bus master\'s latency timer in PCI clock …",7,[[["u8",15]]]],[11,"set_cache_line_size","","Informs the device of the size of the system\'s cache …",7,[[["u8",15]]]],[3,"Type0HeaderRegister11","","Twelfth register of the standard configuration header for …",null,null],[11,"subsystem","","ID of the device as defined by the card manufacturer.",8,[[],["u16",15]]],[11,"subsystem_vendor","","ID of the card manufacturer, which may be different than …",8,[[],["u16",15]]],[11,"set_subsystem","","ID of the device as defined by the card manufacturer.",8,[[["u16",15]]]],[11,"set_subsystem_vendor","","ID of the card manufacturer, which may be different than …",8,[[["u16",15]]]],[3,"Type0HeaderRegister13","","Fourtheenth register of the standard configuration header …",null,null],[11,"capabilities_offset","","Offset within this function\'s configuration space that …",9,[[],["u8",15]]],[11,"set_capabilities_offset","","Offset within this function\'s configuration space that …",9,[[["u8",15]]]],[3,"Type0HeaderRegister15","","Sixteenth register of the standard configuration header …",null,null],[11,"max_latency","","Indicates the longest period the device can wait to …",10,[[],["u8",15]]],[11,"min_grant","","Indicates the desired length of bursts in units of 0.25 …",10,[[],["u8",15]]],[11,"interrupt_pin","","Indicates which of the four interrupt pins on the PCI bus …",10,[[],["u8",15]]],[11,"interrupt_line","","Indicates which system interrupt number the function …",10,[[],["u8",15]]],[11,"set_max_latency","","Indicates the longest period the device can wait to …",10,[[["u8",15]]]],[11,"set_min_grant","","Indicates the desired length of bursts in units of 0.25 …",10,[[["u8",15]]]],[11,"set_interrupt_pin","","Indicates which of the four interrupt pins on the PCI bus …",10,[[["u8",15]]]],[11,"set_interrupt_line","","Indicates which system interrupt number the function …",10,[[["u8",15]]]],[3,"CommandRegister","","Control bits set by the host",null,null],[11,"interrupt_disabled","","Controls whether the device is prohibited from asserting …",11,[[],["bool",15]]],[11,"fast_back_to_back_enabled","","Controls whether the device may use fast back-to-back …",11,[[],["bool",15]]],[11,"system_error_enabled","","Controls whether the device may signal critical errors in …",11,[[],["bool",15]]],[11,"parity_error_response","","Controls whether the device responds normally to parity …",11,[[],["bool",15]]],[11,"vga_palette_snoop","","Controls whether a VGA or graphics card device may …",11,[[],["bool",15]]],[11,"write_and_invalidate_enable","","Controls whether the device may send a \\\"Memory Write and …",11,[[],["bool",15]]],[11,"special_cycle","","Controls whether the device may respond to \\\"special …",11,[[],["bool",15]]],[11,"bus_master","","Controls whether the device may act as a master of the …",11,[[],["bool",15]]],[11,"memory_space","","Controls whether the device may respond to accesses …",11,[[],["bool",15]]],[11,"io_space","","Controls whether the device may respond to accesses …",11,[[],["bool",15]]],[11,"set_interrupt_disabled","","Controls whether the device is prohibited from asserting …",11,[[["bool",15]]]],[11,"set_fast_back_to_back_enabled","","Controls whether the device may use fast back-to-back …",11,[[["bool",15]]]],[11,"set_system_error_enabled","","Controls whether the device may signal critical errors in …",11,[[["bool",15]]]],[11,"set_parity_error_response","","Controls whether the device responds normally to parity …",11,[[["bool",15]]]],[11,"set_vga_palette_snoop","","Controls whether a VGA or graphics card device may …",11,[[["bool",15]]]],[11,"set_write_and_invalidate_enable","","Controls whether the device may send a \\\"Memory Write and …",11,[[["bool",15]]]],[11,"set_special_cycle","","Controls whether the device may respond to \\\"special …",11,[[["bool",15]]]],[11,"set_bus_master","","Controls whether the device may act as a master of the …",11,[[["bool",15]]]],[11,"set_memory_space","","Controls whether the device may respond to accesses …",11,[[["bool",15]]]],[11,"set_io_space","","Controls whether the device may respond to accesses …",11,[[["bool",15]]]],[3,"StatusRegister","","Status bits indicated by the function",null,null],[11,"parity_error_detected","","Indicates taht the device has detected a parity error, …",12,[[],["bool",15]]],[11,"system_error_signaled","","Indicates that the device has detected a critical error …",12,[[],["bool",15]]],[11,"master_abort_received","","Indicates whether the transaction was aborted with a …",12,[[],["bool",15]]],[11,"target_abort_received","","Indicates whether the transaction was aborted with a …",12,[[],["bool",15]]],[11,"target_abort_signaled","","Indicates that this function generated an abort on the …",12,[[],["bool",15]]],[11,"device_select_timing","","Indicates how quickly the device can assert the <code>DEVSEL#</code> …",12,[[],["u8",15]]],[11,"master_parity_error","","Indicates whether a partity error was detected while this …",12,[[],["bool",15]]],[11,"fast_back_to_back_capable","","Indicates whether the device supports receiving …",12,[[],["bool",15]]],[11,"double_clock_capable","","Indicates whether the device can run at 66 MHz (true).",12,[[],["bool",15]]],[11,"capabilities_list_available","","Indicates whether the configuration space contains a …",12,[[],["bool",15]]],[11,"interrupt_status","","Indicates whether the device wants to signal an …",12,[[],["bool",15]]],[11,"set_parity_error_detected","","Indicates taht the device has detected a parity error, …",12,[[["bool",15]]]],[11,"set_system_error_signaled","","Indicates that the device has detected a critical error …",12,[[["bool",15]]]],[11,"set_master_abort_received","","Indicates whether the transaction was aborted with a …",12,[[["bool",15]]]],[11,"set_target_abort_received","","Indicates whether the transaction was aborted with a …",12,[[["bool",15]]]],[11,"set_target_abort_signaled","","Indicates that this function generated an abort on the …",12,[[["bool",15]]]],[11,"set_device_select_timing","","Indicates how quickly the device can assert the <code>DEVSEL#</code> …",12,[[["u8",15]]]],[11,"set_master_parity_error","","Indicates whether a partity error was detected while this …",12,[[["bool",15]]]],[11,"set_fast_back_to_back_capable","","Indicates whether the device supports receiving …",12,[[["bool",15]]]],[11,"set_double_clock_capable","","Indicates whether the device can run at 66 MHz (true).",12,[[["bool",15]]]],[11,"set_capabilities_list_available","","Indicates whether the configuration space contains a …",12,[[["bool",15]]]],[11,"set_interrupt_status","","Indicates whether the device wants to signal an …",12,[[["bool",15]]]],[3,"SelfTest","","Control and status flags for a function\'s self test …",null,null],[11,"capable","","Indicates whether the function has a self-test capability.",13,[[],["bool",15]]],[11,"start","","Setting this bit triggers the device to start its self …",13,[[],["bool",15]]],[11,"completion_code","","If a self-test is complete, then any non-zero value in …",13,[[],["u8",15]]],[11,"set_capable","","Indicates whether the function has a self-test capability.",13,[[["bool",15]]]],[11,"set_start","","Setting this bit triggers the device to start its self …",13,[[["bool",15]]]],[11,"set_completion_code","","If a self-test is complete, then any non-zero value in …",13,[[["u8",15]]]],[3,"BaseAddressRegister","","A pointer to a memory or I/O space that is used to …",null,null],[11,"address_space","","Indicates whether this BAR points to memory or I/O space",14,[[],["addressspace",4]]],[11,"prefetchable","","Indicates whether the host can safely cache the memory …",14,[[],["bool",15]]],[11,"address_width","","Size of address bus supported by this PCI function.",14,[[],["addresswidth",4]]],[11,"address_u32","","The address as a 32-bit number.",14,[[],["u32",15]]],[11,"address_u64","","The address as a 64-bit number, when combined with the …",14,[[["u32",15]],["u64",15]]],[4,"AddressSpace","","Differentiates between memory and I/O addresses",null,null],[13,"Memory","","This address is in the normal memory address space",15,null],[13,"IO","","This address is in I/O space (supported on x86/x86-64 …",15,null],[4,"AddressWidth","","Size of address bus supported by a PCI function",null,null],[13,"U32","","32-bit address bus",16,null],[13,"U64","","64-bit address bus",16,null],[13,"Invalid","","Unknown address bus width",16,null],[3,"GenericCapabilityRegister","","Structure shared by all capability registers",null,null],[11,"id","","Capability ID defined by PCI-SIG",17,[[],["u8",15]]],[11,"next_offset","","Byte offset within capability space of next capability …",17,[[],["u8",15]]],[11,"set_id","","Capability ID defined by PCI-SIG",17,[[["u8",15]]]],[11,"set_next_offset","","Byte offset within capability space of next capability …",17,[[["u8",15]]]],[17,"MAX_DEVICE","tartan_pci","Highest device number allowed by the PCI specification.",null,null],[17,"MAX_FUNCTION","","Highest function number allowed by the PCI specification.",null,null],[17,"INVALID_VENDOR","","Placeholder value that will always be returned in the …",null,null],[5,"enumerate_bus","","Iterate over the devices and functions present on the …",null,[[["configselector",3]]]],[5,"enumerate_bus_devices","","Iterate over the devices present on the specified bus.",null,[[["configselector",3]]]],[5,"enumerate_device_functions","","Iterate over the functions available on the specified …",null,[[["configselector",3]]]],[5,"check_valid","","Return true if a function is available at the specified …",null,[[["configselector",3]],["bool",15]]],[3,"CapabilityEntry","","Information to identify and locate capability registers",null,null],[12,"id","","Capability ID defined by PCI-SIG",18,null],[12,"register","","Register number in config space (offset in 4-byte units) …",18,null],[5,"iter_capabilities","","Iterate over all capabilities defined in the …",null,[[["configselector",3]]]],[11,"from","tartan_pci::access::io","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","tartan_pci::access","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","tartan_pci::config","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","tartan_pci","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"get_register","tartan_pci::access","",2,[[["configselector",3],["u16",15]],["u32",15]]],[11,"set_register","","",2,[[["u32",15],["configselector",3],["u16",15]]]],[11,"get_register","tartan_pci::access::io","",19,[[["configselector",3],["u16",15]],["u32",15]]],[11,"set_register","","",19,[[["u32",15],["configselector",3],["u16",15]]]],[11,"from","tartan_pci::config","",4,[[["u32",15]]]],[11,"from","","",5,[[["u32",15]]]],[11,"from","","",6,[[["u32",15]]]],[11,"from","","",7,[[["u32",15]]]],[11,"from","","",8,[[["u32",15]]]],[11,"from","","",9,[[["u32",15]]]],[11,"from","","",10,[[["u32",15]]]],[11,"from","","",11,[[["u16",15]]]],[11,"from","","",12,[[["u16",15]]]],[11,"from","","",13,[[["u8",15]]]],[11,"from","","",17,[[["u32",15]]]],[11,"fmt","tartan_pci::access","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_pci::access::io","",19,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_pci::config","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"eq","tartan_pci::access","",1,[[["configselector",3]],["bool",15]]],[11,"ne","","",1,[[["configselector",3]],["bool",15]]],[11,"eq","","",2,[[["memmapconfigaccess",3]],["bool",15]]],[11,"ne","","",2,[[["memmapconfigaccess",3]],["bool",15]]],[11,"eq","tartan_pci::access::io","",19,[[["ioconfigaccess",3]],["bool",15]]],[11,"eq","tartan_pci::config","",4,[[["headerregister0",3]],["bool",15]]],[11,"ne","","",4,[[["headerregister0",3]],["bool",15]]],[11,"eq","","",5,[[["headerregister1",3]],["bool",15]]],[11,"ne","","",5,[[["headerregister1",3]],["bool",15]]],[11,"eq","","",6,[[["headerregister2",3]],["bool",15]]],[11,"ne","","",6,[[["headerregister2",3]],["bool",15]]],[11,"eq","","",7,[[["headerregister3",3]],["bool",15]]],[11,"ne","","",7,[[["headerregister3",3]],["bool",15]]],[11,"eq","","",8,[[["type0headerregister11",3]],["bool",15]]],[11,"ne","","",8,[[["type0headerregister11",3]],["bool",15]]],[11,"eq","","",9,[[["type0headerregister13",3]],["bool",15]]],[11,"ne","","",9,[[["type0headerregister13",3]],["bool",15]]],[11,"eq","","",10,[[["type0headerregister15",3]],["bool",15]]],[11,"ne","","",10,[[["type0headerregister15",3]],["bool",15]]],[11,"eq","","",11,[[["commandregister",3]],["bool",15]]],[11,"ne","","",11,[[["commandregister",3]],["bool",15]]],[11,"eq","","",12,[[["statusregister",3]],["bool",15]]],[11,"ne","","",12,[[["statusregister",3]],["bool",15]]],[11,"eq","","",13,[[["selftest",3]],["bool",15]]],[11,"ne","","",13,[[["selftest",3]],["bool",15]]],[11,"eq","","",14,[[["baseaddressregister",3]],["bool",15]]],[11,"ne","","",14,[[["baseaddressregister",3]],["bool",15]]],[11,"eq","","",15,[[["addressspace",4]],["bool",15]]],[11,"eq","","",16,[[["addresswidth",4]],["bool",15]]],[11,"eq","","",17,[[["genericcapabilityregister",3]],["bool",15]]],[11,"ne","","",17,[[["genericcapabilityregister",3]],["bool",15]]],[11,"clone","tartan_pci::access","",1,[[],["configselector",3]]],[11,"clone","","",2,[[],["memmapconfigaccess",3]]],[11,"clone","tartan_pci::access::io","",19,[[],["ioconfigaccess",3]]],[11,"clone","tartan_pci::config","",4,[[],["headerregister0",3]]],[11,"clone","","",5,[[],["headerregister1",3]]],[11,"clone","","",6,[[],["headerregister2",3]]],[11,"clone","","",7,[[],["headerregister3",3]]],[11,"clone","","",8,[[],["type0headerregister11",3]]],[11,"clone","","",9,[[],["type0headerregister13",3]]],[11,"clone","","",10,[[],["type0headerregister15",3]]],[11,"clone","","",11,[[],["commandregister",3]]],[11,"clone","","",12,[[],["statusregister",3]]],[11,"clone","","",13,[[],["selftest",3]]],[11,"clone","","",14,[[],["baseaddressregister",3]]],[11,"clone","","",15,[[],["addressspace",4]]],[11,"clone","","",16,[[],["addresswidth",4]]],[11,"clone","","",17,[[],["genericcapabilityregister",3]]],[11,"default","tartan_pci::access","",1,[[],["configselector",3]]],[11,"default","tartan_pci::access::io","",19,[[],["ioconfigaccess",3]]],[11,"default","tartan_pci::config","",4,[[],["headerregister0",3]]],[11,"default","","",5,[[],["headerregister1",3]]],[11,"default","","",6,[[],["headerregister2",3]]],[11,"default","","",7,[[],["headerregister3",3]]],[11,"default","","",8,[[],["type0headerregister11",3]]],[11,"default","","",9,[[],["type0headerregister13",3]]],[11,"default","","",10,[[],["type0headerregister15",3]]],[11,"default","","",11,[[],["commandregister",3]]],[11,"default","","",12,[[],["statusregister",3]]],[11,"default","","",13,[[],["selftest",3]]],[11,"default","","",14,[[],["baseaddressregister",3]]],[11,"default","","",17,[[],["genericcapabilityregister",3]]]],"p":[[8,"ConfigAccess"],[3,"ConfigSelector"],[3,"MemMapConfigAccess"],[8,"FixedConfigRegister"],[3,"HeaderRegister0"],[3,"HeaderRegister1"],[3,"HeaderRegister2"],[3,"HeaderRegister3"],[3,"Type0HeaderRegister11"],[3,"Type0HeaderRegister13"],[3,"Type0HeaderRegister15"],[3,"CommandRegister"],[3,"StatusRegister"],[3,"SelfTest"],[3,"BaseAddressRegister"],[4,"AddressSpace"],[4,"AddressWidth"],[3,"GenericCapabilityRegister"],[3,"CapabilityEntry"],[3,"IOConfigAccess"]]},\
"tartan_serial":{"doc":"Support for Universal Asynchronous Receiver/Transmitter …","i":[[0,"model_pl011","tartan_serial","Driver for Arm\'s <code>PrimeCell</code> PL011 UART",null,null],[3,"UARTPL011","tartan_serial::model_pl011","Driver for the PL011 UART.",null,null],[12,"register_block","","Memory-mapped registers for this device.",0,null],[12,"base_clock_rate","","Frequency, in hertz, of the clock input to the UART.",0,null],[3,"RegisterBlock","","Memory-mapped registers for PL011 UART.",null,null],[0,"model_16550","tartan_serial","Driver for the common UART interface provided on PCs that …",null,null],[8,"RegisterAccess","tartan_serial::model_16550","Strategy that provides access to registers for a 16550 …",null,null],[10,"read","","Read 8-bit register at the given port",1,[[["u16",15]],["u8",15]]],[10,"write","","Write 8-bit register at the given port",1,[[["u16",15],["u8",15]]]],[3,"ActualRegisterAccess","","Strategy that reads and writes registers from I/O space.",null,null],[3,"UART16550","","Driver for a PC UART based on the National Semiconductor …",null,null],[11,"new","","Create a driver for the UART with the given base I/O …",2,[[["u16",15]]]],[8,"UART","tartan_serial","High-level interface for UART drivers.",null,null],[10,"reset","","Stop transmission, clear buffers, and set the device to a …",3,[[]]],[10,"line_mode","","Get the device\'s active line protocol mode.",3,[[],["linemode",3]]],[10,"set_line_mode","","Update the device\'s line protocol mode.",3,[[["linemode",3]]]],[10,"write","","Send the given data through the UART. Blocks until all …",3,[[]]],[3,"UARTWriteAdapter","","Newtype wrapper that allows a UART implementation to be …",null,null],[12,"0","","",4,null],[3,"LineMode","","Speed and other line protocol settings.",null,null],[12,"baud","","Bits per second (including non-data bits) of line …",5,null],[12,"data_bits","","Number of data bits per word in line protocol.",5,null],[12,"parity","","Parity setting for line protocol.",5,null],[12,"extended_stop","","Use 1.5 or 2 stop bits (depending on baud rate) if set. …",5,null],[4,"Parity","","Parity setting for line protocol.",null,null],[13,"None","","No parity bit.",6,null],[13,"Odd","","Set parity so that there are an odd number of high bits …",6,null],[13,"Even","","Set parity so that there are an even number of high bits …",6,null],[13,"High","","Set parity bit high unconditionally (sticky).",6,null],[13,"Low","","Set parity bit low unconditionally (sticky).",6,null],[3,"NullUART","","Dummy UART driver that drops outgoing data and never …",null,null],[11,"from","tartan_serial::model_pl011","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","tartan_serial::model_16550","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","tartan_serial","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"read","tartan_serial::model_16550","",8,[[["u16",15]],["u8",15]]],[11,"write","","",8,[[["u16",15],["u8",15]]]],[11,"reset","tartan_serial::model_pl011","",0,[[]]],[11,"line_mode","","",0,[[],["linemode",3]]],[11,"set_line_mode","","",0,[[["linemode",3]]]],[11,"write","","",0,[[]]],[11,"reset","tartan_serial::model_16550","",2,[[]]],[11,"line_mode","","",2,[[],["linemode",3]]],[11,"set_line_mode","","",2,[[["linemode",3]]]],[11,"write","","",2,[[]]],[11,"reset","tartan_serial","",9,[[]]],[11,"set_line_mode","","",9,[[["linemode",3]]]],[11,"write","","",9,[[]]],[11,"line_mode","","",9,[[],["linemode",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"eq","","",5,[[["linemode",3]],["bool",15]]],[11,"ne","","",5,[[["linemode",3]],["bool",15]]],[11,"eq","","",6,[[["parity",4]],["bool",15]]],[11,"write_str","","",4,[[["str",15]],["result",6]]],[11,"clone","","",5,[[],["linemode",3]]],[11,"clone","","",6,[[],["parity",4]]],[11,"default","tartan_serial::model_16550","",8,[[],["actualregisteraccess",3]]],[11,"default","tartan_serial","",5,[[],["linemode",3]]],[11,"default","","",6,[[]]]],"p":[[3,"UARTPL011"],[8,"RegisterAccess"],[3,"UART16550"],[8,"UART"],[3,"UARTWriteAdapter"],[3,"LineMode"],[4,"Parity"],[3,"RegisterBlock"],[3,"ActualRegisterAccess"],[3,"NullUART"]]},\
"tartan_uefi":{"doc":"Support for Unified Extensible Firmware Interface","i":[[0,"allocator","tartan_uefi","<code>BootServices</code>-based heap allocator to support the standard …",null,null],[3,"BootAllocator","tartan_uefi::allocator","",null,null],[0,"global","tartan_uefi","Static pointer to the [<code>SystemTable</code>], used by features …",null,null],[7,"SYSTEM_TABLE","tartan_uefi::global","",null,null],[0,"io","tartan_uefi","[<code>SimpleTextOutput</code>]-based [<code>Write</code>] implementation to …",null,null],[3,"OutputStream","tartan_uefi::io","",null,null],[12,"last_result","","",0,null],[11,"new","","",0,[[["simpletextoutput",3]]]],[3,"Logger","","",null,null],[12,"0","","",1,null],[5,"encode_c_utf16","","Convert a Rust string to a buffer containing a …",null,[[["str",15]],["box",3]]],[0,"proto","tartan_uefi","",null,null],[8,"Protocol","tartan_uefi::proto","",null,null],[18,"PROTOCOL_ID","","",2,null],[3,"SimpleTextInput","","",null,null],[3,"SimpleTextOutput","","",null,null],[12,"reset","","",3,null],[12,"output_string","","",3,null],[12,"test_string","","",3,null],[12,"mode","","",3,null],[3,"SimpleTextOutputMode","","",null,null],[12,"max_mode","","",4,null],[12,"mode","","",4,null],[12,"attribute","","",4,null],[12,"cursor_column","","",4,null],[12,"cursor_row","","",4,null],[12,"cursor_visible","","",4,null],[3,"LoadedImage","","",null,null],[12,"revision","","",5,null],[12,"parent_handle","","",5,null],[12,"system_table","","",5,null],[12,"device_handle","","",5,null],[12,"load_options_size","","",5,null],[12,"load_options","","",5,null],[12,"image_base","","",5,null],[12,"image_size","","",5,null],[12,"image_code_type","","",5,null],[12,"image_data_type","","",5,null],[12,"unload","","",5,null],[18,"MIN_REVISION","","",5,null],[3,"SimpleFileSystem","","Protocol for accessing a file system supported by UEFI …",null,null],[12,"revision","","Implemented revision of the SimpleFileSystem protocol.",6,null],[18,"MIN_REVISION","","Minimum supported [<code>SimpleFileSystem::revision</code>]. Future …",6,null],[11,"open_volume","","Get a handle to the root of the file system.",6,[[],[["result",4],["status",3],["file",3]]]],[3,"File","","Protocol for accessing a file or directory.",null,null],[12,"revision","","Implemented revision of the File protocol.",7,null],[18,"MIN_REVISION","","Minimum supported [<code>SimpleFileSystem::revision</code>]. Future …",7,null],[11,"open","","Get a handle to a new file, relative to the directory …",7,[[["fileattributes",3],["filemode",3]],[["result",4],["status",3],["file",3]]]],[11,"close","","Flush and close the file or directory represented by the …",7,[[]]],[11,"delete","","Delete the file or directory represented by the current …",7,[[],["status",3]]],[11,"read","","Read file contents or a directory entry into the buffer.",7,[[],[["usize",15],["status",3],["result",4]]]],[11,"write","","Write the contents of <code>buffer</code> out to the current position.",7,[[],[["usize",15],["status",3],["result",4]]]],[11,"get_position","","Get the handle\'s current position in the file.",7,[[],[["result",4],["status",3],["u64",15]]]],[11,"set_position","","Set the handle\'s current position in the file.",7,[[["u64",15]],["result",6]]],[11,"flush","","Write any buffered changes.",7,[[],["result",6]]],[3,"FileMode","","Controls how a file is opened.",null,null],[18,"Read","","File will be read, and should exist already.",8,null],[18,"ReadWrite","","File will be read and written, and should exist already.",8,null],[18,"ReadWriteCreate","","File will be read and written, and will be created if it …",8,null],[11,"name","","The name of the enum variant in code, if one is defined …",8,[[],[["option",4],["str",15]]]],[3,"FileAttributes","","Basic properties of a file or directory as defined by the …",null,null],[17,"PAGE_SIZE","tartan_uefi","Constant page size defined by UEFI specification for […",null,null],[3,"Handle","","",null,null],[18,"NULL","","",9,null],[3,"Revision","","",null,null],[18,"V2_80","","",10,null],[18,"V2_70","","",10,null],[18,"V2_60","","",10,null],[18,"V2_50","","",10,null],[18,"V2_40","","",10,null],[18,"V2_31","","",10,null],[18,"V2_30","","",10,null],[18,"V2_20","","",10,null],[18,"V2_10","","",10,null],[18,"V2_00","","",10,null],[18,"V1_10","","",10,null],[18,"V1_02","","",10,null],[11,"name","","The name of the enum variant in code, if one is defined …",10,[[],[["option",4],["str",15]]]],[18,"LATEST","","",10,null],[11,"major_version","","",10,[[],["u16",15]]],[11,"minor_version","","",10,[[],["u16",15]]],[11,"fix_version","","",10,[[],["u16",15]]],[6,"Result","","",null,null],[3,"Status","","",null,null],[18,"Success","","",11,null],[18,"WarnUnknownGlyph","","",11,null],[18,"WarnDeleteFailure","","",11,null],[18,"WarnWriteFailure","","",11,null],[18,"WarnBufferTooSmall","","",11,null],[18,"WarnStaleData","","",11,null],[18,"WarnFileSystem","","",11,null],[18,"WarnResetRequired","","",11,null],[18,"LoadError","","",11,null],[18,"InvalidParameter","","",11,null],[18,"Unsupported","","",11,null],[18,"BadBufferSize","","",11,null],[18,"BufferTooSmall","","",11,null],[18,"NotReady","","",11,null],[18,"DeviceError","","",11,null],[18,"WriteProtected","","",11,null],[18,"OutOfResources","","",11,null],[18,"VolumeCorrupted","","",11,null],[18,"VolumeFull","","",11,null],[18,"NoMedia","","",11,null],[18,"MediaChanged","","",11,null],[18,"NotFound","","",11,null],[18,"AccessDenied","","",11,null],[18,"NoResponse","","",11,null],[18,"NoMapping","","",11,null],[18,"Timeout","","",11,null],[18,"NotStarted","","",11,null],[18,"AlreadyStarted","","",11,null],[18,"Aborted","","",11,null],[18,"ICMPError","","",11,null],[18,"TFTPError","","",11,null],[18,"ProtocolError","","",11,null],[18,"IncompatibleVersion","","",11,null],[18,"SecurityViolation","","",11,null],[18,"CRCError","","",11,null],[18,"EndOfMedia","","",11,null],[18,"EndOfFile","","",11,null],[18,"InvalidLanguage","","",11,null],[18,"CompromisedData","","",11,null],[18,"HTTPError","","",11,null],[11,"name","","The name of the enum variant in code, if one is defined …",11,[[],[["option",4],["str",15]]]],[18,"ERROR_BIT","","",11,null],[11,"is_error","","",11,[[],["bool",15]]],[11,"is_warning","","",11,[[],["bool",15]]],[11,"into_result","","Wraps success <em>and</em> warning codes in [<code>Ok</code>], and error codes …",11,[[],["result",6]]],[8,"Table","","",null,null],[18,"SIGNATURE","","",12,null],[18,"MIN_REVISION","","",12,null],[10,"header","","",12,[[],["tableheader",3]]],[11,"verify","","",12,[[]]],[11,"verify_signature","","",12,[[]]],[11,"verify_revision","","",12,[[]]],[11,"verify_size","","",12,[[]]],[11,"verify_crc32","","",12,[[]]],[3,"TableHeader","","",null,null],[12,"signature","","",13,null],[12,"revision","","",13,null],[12,"header_size","","",13,null],[12,"crc32","","",13,null],[3,"SystemTable","","",null,null],[12,"header","","",14,null],[12,"firmware_vendor","","",14,null],[12,"firmware_revision","","",14,null],[12,"console_in_handle","","",14,null],[12,"console_in","","",14,null],[12,"console_out_handle","","",14,null],[12,"console_out","","",14,null],[12,"std_err_handle","","",14,null],[12,"std_err","","",14,null],[12,"runtime_services","","",14,null],[12,"boot_services","","",14,null],[12,"config_entry_count","","",14,null],[12,"config_table","","",14,null],[11,"exit_boot_services","","Safe(r) wrapper around [<code>BootServices::exit_boot_services</code>] …",14,[[["handle",3]],["memorymap",3]]],[3,"RuntimeServices","","",null,null],[12,"header","","",15,null],[3,"BootServices","","",null,null],[12,"header","","",16,null],[12,"free_pages","","",16,null],[12,"allocate_pool","","",16,null],[12,"free_pool","","",16,null],[12,"handle_protocol","","",16,null],[11,"allocate_pages","","Allocate a number of pages of a given type of memory, …",16,[[["usize",15],["option",4],["u64",15],["memorytype",3],["allocatetype",3]],[["result",4],["status",3],["u64",15]]]],[11,"get_memory_map","","Get a map representing the status of all available memory.",16,[[],["memorymap",3]]],[11,"get_protocol","","Get the implementation of a protocol offered by the given …",16,[[["handle",3]],[["result",4],["status",3]]]],[11,"exit_boot_services","","Signal to UEFI that the OS is now taking over.",16,[[["usize",15],["handle",3]],["result",6]]],[3,"GUID","","",null,null],[11,"from","","",17,[[["u128",15]]]],[3,"ConfigurationTable","","",null,null],[12,"vendor_guid","","",18,null],[18,"ACPI_20_GUID","","",18,null],[18,"ACPI_GUID","","",18,null],[18,"SAL_SYSTEM_GUID","","",18,null],[18,"SMBIOS_GUID","","",18,null],[18,"SMBIOS3_GUID","","",18,null],[18,"MPS_GUID","","",18,null],[3,"MemoryDescriptor","","",null,null],[12,"memory_type","","",19,null],[12,"physical_start","","",19,null],[12,"virtual_start","","",19,null],[12,"page_count","","",19,null],[12,"attributes","","",19,null],[3,"MemoryMap","","",null,null],[12,"raw_map","","",20,null],[12,"key","","",20,null],[12,"descriptor_size","","",20,null],[12,"descriptor_version","","",20,null],[18,"MIN_VERSION","","",20,null],[11,"new","","",20,[[]]],[11,"verify","","",20,[[]]],[11,"verify_version","","",20,[[]]],[11,"verify_descriptor_size","","",20,[[]]],[11,"verify_map","","",20,[[]]],[11,"iter","","Iterate over memory descriptors contained in the map.",20,[[]]],[3,"MemoryType","","",null,null],[18,"Reserved","","Memory that is never available for use",21,null],[18,"LoaderCode","","Memory used for UEFI application code.",21,null],[18,"LoaderData","","Memory allocated by UEFI applications.",21,null],[18,"BootServicesCode","","Memory used for drivers that provide [<code>BootServices</code>].",21,null],[18,"BootServicesData","","Memory allocated by drivers that provide [<code>BootServices</code>].",21,null],[18,"RuntimeServicesCode","","Memory used for drivers that provide [<code>RuntimeServices</code>].",21,null],[18,"RuntimeServicesData","","Memory allocated by drivers that provide [<code>RuntimeServices</code>]…",21,null],[18,"Conventional","","Free memory.",21,null],[18,"Unusable","","Damaged memory modules.",21,null],[18,"ACPIReclaim","","Memory that can be used after the OS initializes ACPI.",21,null],[18,"ACPINonVolatile","","Memory that must be preserved in ACPI states S1–S3.",21,null],[18,"MappedIO","","Memory mapped to device I/O.",21,null],[18,"MappedIOPortSpace","","Memory mapped to I/O ports.",21,null],[18,"ProcessorCode","","Memory used by processor firmware code.",21,null],[18,"Persistent","","Free nonvolatile memory.",21,null],[18,"MinOEMDefined","","Beginning of range (inclusive) for OEM-specific memory …",21,null],[18,"MaxOEMDefined","","End of range (inclusive) for OEM-specific memory types",21,null],[18,"MinOSDefined","","Beginning of range (inclusive) for operating …",21,null],[18,"MaxOSDefined","","End of range (inclusive) for operating system-specific …",21,null],[11,"name","","The name of the enum variant in code, if one is defined …",21,[[],[["option",4],["str",15]]]],[3,"AllocateType","","",null,null],[18,"AnyAddress","","",22,null],[18,"MaxAddress","","",22,null],[18,"ExactAddress","","",22,null],[11,"name","","The name of the enum variant in code, if one is defined …",22,[[],[["option",4],["str",15]]]],[3,"MemoryAttributes","","",null,null],[11,"supports_uncacheable","","",23,[[],["bool",15]]],[11,"supports_write_combining","","",23,[[],["bool",15]]],[11,"supports_write_through","","",23,[[],["bool",15]]],[11,"supports_write_back","","",23,[[],["bool",15]]],[11,"supports_uncacheable_sem","","",23,[[],["bool",15]]],[11,"supports_write_protect","","",23,[[],["bool",15]]],[11,"supports_read_protect","","",23,[[],["bool",15]]],[11,"supports_exec_protect","","",23,[[],["bool",15]]],[11,"nonvolatile","","",23,[[],["bool",15]]],[11,"more_reliable","","",23,[[],["bool",15]]],[11,"supports_read_only","","",23,[[],["bool",15]]],[11,"specific_purpose","","",23,[[],["bool",15]]],[11,"supports_cpu_crypto","","",23,[[],["bool",15]]],[11,"runtime","","",23,[[],["bool",15]]],[11,"set_supports_uncacheable","","",23,[[["bool",15]]]],[11,"set_supports_write_combining","","",23,[[["bool",15]]]],[11,"set_supports_write_through","","",23,[[["bool",15]]]],[11,"set_supports_write_back","","",23,[[["bool",15]]]],[11,"set_supports_uncacheable_sem","","",23,[[["bool",15]]]],[11,"set_supports_write_protect","","",23,[[["bool",15]]]],[11,"set_supports_read_protect","","",23,[[["bool",15]]]],[11,"set_supports_exec_protect","","",23,[[["bool",15]]]],[11,"set_nonvolatile","","",23,[[["bool",15]]]],[11,"set_more_reliable","","",23,[[["bool",15]]]],[11,"set_supports_read_only","","",23,[[["bool",15]]]],[11,"set_specific_purpose","","",23,[[["bool",15]]]],[11,"set_supports_cpu_crypto","","",23,[[["bool",15]]]],[11,"set_runtime","","",23,[[["bool",15]]]],[3,"OpenProtocolAttributes","","",null,null],[18,"ByHandle","","",24,null],[18,"Get","","",24,null],[18,"Test","","",24,null],[18,"ByChild","","",24,null],[18,"ByDriver","","",24,null],[18,"Exclusive","","",24,null],[11,"name","","The name of the enum variant in code, if one is defined …",24,[[],[["option",4],["str",15]]]],[14,"writeln_result","","Write formatted data to an [<code>OutputStream</code>] and return the …",null,null],[11,"from","tartan_uefi::allocator","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","tartan_uefi::io","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","tartan_uefi::proto","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"from","tartan_uefi","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"header","","",14,[[],["tableheader",3]]],[11,"header","","",15,[[],["tableheader",3]]],[11,"header","","",16,[[],["tableheader",3]]],[11,"from","","",10,[[["u32",15]]]],[11,"from","","",11,[[["usize",15]]]],[11,"from","","",28,[[["status",3]]]],[11,"from","","",17,[[["u128",15]]]],[11,"from","","",21,[[["u32",15]]]],[11,"from","","",22,[[["u32",15]]]],[11,"from","","",23,[[["u64",15]]]],[11,"from","","",24,[[["u32",15]]]],[11,"from","tartan_uefi::proto","",8,[[["u64",15]]]],[11,"from","","",27,[[["u64",15]]]],[11,"fmt","tartan_uefi","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_uefi::proto","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","tartan_uefi","",10,[[["formatter",3]],["result",6]]],[11,"eq","","",9,[[["handle",3]],["bool",15]]],[11,"ne","","",9,[[["handle",3]],["bool",15]]],[11,"eq","","",10,[[["revision",3]],["bool",15]]],[11,"ne","","",10,[[["revision",3]],["bool",15]]],[11,"eq","","",11,[[["status",3]],["bool",15]]],[11,"ne","","",11,[[["status",3]],["bool",15]]],[11,"eq","","",17,[[["guid",3]],["bool",15]]],[11,"ne","","",17,[[["guid",3]],["bool",15]]],[11,"eq","","",21,[[["memorytype",3]],["bool",15]]],[11,"ne","","",21,[[["memorytype",3]],["bool",15]]],[11,"eq","","",22,[[["allocatetype",3]],["bool",15]]],[11,"ne","","",22,[[["allocatetype",3]],["bool",15]]],[11,"eq","","",23,[[["memoryattributes",3]],["bool",15]]],[11,"ne","","",23,[[["memoryattributes",3]],["bool",15]]],[11,"eq","","",24,[[["openprotocolattributes",3]],["bool",15]]],[11,"ne","","",24,[[["openprotocolattributes",3]],["bool",15]]],[11,"eq","tartan_uefi::proto","",4,[[["simpletextoutputmode",3]],["bool",15]]],[11,"ne","","",4,[[["simpletextoutputmode",3]],["bool",15]]],[11,"eq","","",8,[[["filemode",3]],["bool",15]]],[11,"ne","","",8,[[["filemode",3]],["bool",15]]],[11,"eq","","",27,[[["fileattributes",3]],["bool",15]]],[11,"ne","","",27,[[["fileattributes",3]],["bool",15]]],[11,"cmp","tartan_uefi","",10,[[["revision",3]],["ordering",4]]],[11,"cmp","","",11,[[["status",3]],["ordering",4]]],[11,"cmp","","",21,[[["memorytype",3]],["ordering",4]]],[11,"cmp","","",22,[[["allocatetype",3]],["ordering",4]]],[11,"cmp","","",24,[[["openprotocolattributes",3]],["ordering",4]]],[11,"cmp","tartan_uefi::proto","",8,[[["filemode",3]],["ordering",4]]],[11,"partial_cmp","tartan_uefi","",10,[[["revision",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",11,[[["status",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",21,[[["memorytype",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["allocatetype",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",24,[[["openprotocolattributes",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tartan_uefi::proto","",8,[[["filemode",3]],[["ordering",4],["option",4]]]],[11,"hash","tartan_uefi","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",24,[[]]],[11,"hash","tartan_uefi::proto","",8,[[]]],[11,"write_str","tartan_uefi::io","",0,[[["str",15]],["result",6]]],[11,"write_char","","",0,[[["char",15]],["result",6]]],[11,"clone","","",0,[[],["outputstream",3]]],[11,"clone","tartan_uefi","",9,[[],["handle",3]]],[11,"clone","","",10,[[],["revision",3]]],[11,"clone","","",11,[[],["status",3]]],[11,"clone","","",17,[[],["guid",3]]],[11,"clone","","",21,[[],["memorytype",3]]],[11,"clone","","",22,[[],["allocatetype",3]]],[11,"clone","","",23,[[],["memoryattributes",3]]],[11,"clone","","",24,[[],["openprotocolattributes",3]]],[11,"clone","tartan_uefi::proto","",4,[[],["simpletextoutputmode",3]]],[11,"clone","","",8,[[],["filemode",3]]],[11,"clone","","",27,[[],["fileattributes",3]]],[11,"default","tartan_uefi","",10,[[],["revision",3]]],[11,"default","","",11,[[],["status",3]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[],["memorytype",3]]],[11,"default","","",22,[[],["allocatetype",3]]],[11,"default","","",23,[[],["memoryattributes",3]]],[11,"default","","",24,[[],["openprotocolattributes",3]]],[11,"default","tartan_uefi::proto","",8,[[],["filemode",3]]],[11,"default","","",27,[[],["fileattributes",3]]],[11,"alloc","tartan_uefi::allocator","",25,[[["layout",3]]]],[11,"dealloc","","",25,[[["layout",3]]]],[11,"name","tartan_uefi","",10,[[],[["option",4],["str",15]]]],[11,"name","","",11,[[],[["option",4],["str",15]]]],[11,"name","","",21,[[],[["option",4],["str",15]]]],[11,"name","","",22,[[],[["option",4],["str",15]]]],[11,"name","","",24,[[],[["option",4],["str",15]]]],[11,"name","tartan_uefi::proto","",8,[[],[["option",4],["str",15]]]],[11,"log","tartan_uefi::io","",1,[[["record",3]]]],[11,"enabled","","",1,[[["metadata",3]],["bool",15]]],[11,"flush","","",1,[[]]]],"p":[[3,"OutputStream"],[3,"Logger"],[8,"Protocol"],[3,"SimpleTextOutput"],[3,"SimpleTextOutputMode"],[3,"LoadedImage"],[3,"SimpleFileSystem"],[3,"File"],[3,"FileMode"],[3,"Handle"],[3,"Revision"],[3,"Status"],[8,"Table"],[3,"TableHeader"],[3,"SystemTable"],[3,"RuntimeServices"],[3,"BootServices"],[3,"GUID"],[3,"ConfigurationTable"],[3,"MemoryDescriptor"],[3,"MemoryMap"],[3,"MemoryType"],[3,"AllocateType"],[3,"MemoryAttributes"],[3,"OpenProtocolAttributes"],[3,"BootAllocator"],[3,"SimpleTextInput"],[3,"FileAttributes"],[6,"Result"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);