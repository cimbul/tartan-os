var searchIndex = JSON.parse('{\
"aml_parse":{"doc":"","t":"DLLLLLLFLLLLL","n":["UsageError","borrow","borrow_mut","fmt","fmt","from","into","main","provide","to_string","try_from","try_into","type_id"],"q":[[0,"aml_parse"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],[[4,[3]]]],[[1,2],5],[[]],[[]],[[],[[4,[[7,[6]]]]]],[8],[[],9],[[],4],[[],4],[[],10]],"c":[],"p":[[3,"UsageError"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[8,"Error"],[3,"Box"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"tartan_acpi":{"doc":"Support for Advanced Configuration and Power Interface","t":"DDSSDSDDSSDSSSSSSSSDDSSSSSSAMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLMMMMMMLLLMMLLLLLLLLLLMMMMLMLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLMLMLLLLLLLLMMLLLLLMMMMOLLMLMMMMMMMMMMMMMMMMLMLMMMMMMLMMMLLMLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLDMLLALLLMLAAAALLLDNNENNNEENNNNNDNENNNNDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNEDNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNDDNENNEEGMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLFLLLLLLLLLLLLLLLLLLIGIAAAKFAAFFQDDIMLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMLLLKLLLLLLLLLNEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNEDNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNDNNNNNNNNENNENNNNNNNENNNNNNNNNNNNNNNNNNNNEENNNNNNNNNNNNNNENNNNNNEENNNNNNNNNNNENNNNNNNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["AccessSize","AddressSpace","Byte","DWord","DescriptionHeader","EmbeddedController","FixedDescription","FixedFlags","FunctionalFixed","GeneralPurposeIo","GenericAddress","GenericSerialBus","IPMI","OEMDefinedMax","OEMDefinedMin","PCIBARTarget","PCIConfiguration","PlatformCommunicationsChannel","QWord","RootDescriptionPointerV1","RootDescriptionPointerV2","SMBus","SystemCMOS","SystemIO","SystemMemory","Undefined","Word","aml","arm_boot_architecture_flags","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c1_supported","c2_multi_cpu_supported","cache_flush_stride_count","cache_flush_stride_width","checksum","checksum","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cpu_c2_latency","cpu_c3_latency","cpu_duty_cycle_register_offset","cpu_duty_cycle_register_width","creator_id","creator_revision","default","default","default","diff_description_addr_32","diff_description_addr_64","dock_capable","eq","eq","eq","eq","eq","eq","eq","eq","execute_instruction_after_slp_typ","extended_checksum","extended_description_table_addr","firmware_api_ctrl_addr_32","firmware_api_ctrl_addr_64","fixed_description_reset_supported","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_apic_cluster_model","force_apic_physical_destination_mode","from","from","from","from","from","from","from","from","from","from","from","general_event_port_block_0_32","general_event_port_block_0_64","general_event_port_block_0_length","general_event_port_block_1_32","general_event_port_block_1_64","general_event_port_block_1_base","general_event_port_block_1_length","hardware_reduced_acpi","hash","hash","header","headless","hypervisor_vendor","into","into","into","into","into","into","into","into","length","length","low_power_s0_idle","name","name","name","name","oem_id","oem_id","oem_revision","oem_table_id","parser_fn","partial_cmp","partial_cmp","pc_boot_architecture_flags","pci_express_wake","pm_cntrl_port_block_1_length","pm_cntrl_port_block_1a_32","pm_cntrl_port_block_1b_32","pm_cntrl_port_block_2_32","pm_cntrl_port_block_2_length","pm_control_port_block_1a_64","pm_control_port_block_1b_64","pm_control_port_block_2_64","pm_event_port_block_1_length","pm_event_port_block_1a_32","pm_event_port_block_1a_64","pm_event_port_block_1b_32","pm_event_port_block_1b_64","pm_timer_port_block_32","pm_timer_port_block_64","pm_timer_port_block_length","power_button_is_control_method_device","preferred_power_profile","remote_power_on_supported","reset_register","reset_register_value","revision","revision","revision_minor","root_description_table_addr","rtc_can_wake_s4","rtc_century_alarm_index","rtc_day_alarm_index","rtc_month_alarm_index","rtc_not_fixed","rtc_status_valid_after_s4","sci_interrupt","sealed_case","set_c1_supported","set_c2_multi_cpu_supported","set_dock_capable","set_execute_instruction_after_slp_typ","set_fixed_description_reset_supported","set_force_apic_cluster_model","set_force_apic_physical_destination_mode","set_hardware_reduced_acpi","set_headless","set_low_power_s0_idle","set_pci_express_wake","set_power_button_is_control_method_device","set_remote_power_on_supported","set_rtc_can_wake_s4","set_rtc_not_fixed","set_rtc_status_valid_after_s4","set_sealed_case","set_sleep_button_is_control_method_device","set_timer_value_32_bit","set_use_platform_clock","set_x86_wbinvd_requires_flush","set_x86_wbinvd_supported","signature","signature","sleep_button_is_control_method_device","sleep_control_register_addr","sleep_status_register_addr","smi_command_acpi_disable","smi_command_acpi_enable","smi_command_c_state_enable","smi_command_cpu_state_enable","smi_command_port","smi_command_s4_bios_enter","timer_value_32_bit","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_platform_clock","v1","with_c1_supported","with_c2_multi_cpu_supported","with_dock_capable","with_execute_instruction_after_slp_typ","with_fixed_description_reset_supported","with_force_apic_cluster_model","with_force_apic_physical_destination_mode","with_hardware_reduced_acpi","with_headless","with_low_power_s0_idle","with_pci_express_wake","with_power_button_is_control_method_device","with_remote_power_on_supported","with_rtc_can_wake_s4","with_rtc_not_fixed","with_rtc_status_valid_after_s4","with_sealed_case","with_sleep_button_is_control_method_device","with_timer_value_32_bit","with_use_platform_clock","with_x86_wbinvd_requires_flush","with_x86_wbinvd_supported","x86_wbinvd_requires_flush","x86_wbinvd_supported","AMLTable","body","borrow","borrow_mut","data","eq","fmt","from","header","into","misc","name","parse","term","try_from","try_into","type_id","Buffer","Buffer","Byte","ComputationalData","DWord","Data","Data","DataObject","DataRefObject","DefinitionBlockHandle","Name","ObjectReference","One","Ones","Package","Package","PackageElement","QWord","Ref","Revision","String","VarPackage","VarPackage","Word","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","initializer","initializers","initializers","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Arg0","Arg1","Arg2","Arg3","Arg4","Arg5","Arg6","ArgObject","DebugObject","Local0","Local1","Local2","Local3","Local4","Local5","Local6","Local7","LocalObject","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","parse","parse","parse","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Arg","Debug","Local","Name","Name","NameSeg","NameString","Parent","PathAnchor","Reference","Root","SimpleName","SuperName","Target","anchor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","empty","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","new","new_parent","new_root","parse","parse","parse","parse","parse","path","resolve_as_decl","resolve_as_ref","to_owned","to_owned","to_owned","to_owned","to_owned","to_path","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AMLParseError","AMLParseResult","Parse","data","misc","name","parse","parse_table","state","term","parse_target","super_name_minus_invoke","From","MethodSignature","ParserState","ReplaceableParseError","arg_count","as_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current_scope","data","default","default","eq","eq","fmt","fmt","from","from","from","get_arg_count","in_scope","input_len","into","into","iter_elements","iter_indices","lift","method_signatures","name","new","new","position","replace_input","slice_index","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AccessAs","AccessAttrib","AccessType","Acquire","Add","Alias","Any","Arg","BankField","BitwiseAnd","BitwiseNot","BitwiseOr","BitwiseXor","Block","BlockProcessCall","Break","BreakPoint","Buffer","Buffer","Buffer","BufferField","Byte","Byte","Bytes","Concat","ConcatRes","CondRefOf","ConnectBuffer","ConnectNamed","Continue","CopyObject","CreateBitField","CreateByteField","CreateDWordField","CreateField","CreateQWordField","CreateWordField","DDBHandle","DWord","Data","DataTableRegion","DebugObject","Decrement","Deref","Device","Device","Divide","EmbeddedControl","Equal","Equal","Event","Event","Expression","Expression","ExpressionOpcode","External","Fatal","Field","FieldElement","FieldFlags","FieldUnit","FindSetLeftBit","FindSetRightBit","FromBCD","GeneralPurposeIO","GenericSerialBus","Greater","Greater","GreaterEqual","GreaterEqual","IPMI","If","Increment","Index","IndexField","Integer","Invoke","Less","Less","LessEqual","LessEqual","Load","LoadTable","Local","LogicalAnd","LogicalNot","LogicalOr","Match","MatchOpcode","Method","Method","MethodFlags","Mid","Mod","Modifier","Multiply","Mutex","Mutex","Name","Name","NameSpaceModifier","Named","Named","NamedObject","Nand","NoOp","None","Nor","NotEqual","Notify","OEMDefined","ObjectType","ObjectType","OperationRegion","OperationRegion","PCC","PCIBarTarget","PCIConfig","Package","Package","PowerResource","PowerResource","Preserve","ProcessCall","Processor","Processor","QWord","Quick","RawBytes","RawProcessBytes","RefExpression","RefOf","ReferenceExpressionOpcode","RegionSpace","Release","Reserved","Reset","Return","SMBus","Scope","SendReceive","ShiftLeft","ShiftRight","Signal","SizeOf","Sleep","Stall","Statement","StatementOpcode","Store","String","Subtract","SystemCMOS","SystemIO","SystemMemory","TermArg","TermObject","ThermalZone","ThermalZone","Timer","ToBCD","ToBuffer","ToDecimalString","ToHexString","ToInteger","ToString","True","Uninitialized","UpdateRule","VarPackage","Wait","While","Word","Word","WriteAsOnes","WriteAsZeros","access_type","arg_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lock","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","serialized","sync_level","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsynced","update_rule","a","b","dividend","divisor","event","index","length","length","mutex","oem_id","oem_table_id","parameter_data","parameter_path","quotient","remainder","result","result","root_path","search_package","signature","source","source","start_index","timeout","timeout","bit_length","bit_length","name","alias","source","argument_count","bank_name","bank_value","bit_index","bit_index","body","body","body","body","body","byte_index","byte_index","byte_index","byte_index","data_name","elements","elements","elements","flags","flags","flags","flags","id","index_name","length","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","num_bits","object_type","oem_id","oem_table_id","offset","region_name","region_name","region_space","register_block_addr","register_block_length","resource_order","signature","source_buffer","source_buffer","source_buffer","source_buffer","source_buffer","source_buffer","sync_level","system_level","index","result","source","arg","body","code","definition_block_handle","device_or_zone","event","event","fatal_type","if_false","if_true","microseconds","milliseconds","mutex","name","predicate","predicate","value"],"q":[[0,"tartan_acpi"],[279,"tartan_acpi::aml"],[296,"tartan_acpi::aml::data"],[427,"tartan_acpi::aml::misc"],[484,"tartan_acpi::aml::name"],[589,"tartan_acpi::aml::parse"],[599,"tartan_acpi::aml::parse::name"],[601,"tartan_acpi::aml::parse::state"],[649,"tartan_acpi::aml::term"],[1061,"tartan_acpi::aml::term::ExpressionOpcode"],[1086,"tartan_acpi::aml::term::FieldElement"],[1089,"tartan_acpi::aml::term::NameSpaceModifier"],[1091,"tartan_acpi::aml::term::NamedObject"],[1151,"tartan_acpi::aml::term::ReferenceExpressionOpcode"],[1154,"tartan_acpi::aml::term::StatementOpcode"]],"d":["Memory width used to read/write from a register","Type of register address","","","Common table header defined as <code>DESCRIPTION_HEADER</code> in the …","","Fixed ACPI Description Table (FADT)","Support flags from Fixed ACPI Description Table","","","Extended address structure defined in ACPI 2.0 to support …","","","","","","","","","Root System Description Pointer (RSDP) used in ACPI 1.0","Extended RDSP defined by ACPI 2.0","","","","","","","Abstract syntax tree for ACPI Machine Language","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","","","","Defines a byte slice parser function, avoiding repetitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An ACPI table that contains AML, such as the DSDT or an …","Top-level AML objects defined in the table","","","Data resources","","","Returns the argument unchanged.","Common ACPI table header","Calls <code>U::from(self)</code>.","Special symbols","Names of objects, arguments, and references","Parsers for AML bytecode.","Top-level terms and opcodes.","","","","Block of raw bytes, optionally initialized in whole or in …","","","Single value resolved at compile time.","","","","Data resolved at compile time, possibly grouped in a …","","","","","","","Group of related data elements, optionally inititalized in …","","A name or reference that constitutes part of a <code>Package</code> (or …","","","","","Group of related data elements, with a number of elements …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Symbol for a positional argument passed to the current …","Symbol representing debugger output device.","","","","","","","","","Symbol for a variable local to the current method.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Four-character name segment, allowing underscores, …","Fully qualified object path, either absolute or relative.","","Indicates whether a name is absolute or relative to the …","","","A named object or variable.","A named object, variable, reference expression, or debug …","Location to store the result of an operation","Specifies how to resolve this path as absolute or relative.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Format a <code>NameString</code> like a path in ASL","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Segments of the path","Convert to an absolute namespace path in the context of …","List all possible absolute pathnames that this name may …","","","","","","Convert a list of segments in various formats into a path …","","","","","","","","","","","","","","","","","","","Trait “alias” for error type used by AML parsers","Alias for type returned by AML parsers","An object that can be parsed from AML bytecode","Data objects, defined in §20.2.3","Miscellaneous objects, defined in §20.2.6","Name objects, defined in §20.2.2","Try to parse an object of this type from the given input …","Parse an ACPI table that contains AML, including the header","Parser context needed to disambiguate grammar","Terms, defined in §20.2.5","Grammar:","Parse a <code>SuperName</code>, but do <em>not</em> allow method invocations.","","Expected argument count for a method in the ACPI namespace.","Input data plus context needed to disambiguate grammar","Helper trait used to convert a parser error from one input …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get the argument count of the named method, if it is …","Execute a parser in a new scope relative to the current …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Wraps a byte-oriented parser to work with <code>ParserState</code>","","","","","","","","","","","","","","","","Sets access information for <strong>following</strong> fields.","Additional information about how a field is accessed.","Width used to access a field.","Try to acquire a mutex, returning <em>true</em> if the attempt …","Add two integers","Create a new <code>alias</code> for existing named <code>source</code> object.","","","Declare fields that can only be accessed after writing to …","Compute a bitwise AND of two integers","Invert the bits of an integer","Compute the bitwise OR of the two integers","Compute the bitwise XOR of two integers","","","Break from a loop","Trigger a debugger breakpoint","","","","","","","","Concatenate two strings or buffers","Concatenate two buffers containing resource templates","Try to create a reference, returning false if it is not …","Indicates that <strong>following</strong> fields should be accessed with …","Indicates that <strong>following</strong> fields should be accessed with …","Continue to the next loop iteration","Update the destination with a copy of the given value, …","Declare a single-bit field within a buffer","Create a one-byte-wide field within a buffer","Declare a four-byte-wide field within a buffer","Declare an arbitrary-width field within a buffer","Declare an eight-byte-wide field within a buffer","Declare a two-byte-wide field within a buffer","","","","Allow an ACPI table indexed in the XSDT to be used as a …","","Decrement an integer variable","Get the target of a reference","Declare a device and its associated fields, methods, and …","","Perform integer (quotient-remainder) division","","Evaluate to true if both values are equal","","Declare a waitable synchronization object","","","","Terminal operation that evaluates to a value or reference.","Declare an object that is defined in another ACPI table","Signal an error that requires a system shutdown","Declare a group of fields","A substructure of a field.","Rules for reading and writing a field.","","Get the index of the most-significant set bit in a value","Get the index of the least-significant set bit in a value","Decode a series of binary-coded decimal nibbles into an …","","","Evaluate to true if the left value is greater than the …","","Evaluate to true if the left value is greater than or …","","","Branch on a predicate","Increment an integer variable","Create a reference to an index within a buffer","Declare a group of field that must be accessed by writing …","","Execute a control method","Evaluate to true if the left value is less than the right …","","Evaluate to true if the left value is less than or equal …","","Load a dynamically-generated SSDT from a field, region, or …","Find an ACPI table indexed by the XSDT","","Evaluate to true if both arguments are non-zero integers","Evaluate to true if the value is zero","Evaluate to true if either of the values is a non-zero …","Search a package and return the index of the first …","Type of comparison used for a branch in an …","Declare a control method","","Information about how to call a method.","Copy a slice of a string or buffer.","Compute the remainder of dividing the first integer by the …","","Multiply two integers","Declare an acquirable mutex","","","Attach a name to an anonymous data or reference.","Term that attaches a name to its argument.","","A named bitfield.","Term that defines an object with a name.","Compute the bitwise NAND of two integers","Do nothing","","Compute the bitwise NOR of two integers","Evaluate to true if the left value is not equal to the …","Send a signal value to a device/processor/zone","","Type ID returned by <code>ExpressionOpcode::ObjectType</code>.","Get an integer representing the type of the given value. …","Declare an address space that can be used by fields","","","","","","","Declare a power resource object","","","","Declare a processor and associated register block","","","","","","","Create a reference to the given name","Terminal operation that evaluates to a reference.","Address space used to access a field.","Release a held mutex","Indicates that the next most significant <code>bit_length</code> bits …","Clear the signalled state of an event object","Exit the current method and yield the given value to the …","","Evaluate the contained terms within a new scope.","","Multiply an integer by the specified power of two","Divide an integer by the specified power of two","Signal to one thread waiting on the event","Get the length of a string, buffer, or package","Delay for at least the given milliseconds, releasing the …","Delay for at least the given microseconds, but do <em>not</em> …","","Terminal operation that does not evaluate to a value, …","Update the destination with the given value, converting it …","","Subtract an integer from another, ignoring underflow","","","","Term that resolves to a value.","Top-level, most general term type where the value (if any) …","Declare a thermal zone namespace","","Get the current value of the system timer in 100ns","Encode an integer into a sequence of binary-coded decimal …","Convert a value to a buffer","Encode a value as an ASCII decimal number","Encode a value as an ASCII hexadecimal number","Convert a value to an integer, either by parsing a string …","Copy an ASCII string from a buffer into a string value","","","Indicates what to do with unused bits when writing a field.","","Try to wait for another thread to signal an event object, …","Execute a series of statements as long as the predicate is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,0,9,9,0,8,0,0,8,8,0,8,8,8,8,8,8,8,9,0,0,8,8,8,8,9,9,0,6,3,4,5,6,7,8,9,1,3,4,5,6,7,8,9,1,1,1,6,6,3,5,3,4,5,6,7,8,9,1,3,4,5,6,7,8,9,1,8,9,6,6,6,6,5,5,8,9,1,6,6,1,3,4,5,6,7,8,9,1,1,4,4,6,6,1,6,3,4,5,6,7,8,9,1,1,1,3,4,5,6,7,8,8,9,9,1,1,6,6,6,6,6,6,6,1,8,9,6,1,6,3,4,5,6,7,8,9,1,4,5,1,8,8,9,9,3,5,5,5,0,8,9,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,6,1,6,6,3,5,6,3,1,6,6,6,1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,1,6,6,6,6,6,6,6,6,1,3,4,5,6,7,8,9,1,3,4,5,6,7,8,9,1,3,4,5,6,7,8,9,1,3,4,5,6,7,8,9,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,20,20,20,0,20,20,20,20,20,0,0,0,0,20,20,20,0,21,21,0,21,26,27,0,0,27,25,27,21,21,0,26,0,21,25,21,21,0,26,21,21,21,22,23,24,25,26,27,21,22,23,24,25,26,27,21,22,23,24,25,26,27,21,22,23,24,25,26,27,23,24,21,22,23,24,25,26,27,21,22,23,24,25,26,27,21,22,23,24,25,25,25,26,26,26,26,27,27,27,27,27,22,23,24,21,22,23,24,25,26,27,21,22,23,24,25,26,27,22,21,22,23,24,25,26,27,21,22,23,24,25,26,27,21,22,23,24,25,26,27,21,22,23,24,25,26,27,32,32,32,32,32,32,32,0,0,33,33,33,33,33,33,33,33,0,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,32,33,34,37,38,37,37,38,0,0,36,0,38,36,0,0,0,28,35,28,36,37,38,35,28,36,37,38,35,28,36,37,38,35,28,36,37,38,28,35,28,36,37,38,35,35,28,28,36,36,37,38,35,35,28,28,28,36,37,37,37,37,38,38,38,38,38,38,35,28,36,37,38,28,28,28,35,28,36,37,38,28,28,28,35,28,36,37,38,0,35,28,36,35,28,36,37,38,35,28,36,37,38,35,28,36,37,38,0,0,0,0,0,0,70,0,0,0,0,0,71,0,0,0,50,29,50,29,50,29,50,29,50,29,29,29,50,29,50,29,50,29,50,29,29,29,29,29,50,29,29,29,29,29,50,50,29,29,71,29,50,29,50,29,50,29,50,29,62,0,0,67,67,57,60,56,58,67,67,67,67,63,63,66,66,60,67,69,69,60,63,63,67,67,67,62,62,66,67,58,58,58,58,58,58,69,60,56,58,69,67,41,58,69,67,65,67,68,58,69,55,56,0,58,66,58,0,0,69,67,67,67,65,65,67,68,67,68,65,66,67,41,58,69,41,67,68,67,68,66,67,56,67,67,67,67,0,58,69,0,67,67,55,67,58,69,56,57,0,55,62,0,67,66,63,67,67,66,65,0,67,58,69,65,65,65,67,69,58,69,61,63,58,69,60,63,63,63,67,41,0,0,66,62,66,66,65,57,63,67,67,66,67,66,66,55,0,67,69,67,65,65,65,0,0,58,69,67,67,67,67,67,67,67,68,69,0,67,67,66,60,63,61,61,59,64,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,57,58,59,60,61,62,63,64,65,66,41,67,67,67,67,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,59,55,56,57,58,59,62,64,65,66,41,67,68,69,64,64,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,60,61,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,55,56,57,58,59,60,61,62,63,64,65,66,41,67,68,69,64,59,72,72,73,73,74,75,75,76,77,78,78,78,78,73,73,75,76,78,72,78,75,76,72,77,74,79,80,79,81,81,82,83,83,84,85,86,87,88,89,90,91,92,93,94,95,83,96,95,83,96,95,87,89,95,97,84,91,92,85,93,94,98,86,82,87,99,97,88,89,90,85,82,98,98,97,83,96,97,89,89,88,98,84,91,92,85,93,94,99,88,100,100,100,101,102,101,103,104,105,106,101,107,107,108,109,110,103,107,102,104],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,2],0,0,0,0,[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,8],10],[[9,9],10],0,0,0,0,0,0,[[],8],[[],9],[[],1],0,0,[1,2],[[3,3],2],[[4,4],2],[[5,5],2],[[6,6],2],[[7,7],2],[[8,8],2],[[9,9],2],[[1,1],2],[1,2],0,0,0,0,[1,2],0,[[3,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[[7,11],12],[[8,11],12],[[9,11],12],[[1,11],12],[1,2],[1,2],[[]],[[]],[[]],[[]],[[]],[13,8],[[]],[13,9],[[]],[[]],[14,1],0,0,0,0,0,0,0,[1,2],[[8,15]],[[9,15]],0,[1,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,2],[8,[[17,[16]]]],[8,[[17,[16]]]],[9,[[17,[16]]]],[9,[[17,[16]]]],0,0,0,0,0,[[8,8],[[17,[10]]]],[[9,9],[[17,[10]]]],0,[1,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,[1,2],0,0,0,0,0,0,[1,2],0,0,0,[1,2],[1,2],0,[1,2],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,[1,2],0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[1,2],0,[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[1,2],[1,2],0,0,[[]],[[]],0,[[20,20],2],[[20,11],12],[[]],0,[[]],0,0,0,0,[[],18],[[],18],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[21,21],2],[[22,22],2],[[23,23],2],[[24,24],2],[[25,25],2],[[26,26],2],[[27,27],2],[[21,11],12],[[22,11],12],[[23,11],12],[[24,11],12],[[25,11],12],[[26,11],12],[[27,11],12],[[]],[[]],[[]],[[]],[27,25],[28,25],[[]],[21,26],[23,26],[24,26],[[]],[[]],[26,27],[21,27],[23,27],[24,27],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,[[31,[21,30]]]],[29,[[31,[22,30]]]],[29,[[31,[23,30]]]],[29,[[31,[24,30]]]],[29,[[31,[25,30]]]],[29,[[31,[26,30]]]],[29,[[31,[27,30]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[34,34],[[]],[[]],[[]],[[32,32],2],[[33,33],2],[[34,34],2],[[32,11],12],[[33,11],12],[[34,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[29,[[31,[32,30]]]],[29,[[31,[33,30]]]],[29,[[31,[34,30]]]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[28,28],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[]],[[]],[[],28],[[35,35],2],[[28,28],2],[[36,36],2],[[37,37],2],[[38,38],2],[[35,11],[[18,[39]]]],[[35,11],[[18,[39]]]],[[28,11],[[18,[39]]]],[[28,11],[[18,[39]]]],[[36,11],[[18,[39]]]],[[36,11],12],[[37,11],12],[[38,11],12],[[]],[[[40,[13]]],35],[[[40,[13]]],28],[35,28],[[]],[[]],[32,37],[[]],[33,37],[28,37],[[]],[33,38],[37,38],[28,38],[41,38],[32,38],[[]],[[]],[[]],[[]],[[]],[[[44,[[0,[42,[43,[35]]]]]]],28],[[45,[44,[[0,[42,[43,[35]]]]]]],28],[[[44,[[0,[42,[43,[35]]]]]]],28],[29,[[31,[35,30]]]],[29,[[31,[28,30]]]],[29,[[31,[36,30]]]],[29,[[31,[37,30]]]],[29,[[31,[38,30]]]],0,[[28,[44,[35]]],[[17,[[46,[35]]]]]],[[28,[44,[35]]],[[46,[[46,[35]]]]]],[[]],[[]],[[]],[[]],[[]],[[[44,[[0,[42,[43,[35]]]]]]],[[46,[35]]]],[[],47],[[],47],[[],47],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,[29,[[31,[30]]]],[[[44,[13]]],[[18,[20,[48,[29]]]]]],0,0,[29,[[31,[49,30]]]],[29,[[31,[38,30]]]],0,0,0,0,0,[29,[[44,[13]]]],[[]],[[]],[[]],[[]],[50,50],[29,29],[[]],[[]],0,0,[[],50],[[],29],[[50,50],2],[[29,29],2],[[50,11],12],[[29,11],12],[[]],[[]],[[[44,[13]]],29],[[29,28],[[17,[13]]]],[[29,28,[51,[29,30]]],[[31,[30]]]],[29,45],[[]],[[]],[29],[29],[[[51,[[44,[13]]]]],52],0,0,[[[44,[[0,[42,[43,[35]]]]]],13],50],[[[44,[13]]],29],[[29,53],[[17,[45]]]],[[]],[[29,45],[[18,[45,54]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[41,41],[67,67],[68,68],[69,69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,55],2],[[56,56],2],[[57,57],2],[[58,58],2],[[59,59],2],[[60,60],2],[[61,61],2],[[62,62],2],[[63,63],2],[[64,64],2],[[65,65],2],[[66,66],2],[[41,41],2],[[67,67],2],[[68,68],2],[[69,69],2],[[55,11],12],[[56,11],12],[[57,11],12],[[58,11],12],[[59,11],12],[[60,11],12],[[61,11],12],[[62,11],12],[[63,11],12],[[64,11],12],[[65,11],12],[[66,11],12],[[41,11],12],[[67,11],12],[[68,11],12],[[69,11],12],[22,55],[23,55],[24,55],[66,55],[[]],[58,55],[67,55],[41,55],[57,55],[41,56],[21,56],[32,56],[33,56],[23,56],[28,56],[26,56],[[]],[67,56],[22,56],[24,56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,67],[24,67],[41,67],[22,67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[29,[[31,[55,30]]]],[29,[[31,[56,30]]]],[29,[[31,[57,30]]]],[29,[[31,[58,30]]]],[29,[[31,[59,30]]]],[29,[[31,[62,30]]]],[29,[[31,[64,30]]]],[29,[[31,[65,30]]]],[29,[[31,[66,30]]]],[29,[[31,[41,30]]]],[29,[[31,[67,30]]]],[29,[[31,[68,30]]]],[29,[[31,[69,30]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[13,[[18,[60]]]],[[],18],[13,[[18,[61]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[13,64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"FixedFlags"],[15,"bool"],[3,"RootDescriptionPointerV1"],[3,"RootDescriptionPointerV2"],[3,"DescriptionHeader"],[3,"FixedDescription"],[3,"GenericAddress"],[3,"AddressSpace"],[3,"AccessSize"],[4,"Ordering"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"u32"],[8,"Hasher"],[15,"str"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"AMLTable"],[4,"ComputationalData"],[3,"Buffer"],[3,"Package"],[3,"VarPackage"],[4,"PackageElement"],[4,"DataObject"],[4,"DataRefObject"],[3,"NameString"],[3,"ParserState"],[8,"AMLParseError"],[6,"AMLParseResult"],[4,"ArgObject"],[4,"LocalObject"],[3,"DebugObject"],[3,"NameSeg"],[4,"PathAnchor"],[4,"SimpleName"],[4,"SuperName"],[3,"Error"],[15,"array"],[4,"ReferenceExpressionOpcode"],[8,"Copy"],[8,"Into"],[15,"slice"],[15,"usize"],[3,"Vec"],[3,"String"],[3,"ErrorWithPosition"],[6,"Target"],[3,"MethodSignature"],[8,"Parser"],[8,"FnMut"],[8,"Fn"],[4,"Needed"],[4,"TermObject"],[4,"TermArg"],[4,"NameSpaceModifier"],[4,"NamedObject"],[3,"FieldFlags"],[4,"AccessType"],[4,"UpdateRule"],[4,"FieldElement"],[4,"AccessAttrib"],[3,"MethodFlags"],[4,"RegionSpace"],[4,"StatementOpcode"],[4,"ExpressionOpcode"],[4,"MatchOpcode"],[4,"ObjectType"],[8,"Parse"],[8,"ReplaceableParseError"],[13,"Match"],[13,"Divide"],[13,"Wait"],[13,"Mid"],[13,"ToString"],[13,"Acquire"],[13,"LoadTable"],[13,"Named"],[13,"Reserved"],[13,"Alias"],[13,"External"],[13,"BankField"],[13,"CreateBitField"],[13,"CreateField"],[13,"Device"],[13,"Method"],[13,"PowerResource"],[13,"Processor"],[13,"ThermalZone"],[13,"CreateByteField"],[13,"CreateDWordField"],[13,"CreateQWordField"],[13,"CreateWordField"],[13,"IndexField"],[13,"Field"],[13,"OperationRegion"],[13,"DataTableRegion"],[13,"Mutex"],[13,"Index"],[13,"Fatal"],[13,"While"],[13,"Load"],[13,"Notify"],[13,"Reset"],[13,"Signal"],[13,"If"],[13,"Stall"],[13,"Sleep"],[13,"Release"]]},\
"tartan_arch":{"doc":"Architecture-specific primitives for Tartan OS","t":"AOAOFAAANENNENNNLLLLALLLLLALLLLLLLLLDDSSSDDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDNNSSSNSSSSNENNDSSSESSSNDNSSSSEDDSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNNENNNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLADDDDMMLLLLLLLLLLMMMMMLLLLMLLLLLLLLMMMMMMMMMMLLLLMMMLLMMMMMMMMLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLDLLLLLLLMLMLMLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLALLLLLALLLLLLLLALLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDSSSSSSSSSSDDSSSSSSSSSSSLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFFFFFFDDIIIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSNNINNNDDDDDDSSSSESDDEDNDSESSSSSSLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["aarch64","aarch64_exception_vector_table","arm","arm_exception_vector_table","jump","x86","x86_64","x86_common","CurrentLevel","ExceptionLevel","Level0","One","StackPointerSelect","Three","Two","Zero","borrow","borrow","borrow_mut","borrow_mut","float","from","from","from","get","get","interrupt","into","into","set","try_from","try_from","try_into","try_into","type_id","type_id","ControlRegister","Exceptions","MinusInfinity","Nearest","PlusInfinity","RoundingMode","StatusRegister","Zero","alternative_half_precision_format","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","default","default","default","default","default_nan","eq","eq","eq","eq","exceptions","flush_to_zero","flush_to_zero_half_precision","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","hash","into","into","into","into","name","name","partial_cmp","rounding_mode","set","set","set_alternative_half_precision_format","set_default_nan","set_exceptions","set_flush_to_zero","set_flush_to_zero_half_precision","set_rounding_mode","set_trapped_exceptions","trapped_exceptions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_alternative_half_precision_format","with_default_nan","with_exceptions","with_flush_to_zero","with_flush_to_zero_half_precision","with_rounding_mode","with_trapped_exceptions","BreakpointFromCurrent","BreakpointFromLower","BreakpointInstruction","Class","CurrentLevelHandler","CurrentLevelThread","DataAbortFromCurrent","DataAbortFromLower","FPUAccess","FastInterrupt","FloatException","IllegalState","InstructionAbortFromCurrent","InstructionAbortFromLower","Interrupt","Kind","LowerLevel","LowerLevel32Bit","MaskRegister","PCAlignment","PointerAuthFailure","SPAlignment","Source","StepFromCurrent","StepFromLower","SupervisorCall","Synchronous","SyndromeRegister","SystemError","SystemError","SystemInstruction","Unknown","VectorAccess","VectorBaseAddressRegister","VectorEntry","VectorTable","Wait","WatchpointFromCurrent","WatchpointFromLower","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class_data","clone","clone","clone","clone","clone","cmp","debug_masked","default","default","default","eq","eq","eq","eq","eq","fast_interrupts_masked","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get","get","get","hash","interrupts_masked","into","into","into","into","into","into","into","into","length_32bit","name","name","partial_cmp","set","set","set","set_class","set_class_data","set_debug_masked","set_fast_interrupts_masked","set_interrupts_masked","set_length_32bit","set_system_error_masked","system_error_masked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_class","with_class_data","with_debug_masked","with_fast_interrupts_masked","with_interrupts_masked","with_length_32bit","with_system_error_masked","interrupt","DataAbort","FastHardwareInterrupt","HardwareInterrupt","Kind","PrefetchAbort","Reset","SoftwareInterrupt","UndefinedInstruction","VectorBaseAddressRegister","VectorTable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","from","from","from","get","into","into","into","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","protection","BasicTaskStateSegment","PrivilegedStack","TaskStateSegmentBitmaps","TaskStateSegmentHeader","base_pointer","bitmaps","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","code_segment","control_register_3","data_segment","debug_trap","destination_index","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","from","from","from","from","general_a","general_b","general_c","general_d","general_segment_e","general_segment_f","general_segment_g","header","instruction_pointer","interrupt_redirect","into","into","into","into","io_permission","io_permission_map_offset","local_descriptor_table","new","new","pointer","previous_task","privileged_stack","segment","shadow_stack_pointer","source_index","stack_pointer","stack_segment","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ControlRegister8","ExtendedFeatureEnableRegister","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","default","eq","eq","fmt","fmt","from","from","from","from","get","get","into","into","long_mode_active","long_mode_enabled","no_execute","protection","set","set","set_long_mode_active","set_long_mode_enabled","set_no_execute","set_syscall","set_task_priority_level","syscall","task_priority_level","try_from","try_from","try_into","try_into","type_id","type_id","with_long_mode_active","with_long_mode_enabled","with_no_execute","with_syscall","with_task_priority_level","TaskStateSegmentHeader","borrow","borrow_mut","clone","default","eq","fmt","from","interrupt_stack","into","io_permission_map_offset","new","privileged_stack","try_from","try_into","type_id","ControlRegister0","ControlRegister4","ExtendedControlRegister0","FlagRegister","alignment_check_mask","alignment_check_or_access_control","aux_carry","avx_256","avx_512","avx_512_extended","avx_512_opmask","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_disabled","cache_not_write_through","carry","clear_task_switched_without_fpu_state","clone","clone","clone","clone","control_flow_enforcement","debugging_extensions","default","default","default","default","direction","eq","eq","eq","eq","extended_base_registers","extended_state_save","features","five_level_paging","fmt","fmt","fmt","fmt","fpu","fpu_emulation","fpu_extension_type","from","from","from","from","from","from","from","from","get","get","get","get","global_pages","identification","interrupt","interrupt_enabled","into","into","into","into","io","io_privilege_level","machine_check_exception","monitor_fpu","mpx_bound_config_status","mpx_bounds","native_fpu_error","nested_task","page_size_extensions","paging","paging","parity","performance_counter","physical_address_extension","process_context_ids","protected_mode","protected_virtual_interrupts","protection","protection_key_rights","restrict_user_mode_instructions","resume","safer_mode_extensions","set","set","set","set","set_alignment_check_mask","set_alignment_check_or_access_control","set_aux_carry","set_avx_256","set_avx_512","set_avx_512_extended","set_avx_512_opmask","set_cache_disabled","set_cache_not_write_through","set_carry","set_control_flow_enforcement","set_debugging_extensions","set_direction","set_extended_base_registers","set_extended_state_save","set_five_level_paging","set_fpu","set_fpu_emulation","set_fpu_extension_type","set_global_pages","set_identification","set_interrupt_enabled","set_io_privilege_level","set_machine_check_exception","set_monitor_fpu","set_mpx_bound_config_status","set_mpx_bounds","set_native_fpu_error","set_nested_task","set_page_size_extensions","set_paging","set_parity","set_performance_counter","set_physical_address_extension","set_process_context_ids","set_protected_mode","set_protected_virtual_interrupts","set_protection_key_rights","set_restrict_user_mode_instructions","set_resume","set_safer_mode_extensions","set_sign","set_signed_overflow","set_simd_exceptions","set_sse","set_sse_and_fpu_save","set_supervisor_access_prevention","set_supervisor_execution_prevention","set_supervisor_protection_keys","set_task_switched_without_fpu_state","set_timestamp_disabled","set_trap","set_user_protection_keys","set_virtual_8086_extensions","set_virtual_8086_mode","set_virtual_interrupt_enabled","set_virtual_interrupt_pending","set_virtual_machine_extensions","set_write_protect","set_zero","sign","signed_overflow","simd_exceptions","sse","sse_and_fpu_save","supervisor_access_prevention","supervisor_execution_prevention","supervisor_protection_keys","task_switched_without_fpu_state","timestamp_disabled","trap","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user_protection_keys","virtual_8086_extensions","virtual_8086_mode","virtual_interrupt_enabled","virtual_interrupt_pending","virtual_machine_extensions","with_alignment_check_mask","with_alignment_check_or_access_control","with_aux_carry","with_avx_256","with_avx_512","with_avx_512_extended","with_avx_512_opmask","with_cache_disabled","with_cache_not_write_through","with_carry","with_control_flow_enforcement","with_debugging_extensions","with_direction","with_extended_base_registers","with_extended_state_save","with_five_level_paging","with_fpu","with_fpu_emulation","with_fpu_extension_type","with_global_pages","with_identification","with_interrupt_enabled","with_io_privilege_level","with_machine_check_exception","with_monitor_fpu","with_mpx_bound_config_status","with_mpx_bounds","with_native_fpu_error","with_nested_task","with_page_size_extensions","with_paging","with_parity","with_performance_counter","with_physical_address_extension","with_process_context_ids","with_protected_mode","with_protected_virtual_interrupts","with_protection_key_rights","with_restrict_user_mode_instructions","with_resume","with_safer_mode_extensions","with_sign","with_signed_overflow","with_simd_exceptions","with_sse","with_sse_and_fpu_save","with_supervisor_access_prevention","with_supervisor_execution_prevention","with_supervisor_protection_keys","with_task_switched_without_fpu_state","with_timestamp_disabled","with_trap","with_user_protection_keys","with_virtual_8086_extensions","with_virtual_8086_mode","with_virtual_interrupt_enabled","with_virtual_interrupt_pending","with_virtual_machine_extensions","with_write_protect","with_zero","write_protect","zero","AddressSpaceSizes","BasicFeatures","ExtendedFeatures","aes","apic_timestamp_deadline","apic_x2","avx","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_swap_move","cache_line_flush","carryless_multiply_64bit","chipset_task_priority_control","clone","clone","clone","compare_exchange_128bit","compare_exchange_64bit","conditional_move","count_bits","cpuid","debug_interface_model_register","debug_store","debug_store_64bit","debugging_extensions","default","default","default","enhanced_speedstep","eq","eq","eq","extended_state_save","extended_state_save_enabled","float_16_conversion","fmt","fmt","fmt","fpu_save","from","from","from","from","from","from","fused_multiply_add","get","get","get","global_pages","into","into","into","l1_context_id","machine_check_architecture","machine_check_exception","max_apic_id_field","max_cpuid_index_basic","max_cpuid_index_extended","memory_mapped_prefetch","memory_type_range_registers","mmx","model_registers","monitor","monitor_debug_capabilities_register","on_chip_apic","on_chip_fpu","page_attribute_table","page_size_extension","page_size_extension_36bit","pending_break_enable","permission_qualified_debug_store","physical_address_extension","process_context_ids","random","safer_mode_extensions","self_snoop","serial_number","set_aes","set_apic_timestamp_deadline","set_apic_x2","set_avx","set_byte_swap_move","set_cache_line_flush","set_carryless_multiply_64bit","set_chipset_task_priority_control","set_compare_exchange_128bit","set_compare_exchange_64bit","set_conditional_move","set_count_bits","set_debug_interface_model_register","set_debug_store","set_debug_store_64bit","set_debugging_extensions","set_enhanced_speedstep","set_extended_state_save","set_extended_state_save_enabled","set_float_16_conversion","set_fpu_save","set_fused_multiply_add","set_global_pages","set_l1_context_id","set_machine_check_architecture","set_machine_check_exception","set_max_apic_id_field","set_memory_mapped_prefetch","set_memory_type_range_registers","set_mmx","set_model_registers","set_monitor","set_monitor_debug_capabilities_register","set_on_chip_apic","set_on_chip_fpu","set_page_attribute_table","set_page_size_extension","set_page_size_extension_36bit","set_pending_break_enable","set_permission_qualified_debug_store","set_physical_address_extension","set_process_context_ids","set_random","set_safer_mode_extensions","set_self_snoop","set_serial_number","set_sse","set_sse_2","set_sse_3","set_sse_4_1","set_sse_4_2","set_supplemental_sse_3","set_sysenter","set_thermal_monitor","set_thermal_monitor_2","set_thermal_power_management","set_time_stamp_counter","set_virtual_8086_extensions","set_virtual_machine_extensions","sse","sse_2","sse_3","sse_4_1","sse_4_2","supplemental_sse_3","sysenter","thermal_monitor","thermal_monitor_2","thermal_power_management","time_stamp_counter","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virtual_8086_extensions","virtual_machine_extensions","with_aes","with_apic_timestamp_deadline","with_apic_x2","with_avx","with_byte_swap_move","with_cache_line_flush","with_carryless_multiply_64bit","with_chipset_task_priority_control","with_compare_exchange_128bit","with_compare_exchange_64bit","with_conditional_move","with_count_bits","with_debug_interface_model_register","with_debug_store","with_debug_store_64bit","with_debugging_extensions","with_enhanced_speedstep","with_extended_state_save","with_extended_state_save_enabled","with_float_16_conversion","with_fpu_save","with_fused_multiply_add","with_global_pages","with_l1_context_id","with_machine_check_architecture","with_machine_check_exception","with_max_apic_id_field","with_memory_mapped_prefetch","with_memory_type_range_registers","with_mmx","with_model_registers","with_monitor","with_monitor_debug_capabilities_register","with_on_chip_apic","with_on_chip_fpu","with_page_attribute_table","with_page_size_extension","with_page_size_extension_36bit","with_pending_break_enable","with_permission_qualified_debug_store","with_physical_address_extension","with_process_context_ids","with_random","with_safer_mode_extensions","with_self_snoop","with_serial_number","with_sse","with_sse_2","with_sse_3","with_sse_4_1","with_sse_4_2","with_supplemental_sse_3","with_sysenter","with_thermal_monitor","with_thermal_monitor_2","with_thermal_power_management","with_time_stamp_counter","with_virtual_8086_extensions","with_virtual_machine_extensions","APICBaseRegister","AlignmentCheck","Bound","Breakpoint","ControlProtectionException","DEFAULT_ADDRESS","DebugException","DeviceNotAvailable","DivideError","DoubleFault","FloatingPointError","InterruptDescriptorTableRegister","InterruptVector","InvalidOpcode","InvalidTaskSegment","MachineCheck","NonMaskable","Overflow","PageFault","ProtectionFault","SIMDFloatingPointError","SegmentNotPresent","StackFault","VirtualizationException","address","address","bootstrap_processor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","default","default","default","enabled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","get","get","hash","into","into","into","limit","name","name","partial_cmp","reserved","set","set","set_address","set_bootstrap_processor","set_enabled","set_x2_interface","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_bootstrap_processor","with_enabled","with_x2_interface","x2_interface","in_u16","in_u32","in_u8","out_u16","out_u32","out_u8","ControlRegister2","ControlRegister3","DirectPageTableEntry","GenericPageTableEntry","HybridPageTableEntry","Level1PageTableEntry","Level2PageTableEntry","accessed","address","attribute_table","attribute_table","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_disabled","cache_disabled","clone","clone","clone","clone","default","default","default","default","dirty","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt_fields","fmt_fields","fmt_fields","fmt_fields","from","from","from","from","from","from","from","from","get","get","global","into","into","into","into","is_page","no_execute","present","process_context_id","protection_key","set","set","set_accessed","set_address","set_attribute_table","set_attribute_table","set_cache_disabled","set_cache_disabled","set_dirty","set_global","set_is_page","set_no_execute","set_present","set_process_context_id","set_protection_key","set_user","set_writable","set_write_through","set_write_through","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","user","with_accessed","with_attribute_table","with_attribute_table","with_cache_disabled","with_cache_disabled","with_dirty","with_global","with_is_page","with_no_execute","with_present","with_process_context_id","with_protection_key","with_user","with_writable","with_write_through","with_write_through","writable","write_through","write_through","CallGate","CallGate16Bit","Code","Data","DescriptorFlags","Extra","ExtraF","ExtraG","GateDescriptor","GateDescriptorFlags","GenericDescriptor","GenericDescriptorFlags","GlobalDescriptorTableRegister","IOPermissionBitmap","InterruptGate","InterruptGate16Bit","LIMIT_MAX","LocalDescriptorTable","LocalDescriptorTableRegister","MAX_SIZE","SegmentDescriptor","SegmentDescriptorFlags","SegmentRegister","Selector","Stack","SystemDescriptorType","TaskGate","TaskRegister","TaskStateAvailable","TaskStateAvailable16Bit","TaskStateBusy","TaskStateBusy16Bit","TrapGate","TrapGate16Bit","address","address","application_accessed","application_mode_32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_param_count","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","code_conforming","code_mode_64","code_readable","current_descriptor","data_expand_down","data_writable","default","default","default","default","default","default","default","default","descriptor_address","entry_point_offset","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_fields","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","granularity","hash","interrupt_stack_index","into","into","into","into","into","into","into","into","into","into","into","into","into","is_application","is_code","is_gate","is_gate","is_port_checked","limit","limit","local","max_port","max_port_for_size","name","name","new","new","new","null","offset","os_defined","partial_cmp","present","privilege_level","privilege_level","required_size","selector","set","set","set","set","set_address","set_application_accessed","set_application_mode_32","set_call_param_count","set_code_conforming","set_code_mode_64","set_code_readable","set_data_expand_down","set_data_writable","set_entry_point_offset","set_granularity","set_interrupt_stack_index","set_is_application","set_is_code","set_limit","set_local","set_offset","set_os_defined","set_port_checked","set_present","set_privilege_level","set_privilege_level","set_selector","set_system_type","set_with_segments","size","system_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_application_accessed","with_application_mode_32","with_call_param_count","with_code_conforming","with_code_mode_64","with_code_readable","with_data_expand_down","with_data_writable","with_granularity","with_interrupt_stack_index","with_is_application","with_is_code","with_local","with_os_defined","with_present","with_privilege_level","with_privilege_level","with_system_type"],"q":[[0,"tartan_arch"],[8,"tartan_arch::aarch64"],[36,"tartan_arch::aarch64::float"],[122,"tartan_arch::aarch64::interrupt"],[270,"tartan_arch::arm"],[271,"tartan_arch::arm::interrupt"],[307,"tartan_arch::x86"],[308,"tartan_arch::x86::protection"],[381,"tartan_arch::x86_64"],[427,"tartan_arch::x86_64::protection"],[443,"tartan_arch::x86_common"],[689,"tartan_arch::x86_common::features"],[911,"tartan_arch::x86_common::interrupt"],[993,"tartan_arch::x86_common::io"],[999,"tartan_arch::x86_common::paging"],[1112,"tartan_arch::x86_common::protection"]],"d":["Architecture-specific primitives for 64-bit Arm.","Define an exception vector table that forwards all …","Architecture-specific primitives for 32-bit Arm.","Define an exception vector table that forwards all …","Unconditionally transfer control to the instruction at the …","Architecture-specific primitives for 32-bit x86 processors.","Architecture-specific primitives for 64-bit x86 processors.","Architecture-specific primitives common to 32-bit and …","<code>H</code> (handler) mode: use the stack pointer register for the …","<code>EL</code>: Defines the privilege level of executing code. Higher …","<code>T</code> (thread) mode: use the stack pointer register from EL0.","<code>EL1</code>, used for OS kernel code.","Controls which stack pointer register is used when …","<code>EL3</code>, used for the secure manager.","<code>EL2</code>, used for hypervisors in virtualized systems.","<code>EL0</code>, used for unprivileged user code.","","","","","Floating-point control and status.","","Returns the argument unchanged.","Returns the argument unchanged.","Get the current exception level. Only accessible from EL1 …","Get the value of the flag for the current exception level. …","Exception and interrupt handling.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Update the value of the flag for the current exception …","","","","","","","<code>FPCR</code>: Influences floating-point instruction execution.","Status/mask bits for each type of floating-point exception.","Round toward negative infinity.","Round to the nearest number, with ties toward even numbers.","Round toward positive infinity.","Floating-point rounding mode, as defined by IEEE 754.","<code>FPSR</code>: Indicates non-trapped floating-point exceptions.","Round toward zero (truncate).","<code>AHP</code>: Use an alternative format for half-precision floats …","","","","","","","","","","","","","","","","","","<code>DN</code>: Always use the default encoding for NaN results. …","","","","","Indicates any non-trapped exceptions that have been …","<code>FZ</code>: When a result would be denormal, yield zero instead. …","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of this register","Retrieve the current value of this register","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The name of the enum variant in code, if one is defined …","","<code>RMode</code>: The IEEE 754 rounding mode in use.","Update the register to the given value.","Update the register to the given value.","<code>AHP</code>: Use an alternative format for half-precision floats …","<code>DN</code>: Always use the default encoding for NaN results. …","Indicates any non-trapped exceptions that have been …","<code>FZ</code>: When a result would be denormal, yield zero instead. …","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …","<code>RMode</code>: The IEEE 754 rounding mode in use.","For each type of floating-point exception, defines whether …","For each type of floating-point exception, defines whether …","","","","","","","","","","","","","<code>AHP</code>: Use an alternative format for half-precision floats …","<code>DN</code>: Always use the default encoding for NaN results. …","Indicates any non-trapped exceptions that have been …","<code>FZ</code>: When a result would be denormal, yield zero instead. …","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …","<code>RMode</code>: The IEEE 754 rounding mode in use.","For each type of floating-point exception, defines whether …","Breakpoint triggered at current exception level.","Breakpoint triggered at lower exception level.","Executed a <code>BRK</code> breakpoint instruction.","Classifies different exception causes.","Exception from current level using current-level SP …","Exception from current level using SP_EL0 (thread mode)","Data abort triggered at current exception level.","Data abort triggered at lower exception level.","Trapped access to a FPU/vector register or instruction.","An external interrupt through the higher-priority fast …","Trapped floating point exception.","Tried to execute instructions after an illegal return.","Instruction abort triggered at current exception level.","Instruction abort triggered at lower exception level.","An external interrupt (IRQ).","The kind of exception being handled: sync, IRQ, FIQ, …","Exception from lower level (e.g., EL0) in 64-bit mode","Exception from lower level (e.g., EL0) in 32-bit mode","<code>DAIF</code>: Controls masking of different kinds of exceptions.","Program counter not properly aligned.","Improperly authenticated pointer detected. Requires …","Stack pointer not properly aligned.","The exception level that generated an exception.","Software step at current exception level.","Software step at lower exception level.","Triggered a system call via the <code>SVC</code> instruction.","A standard exception traceable to a specific instruction.","<code>ESR_ELx</code>: Holds information about the cause of the …","An internal error with the processor (SError).","System error (SError).","Trapped access to a system register or instruction.","Tried to execute an undefined/unsupported opcode, or for …","Trapped access to a vector register or instruction.","<code>VBAR_ELx</code>: Contains the address of the <code>VectorTable</code> that the …","A single entry in the exception <code>VectorTable</code>.","Exception vector table that contains code to handle …","Trapped execution of a wait instruction (<code>WFE</code>/<code>WFI</code>).","Watchpoint triggered at current exception level.","Watchpoint triggered at lower exception level.","","","","","","","","","","","","","","","","","<code>EC</code>: The class of exception that was triggered.","<code>ISS</code>: Additional data about the exception in a format that …","","","","","","","<code>D</code>: Mask debugging-related exceptions (breakpoints, …","","","","","","","","","<code>F</code>: Mask fast (FIQ) interrupts.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieve the current value of this register for the …","Retrieve the current value of this register","Retrieve the current value of this register for the …","","<code>I</code>: Mask regular (IRQ) interrupts.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>IL</code>: When set, indicates that the instruction that …","","The name of the enum variant in code, if one is defined …","","Update the register for the specified exception level with …","Update the register to the given value.","Update the register for the specified exception level with …","<code>EC</code>: The class of exception that was triggered.","<code>ISS</code>: Additional data about the exception in a format that …","<code>D</code>: Mask debugging-related exceptions (breakpoints, …","<code>F</code>: Mask fast (FIQ) interrupts.","<code>I</code>: Mask regular (IRQ) interrupts.","<code>IL</code>: When set, indicates that the instruction that …","<code>A</code>: Mask system error (SError) exceptions.","<code>A</code>: Mask system error (SError) exceptions.","","","","","","","","","","","","","","","","","","","","","","","","","<code>EC</code>: The class of exception that was triggered.","<code>ISS</code>: Additional data about the exception in a format that …","<code>D</code>: Mask debugging-related exceptions (breakpoints, …","<code>F</code>: Mask fast (FIQ) interrupts.","<code>I</code>: Mask regular (IRQ) interrupts.","<code>IL</code>: When set, indicates that the instruction that …","<code>A</code>: Mask system error (SError) exceptions.","Exception and interrupt handling.","","","","The kind of exception being handled","","","","","Contains the address of the <code>VectorTable</code> that the processor …","Exception vector table that contains code to handle each …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Retrieve the current value of this register for the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Update the register for the specified exception level with …","","","","","","","","","","Support for protected mode operation.","A task state segment (TSS) with fixed redirect and I/O …","Stack pointer and segment for a given privilege level","I/O permission map and interrupt redirect map, which are …","Saved task state that makes up the most significant part …","<code>EBP</code> value saved by the processor.","I/O permission map and interrupt redirect map","","","","","","","","","","","<code>CS</code> value saved by the processor.","Page table pointer from <code>ControlRegister3</code>.","<code>DS</code> value saved by the processor.","Indicates that a debug exception should be raised when …","<code>EDI</code> value saved by the processor.","","","","","<code>EFLAGS</code> value saved by the processor.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","<code>EAX</code> value saved by the processor.","<code>EBX</code> value saved by the processor.","<code>ECX</code> value saved by the processor.","<code>EDX</code> value saved by the processor.","<code>ES</code> value saved by the processor.","<code>FS</code> value saved by the processor.","<code>GS</code> value saved by the processor.","Saved task data and pointer to bitmaps","<code>EIP</code> value saved by the processor.","Indicates which handler to use for software-triggered …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The <code>IOPermissionBitmap</code> for this task.","Offset from the start of this structure to start of the …","<code>LocalDescriptorTableRegister</code> value to load when executing …","Create a new zero-initialized header","Create a new zero-initialized stack pointer","Stack pointer (<code>SP</code>) value for this privilege level.","Segment selector saved by the processor referencing the …","Stack pointer and segment for privilege levels 0–2.","Stack segment (<code>SS</code>) value for this privilege level.","Pointer to the shadow stack.","<code>ESI</code> value saved by the processor.","<code>SP</code> value saved by the processor for privilege level 3.","<code>SS</code> value saved by the processor for privilege level 3.","","","","","","","","","","","","","<code>CR8</code>: System control register for controlling interrupts …","<code>IA32_EFER</code>: Model-specific register that controls features …","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of this register","Retrieve the current value of this register","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.","<code>IA32_EFER.LME</code>: Support 64-bit mode.","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.","Support for protected mode operation.","Update the register to the given value.","Update the register to the given value.","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.","<code>IA32_EFER.LME</code>: Support 64-bit mode.","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …","","","","","","","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.","<code>IA32_EFER.LME</code>: Support 64-bit mode.","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …","Stack and I/O permission map pointers that make up the …","","","","","","","Returns the argument unchanged.","Stack pointers available for use when handling interrupts. …","Calls <code>U::from(self)</code>.","Offset from the start of this structure to start of the …","Create a header with zero-initialized stack pointers and an","Stack pointers to use when switching to privilege levels …","","","","<code>CR0</code>: System control register with flags affecting …","<code>CR4</code>: Miscellaneous system control flags.","<code>XCR0</code>: System control flags that indicate OS support for …","<code>EFLAGS</code>/<code>RFLAGS</code>: General flags, including control, status, …","<code>CR0.AM</code>: Enables strict alignment checks for memory access, …","<code>AC</code>: Enable strict alignment checks for memory accesses in …","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.","","","","","","","","","<code>CR0.CD</code>: Disable all memory caching.","<code>CR0.NW</code>: Disable write-back/write-through caching.","<code>CF</code>: Indicates an arithmetic instruction generated a …","Directly clear the <code>task_switched_without_fpu_state</code> flag in …","","","","","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …","","","","","<code>DF</code>: String instructions work on addresses high-to-low when …","","","","","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and …","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …","Processor feature detection with CPUID.","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in …","","","","","<code>XCR0.X87</code>: Hardcoded to 1.","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used …","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of the <code>EFLAGS</code> register.","Retrieve the current value of this register","Retrieve the current value of this register","Retrieve the current value of this register","<code>CR4.PGE</code>: Enable global pages, which are shared across task …","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.","Support for managing interrupts.","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Access to I/O space","<code>IOPL</code>: Sets the privilege threshold for a task to access …","<code>CR4.MCE</code>: Enable machine-check exception.","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> …","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …","<code>NT</code>: Indicates that the processor should switch back to a …","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode …","Support for virtual memory paging.","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.","<code>PF</code>: Indicates that the least-significant byte of the …","<code>CR4.PCE</code>: Allow access to performance monitoring counter in …","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …","Enable protected mode. Does not enable paging on its own. …","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.","Support for protected mode operation.","<code>XCR0.PKRU</code>: Manage protection key rights registers with …","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …","<code>RF</code>: Disable instruction breakpoints.","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.","Update the <code>EFLAGS</code> register with the given value, as …","Update the register to the given value.","Update the register to the given value.","Update the register to the given value.","<code>CR0.AM</code>: Enables strict alignment checks for memory access, …","<code>AC</code>: Enable strict alignment checks for memory accesses in …","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.","<code>CR0.CD</code>: Disable all memory caching.","<code>CR0.NW</code>: Disable write-back/write-through caching.","<code>CF</code>: Indicates an arithmetic instruction generated a …","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …","<code>DF</code>: String instructions work on addresses high-to-low when …","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and …","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in …","<code>XCR0.X87</code>: Hardcoded to 1.","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used …","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …","<code>CR4.PGE</code>: Enable global pages, which are shared across task …","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …","<code>IOPL</code>: Sets the privilege threshold for a task to access …","<code>CR4.MCE</code>: Enable machine-check exception.","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> …","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …","<code>NT</code>: Indicates that the processor should switch back to a …","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode …","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.","<code>PF</code>: Indicates that the least-significant byte of the …","<code>CR4.PCE</code>: Allow access to performance monitoring counter in …","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …","Enable protected mode. Does not enable paging on its own. …","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.","<code>XCR0.PKRU</code>: Manage protection key rights registers with …","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …","<code>RF</code>: Disable instruction breakpoints.","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.","<code>SF</code>: Indicates that the most-significant bit of a result is …","<code>OF</code>: Indicates that the result overflowed for signed …","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …","<code>CR0.TS</code>: Set by processor when task was switched but FPU …","<code>CR4.TSD</code>: Disable access to processor timestamp counter …","<code>TF</code>: Enable single-step debugging.","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …","<code>CR4.VME</code>: Enable interrupts and exception handling in …","<code>VM</code>: Enable virtual real mode.","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …","<code>ZF</code>: Indicates that the result of an instruction is zero.","<code>SF</code>: Indicates that the most-significant bit of a result is …","<code>OF</code>: Indicates that the result overflowed for signed …","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …","<code>CR0.TS</code>: Set by processor when task was switched but FPU …","<code>CR4.TSD</code>: Disable access to processor timestamp counter …","<code>TF</code>: Enable single-step debugging.","","","","","","","","","","","","","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …","<code>CR4.VME</code>: Enable interrupts and exception handling in …","<code>VM</code>: Enable virtual real mode.","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.","<code>CR0.AM</code>: Enables strict alignment checks for memory access, …","<code>AC</code>: Enable strict alignment checks for memory accesses in …","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.","<code>CR0.CD</code>: Disable all memory caching.","<code>CR0.NW</code>: Disable write-back/write-through caching.","<code>CF</code>: Indicates an arithmetic instruction generated a …","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …","<code>DF</code>: String instructions work on addresses high-to-low when …","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and …","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in …","<code>XCR0.X87</code>: Hardcoded to 1.","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used …","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …","<code>CR4.PGE</code>: Enable global pages, which are shared across task …","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …","<code>IOPL</code>: Sets the privilege threshold for a task to access …","<code>CR4.MCE</code>: Enable machine-check exception.","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> …","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …","<code>NT</code>: Indicates that the processor should switch back to a …","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode …","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.","<code>PF</code>: Indicates that the least-significant byte of the …","<code>CR4.PCE</code>: Allow access to performance monitoring counter in …","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …","Enable protected mode. Does not enable paging on its own. …","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.","<code>XCR0.PKRU</code>: Manage protection key rights registers with …","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …","<code>RF</code>: Disable instruction breakpoints.","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.","<code>SF</code>: Indicates that the most-significant bit of a result is …","<code>OF</code>: Indicates that the result overflowed for signed …","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …","<code>CR0.TS</code>: Set by processor when task was switched but FPU …","<code>CR4.TSD</code>: Disable access to processor timestamp counter …","<code>TF</code>: Enable single-step debugging.","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …","<code>CR4.VME</code>: Enable interrupts and exception handling in …","<code>VM</code>: Enable virtual real mode.","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …","<code>ZF</code>: Indicates that the result of an instruction is zero.","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …","<code>ZF</code>: Indicates that the result of an instruction is zero.","Indicates the processor’s maximum supported physical and …","Primary feature list returned in <code>CPUID.01H:ECX+EDX</code>.","Features applicable to 64-bit processors, returned in …","<code>AESNI</code>: Supports AES acceleration instructions.","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …","<code>x2APIC</code>: Supports the enhanced “x2” interface for the …","<code>AVX</code>: Supports AVX instructions.","","","","","","","Supports byte swapping with the <code>MOVBE</code> instruction.","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …","Supports carry-less multiplication of two 64-bit integers …","Supports disabling xTPR task priority messages to the …","","","","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU …","Supports counting the set bits in a value with the <code>POPCNT</code> …","Low-level CPUID call. Writes the leaf/subleaf index given …","<code>SDBG</code>: Supports an MSR for chip debugging.","<code>DS</code>: Supports writing debug information to memory.","<code>DTES64</code>: Supports 64-bit addresses for the debug store.","<code>DE</code>: Supports breaking on I/O and on accessing debug …","","","","<code>EIST</code>: Supports enhanced SpeedStep throttling.","","","","<code>XSAVE</code>: Supports instructions for saving and restoring …","<code>OSXSAVE</code>: Reflects the value of […","<code>F16C</code>: Supports conversion instructions for 16-bit floats.","","","","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","<code>FMA</code>: Supports fused multiply-add SSE instructions.","Retrieve the feature list from the processor using the …","Retrieve the extended feature list from the processor …","Retrieve the supported address space sizes from the …","<code>PGE</code>: Supports global pages, which are available in all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …","<code>MCA</code>: Supports extended features for reporting internal …","<code>MCE</code>: Defines an exception (18) for reporting internal …","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …","Get the maximum primary index value (EAX) supported for …","Get the maximum primary index value (EAX) supported for …","<code>DCA</code>: Supports prefetching memory-mapped data from a device.","<code>MTRR</code>: Has memory type range registers.","<code>MMX</code>: Supports MMX instructions.","<code>MSR</code>: Has model-specific registers which can be accessed …","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.","<code>PDCM</code>: Supports a model-specific register that lists …","<code>APIC</code>: The processor has a built-in advanced programmable …","<code>FPU</code>: The processor has a built-in x87 floating-point unit","<code>PAT</code>: Supports page attribute tables.","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …","<code>PBE</code>: Supports a pin notifying a stopped processor that an …","<code>DS-CPL</code>: Supports saving the permission level with data …","<code>PAE</code>: Supports mapping virtual memory to physical addresses …","<code>PCID</code>: Supports process-context IDs.","Supports random number generation with the <code>RDRAND</code> …","<code>SMX</code>: Supports safer-mode extensions","The processor can snoop on its own cache line. This helps …","<code>PSN</code>: Supports retrieving a processor serial number with …","<code>AESNI</code>: Supports AES acceleration instructions.","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …","<code>x2APIC</code>: Supports the enhanced “x2” interface for the …","<code>AVX</code>: Supports AVX instructions.","Supports byte swapping with the <code>MOVBE</code> instruction.","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …","Supports carry-less multiplication of two 64-bit integers …","Supports disabling xTPR task priority messages to the …","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU …","Supports counting the set bits in a value with the <code>POPCNT</code> …","<code>SDBG</code>: Supports an MSR for chip debugging.","<code>DS</code>: Supports writing debug information to memory.","<code>DTES64</code>: Supports 64-bit addresses for the debug store.","<code>DE</code>: Supports breaking on I/O and on accessing debug …","<code>EIST</code>: Supports enhanced SpeedStep throttling.","<code>XSAVE</code>: Supports instructions for saving and restoring …","<code>OSXSAVE</code>: Reflects the value of […","<code>F16C</code>: Supports conversion instructions for 16-bit floats.","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.","<code>FMA</code>: Supports fused multiply-add SSE instructions.","<code>PGE</code>: Supports global pages, which are available in all …","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …","<code>MCA</code>: Supports extended features for reporting internal …","<code>MCE</code>: Defines an exception (18) for reporting internal …","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …","<code>DCA</code>: Supports prefetching memory-mapped data from a device.","<code>MTRR</code>: Has memory type range registers.","<code>MMX</code>: Supports MMX instructions.","<code>MSR</code>: Has model-specific registers which can be accessed …","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.","<code>PDCM</code>: Supports a model-specific register that lists …","<code>APIC</code>: The processor has a built-in advanced programmable …","<code>FPU</code>: The processor has a built-in x87 floating-point unit","<code>PAT</code>: Supports page attribute tables.","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …","<code>PBE</code>: Supports a pin notifying a stopped processor that an …","<code>DS-CPL</code>: Supports saving the permission level with data …","<code>PAE</code>: Supports mapping virtual memory to physical addresses …","<code>PCID</code>: Supports process-context IDs.","Supports random number generation with the <code>RDRAND</code> …","<code>SMX</code>: Supports safer-mode extensions","The processor can snoop on its own cache line. This helps …","<code>PSN</code>: Supports retrieving a processor serial number with …","<code>SSE</code>: Supports SSE instructions.","<code>SSE2</code>: Supports SSE2 instructions.","<code>SSE3</code>: Supports SSE3 instructions.","<code>SSE4_1</code>: Supports SSE4.1 instructions.","<code>SSE4_2</code>: Supports SSE4.2 instructions.","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.","<code>TM</code>: Has thermal monitor control circuitry (TCC).","Supports the TM2 thermal monitor interface.","<code>ACPI</code>: Supports thermal monitoring and power management …","<code>TSC</code>: Supports reading the processor’s timestamp with …","<code>VME</code>: Supports virtual real-mode extensions (VME) and …","<code>VMX</code>: Supports virtual machine extensions.","<code>SSE</code>: Supports SSE instructions.","<code>SSE2</code>: Supports SSE2 instructions.","<code>SSE3</code>: Supports SSE3 instructions.","<code>SSE4_1</code>: Supports SSE4.1 instructions.","<code>SSE4_2</code>: Supports SSE4.2 instructions.","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.","<code>TM</code>: Has thermal monitor control circuitry (TCC).","Supports the TM2 thermal monitor interface.","<code>ACPI</code>: Supports thermal monitoring and power management …","<code>TSC</code>: Supports reading the processor’s timestamp with …","","","","","","","","","","<code>VME</code>: Supports virtual real-mode extensions (VME) and …","<code>VMX</code>: Supports virtual machine extensions.","<code>AESNI</code>: Supports AES acceleration instructions.","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …","<code>x2APIC</code>: Supports the enhanced “x2” interface for the …","<code>AVX</code>: Supports AVX instructions.","Supports byte swapping with the <code>MOVBE</code> instruction.","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …","Supports carry-less multiplication of two 64-bit integers …","Supports disabling xTPR task priority messages to the …","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU …","Supports counting the set bits in a value with the <code>POPCNT</code> …","<code>SDBG</code>: Supports an MSR for chip debugging.","<code>DS</code>: Supports writing debug information to memory.","<code>DTES64</code>: Supports 64-bit addresses for the debug store.","<code>DE</code>: Supports breaking on I/O and on accessing debug …","<code>EIST</code>: Supports enhanced SpeedStep throttling.","<code>XSAVE</code>: Supports instructions for saving and restoring …","<code>OSXSAVE</code>: Reflects the value of […","<code>F16C</code>: Supports conversion instructions for 16-bit floats.","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.","<code>FMA</code>: Supports fused multiply-add SSE instructions.","<code>PGE</code>: Supports global pages, which are available in all …","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …","<code>MCA</code>: Supports extended features for reporting internal …","<code>MCE</code>: Defines an exception (18) for reporting internal …","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …","<code>DCA</code>: Supports prefetching memory-mapped data from a device.","<code>MTRR</code>: Has memory type range registers.","<code>MMX</code>: Supports MMX instructions.","<code>MSR</code>: Has model-specific registers which can be accessed …","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.","<code>PDCM</code>: Supports a model-specific register that lists …","<code>APIC</code>: The processor has a built-in advanced programmable …","<code>FPU</code>: The processor has a built-in x87 floating-point unit","<code>PAT</code>: Supports page attribute tables.","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …","<code>PBE</code>: Supports a pin notifying a stopped processor that an …","<code>DS-CPL</code>: Supports saving the permission level with data …","<code>PAE</code>: Supports mapping virtual memory to physical addresses …","<code>PCID</code>: Supports process-context IDs.","Supports random number generation with the <code>RDRAND</code> …","<code>SMX</code>: Supports safer-mode extensions","The processor can snoop on its own cache line. This helps …","<code>PSN</code>: Supports retrieving a processor serial number with …","<code>SSE</code>: Supports SSE instructions.","<code>SSE2</code>: Supports SSE2 instructions.","<code>SSE3</code>: Supports SSE3 instructions.","<code>SSE4_1</code>: Supports SSE4.1 instructions.","<code>SSE4_2</code>: Supports SSE4.2 instructions.","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.","<code>TM</code>: Has thermal monitor control circuitry (TCC).","Supports the TM2 thermal monitor interface.","<code>ACPI</code>: Supports thermal monitoring and power management …","<code>TSC</code>: Supports reading the processor’s timestamp with …","<code>VME</code>: Supports virtual real-mode extensions (VME) and …","<code>VMX</code>: Supports virtual machine extensions.","<code>IA32_APIC_BASE</code>: A model-specific register that allows …","<code>#AC</code>: Improperly aligned memory access in user mode while …","<code>#BR</code>: Out-of-bounds index detected with <code>BOUND</code> instruction.","<code>#BP</code>: Breakpoint via <code>INT3</code> instruction.","<code>#CP</code>: Improper branching detected by control-flow guard.","The default APIC base address when the processor is reset.","<code>#DB</code>: Breakpoints or other debugging-related traps/faults.","<code>#NM</code>: Tried to execute FPU instruction with no coprocessor …","<code>#DE</code>: Division by zero or overflow in division.","<code>#DF</code>: A fault was triggered while handling another …","<code>#MF</code>: Unmasked floating-point error that was <em>not</em> part of a …","<code>IDTR</code>: Contains the memory range of the interrupt …","An interrupt/exception number.","<code>#UD</code>: Unrecognized or reserved instruction opcode.","<code>#TS</code>: An error was found in the TSS while task switching.","<code>#MC</code>: Internal processor/bus error.","<code>NMI</code>: Severe external interrupt that cannot be ignored.","<code>#OF</code>: Overflow condition was detected with <code>INTO</code> instruction.","<code>#PF</code>: Tried to load a page that was not present, or used a …","<code>#GP</code>: Memory protection or other miscellaneous error.","<code>#XM</code>: Unmasked floating-point error during SIMD operation.","<code>#NP</code>: Tried to use a segment without a descriptor defined. …","<code>#SS</code>: The stack overflowed its segment or the segment was …","<code>#VE</code>: Improper use of virtualization extensions.","Base address of the APIC’s registers.","Base address of the descriptor table.","Indicates that this core was designated as the bootstrap …","","","","","","","","","","","","","","Can be cleared to disable the APIC. However, it cannot be …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of this register","Retrieve the current value of this register","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The inclusive maximum address offset (i.e., size - 1) of …","The name of the enum variant in code, if one is defined …","","","Indicates that this is interrupt vector is reserved by the …","Update the register to the given value.","Update the register to the given value.","Update the base address of the APIC’s registers.","Indicates that this core was designated as the bootstrap …","Can be cleared to disable the APIC. However, it cannot be …","Enable the APIC’s","","","","","","","","","","Indicates that this core was designated as the bootstrap …","Can be cleared to disable the APIC. However, it cannot be …","Enable the APIC’s","Enable the APIC’s","Read a 16-bit value from the port at the given address in …","Read a 32-bit value from the port at the given address in …","Read an 8-bit value from the port at the given address in …","Write a 16-bit value to the port at the given address in …","Write a 16-bit value to the port at the given address in …","Write an 8-bit value to the port at the given address in …","<code>CR2</code>: Contains the address that triggered a page fault.","<code>CR3</code>: System control register that contains the top-level …","An page table entry (any level) that directly maps a page.","An entry in a page table at any level.","A page table entry (any level) that either directly maps a …","Bottom-level page table entry that maps a single 4KB page.","Second-level page table (page directory) entry that either …","<code>A</code>: Set by the processor when an instruction accesses the …","Get the address of the top-level page table.","<code>PAT</code>: Used to associate this page with a page attribute …","","","","","","","","","","<code>PCD</code>: Disables caching for this memory region.","<code>CR3.PCD</code>: Disables caching for the top-level page table.","","","","","","","","","<code>D</code>: Set by the processor when an instruction modifies the …","","","","","","","","","Print this object’s bitfield values. Helper method for …","Print this object’s bitfield values. Helper method for …","Print this object’s bitfield values. Helper method for …","Print this object’s bitfield values. Helper method for …","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of this register","Retrieve the current value of this register","<code>G</code>: Indicates that this is a global page shared by all task …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>PS</code>: Indicates that this entry directly maps a page. …","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …","<code>P</code>: Indicates that this entry is mapped. Otherwise the …","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …","The protection key that applies to this memory region.","Update the register to the given value.","Update the register to the given value.","<code>A</code>: Set by the processor when an instruction accesses the …","Set the address of the top-level page table.","<code>PAT</code>: Used to associate this page with a page attribute …","","<code>PCD</code>: Disables caching for this memory region.","<code>CR3.PCD</code>: Disables caching for the top-level page table.","<code>D</code>: Set by the processor when an instruction modifies the …","<code>G</code>: Indicates that this is a global page shared by all task …","<code>PS</code>: Indicates that this entry directly maps a page. …","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …","<code>P</code>: Indicates that this entry is mapped. Otherwise the …","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …","The protection key that applies to this memory region.","<code>U/S</code>: Allows access to this memory region from permission …","<code>R/W</code>: Allows writes to this memory region.","<code>PWT</code>: Enables write-through caching for this memory region.","<code>CR3.PWT</code>: Enables write-through caching for the top-level …","","","","","","","","","","","","","<code>U/S</code>: Allows access to this memory region from permission …","<code>A</code>: Set by the processor when an instruction accesses the …","<code>PAT</code>: Used to associate this page with a page attribute …","","<code>PCD</code>: Disables caching for this memory region.","<code>CR3.PCD</code>: Disables caching for the top-level page table.","<code>D</code>: Set by the processor when an instruction modifies the …","<code>G</code>: Indicates that this is a global page shared by all task …","<code>PS</code>: Indicates that this entry directly maps a page. …","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …","<code>P</code>: Indicates that this entry is mapped. Otherwise the …","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …","The protection key that applies to this memory region.","<code>U/S</code>: Allows access to this memory region from permission …","<code>R/W</code>: Allows writes to this memory region.","<code>PWT</code>: Enables write-through caching for this memory region.","<code>CR3.PWT</code>: Enables write-through caching for the top-level …","<code>R/W</code>: Allows writes to this memory region.","<code>PWT</code>: Enables write-through caching for this memory region.","<code>CR3.PWT</code>: Enables write-through caching for the top-level …","A <code>GateDescriptor</code> for a call to 32/64-bit code.","A <code>GateDescriptor</code> for a call to 16-bit code.","<code>CS</code> register, which controls instruction loading","<code>DS</code> register, which controls the default segment for …","Settings common to <code>SegmentDescriptor</code>s and <code>GateDescriptor</code>s.","<code>ES</code> segment register, which can be used as an additional …","<code>FS</code> segment register, which can be used as an additional …","<code>GS</code> segment register, which can be used as an additional …","An entry in a segment descriptor table that points to an …","Settings for <code>GateDescriptor</code>s.","Generic entry in a global/local/interrupt descriptor …","Settings for <code>GenericDescriptor</code>s.","<code>GDTR</code>: Points to the memory range of the global descriptor …","Bitmap that controls which I/O port addresses are covered …","A <code>GateDescriptor</code> for a 32/64-bit interrupt handler.","A <code>GateDescriptor</code> for a 16-bit interrupt handler.","The maximum supported value of the <code>limit</code> field (20 bits).","A <code>SegmentDescriptor</code> for a segment that contains a local …","<code>LDTR</code>: Contains a <code>Selector</code> referencing a <code>SegmentDescriptor</code> …","Size in bytes required to map all I/O ports","An entry in a segment descriptor table that defines a new …","Settings for <code>SegmentDescriptor</code>s.","Standard segment registers (<code>CS</code>, <code>DS</code>, <code>SS</code>, etc.), which …","A reference to an entry in a segment descriptor table.","<code>SS</code> segment register, which controls the location of the …","Discriminate types of segment descriptors that are not …","A <code>GateDescriptor</code> for task switching.","<code>TR</code>: Contains a <code>Selector</code> referencing a <code>SegmentDescriptor</code> …","A <code>SegmentDescriptor</code> for a 32/64-bit task state segment …","A <code>SegmentDescriptor</code> for a 16-bit task state segment (TSS) …","A <code>SegmentDescriptor</code> for a 32/64-bit task state segment …","A <code>SegmentDescriptor</code> for a 16-bit task state segment (TSS) …","A <code>GateDescriptor</code> for a 32/64-bit interrupt handler.","A <code>GateDescriptor</code> for a 16-bit trap handler.","Base virtual address of the segment, to which offsets are …","Base address of the descriptor table","The processor sets this bit whenever a segment register …","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of stack parameters to copy if the code segment …","","","","","","","","","","","If this is a code descriptor, indicates that this segment …","<code>L</code>: If this is a code segment, indicates that it should be …","If this is a code descriptor, indicates that the segment …","Get a pointer to the <code>SegmentDescriptor</code> for the …","If this is a data descriptor, indicates that the segment …","If this is a data descriptor, indicates that this segment …","","","","","","","","","Calculate the address of the descriptor referenced by this …","Offset of the entry point in code segment referenced by …","","","","","","","","","","","Common descriptor settings.","Common segment descriptor settings.","Common gate descriptor settings.","","","","","","","","","","","Print this object’s bitfield values. Helper method for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieve the current value of this register","Retrieve the current value of this register","Retrieve the current value of this register","Retrieve the current value of this register","<code>G</code>: Indicates that the segment limit is in units of 4KB. …","","One-based index of the <code>interrupt_stack</code> pointer to use when …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>S</code>: Indicates that this is an application section …","Indicates whether this is a code (true) or data (false) …","Indicates that this is a <code>GateDescriptor</code>.","Indicates that this is a <code>GateDescriptor</code>.","Get the value in this bitmap that indicates whether the …","The “limit” of the segment, which is a maximum or …","The inclusive maximum address offset (i.e., size - 1) of …","Indicates that this selector references a descriptor in …","The last I/O port that is covered by this map. The bits …","Calculate the last I/O port that is covered by a map of …","The name of the enum variant in code, if one is defined …","","Create a new selector with the given field values","Create a zero-initialized descriptor","Create a zero-initialized descriptor","Create a null selector","The offset of the referenced segment entry in the …","<code>AVL</code>: Ignored bit that can be used by the operating system.","","<code>P</code>: Indicates that the segment is defined.","<code>DPL</code>: The privilege level associated with the segment.","<code>RPL</code>: The privilege level “requested” when accessing …","Calculate the size in bytes of a map that has bits for …","Selector that points to the code or task state segment to …","Update the register with the value in this struct.","Update the register with the provided selector value.","Update the register with the provided selector value.","Update the register to the given value.","Update the base address.","The processor sets this bit whenever a segment register …","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …","Number of stack parameters to copy if the code segment …","If this is a code descriptor, indicates that this segment …","<code>L</code>: If this is a code segment, indicates that it should be …","If this is a code descriptor, indicates that the segment …","If this is a data descriptor, indicates that the segment …","If this is a data descriptor, indicates that this segment …","Update the offset of the entry point within the referenced …","<code>G</code>: Indicates that the segment limit is in units of 4KB. …","One-based index of the <code>interrupt_stack</code> pointer to use when …","<code>S</code>: Indicates that this is an application section …","Indicates whether this is a code (true) or data (false) …","Update the segment limit.","Indicates that this selector references a descriptor in …","Update the offset of the referenced entry in the …","<code>AVL</code>: Ignored bit that can be used by the operating system.","Set the value in this bitmap that indicates whether the …","<code>P</code>: Indicates that the segment is defined.","<code>DPL</code>: The privilege level associated with the segment.","<code>RPL</code>: The privilege level “requested” when accessing …","Update the selector pointing to the segment to be accessed …","If this is a system descriptor, indicates which type.","Update the global descriptor table pointer and all segment …","The number of bytes in this structure.","If this is a system descriptor, indicates which type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The processor sets this bit whenever a segment register …","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …","Number of stack parameters to copy if the code segment …","If this is a code descriptor, indicates that this segment …","<code>L</code>: If this is a code segment, indicates that it should be …","If this is a code descriptor, indicates that the segment …","If this is a data descriptor, indicates that the segment …","If this is a data descriptor, indicates that this segment …","<code>G</code>: Indicates that the segment limit is in units of 4KB. …","One-based index of the <code>interrupt_stack</code> pointer to use when …","<code>S</code>: Indicates that this is an application section …","Indicates whether this is a code (true) or data (false) …","Indicates that this selector references a descriptor in …","<code>AVL</code>: Ignored bit that can be used by the operating system.","<code>P</code>: Indicates that the segment is defined.","<code>DPL</code>: The privilege level associated with the segment.","<code>RPL</code>: The privilege level “requested” when accessing …","If this is a system descriptor, indicates which type."],"i":[0,0,0,0,0,0,0,0,5,0,5,4,0,4,4,4,4,5,4,5,0,4,4,5,4,5,0,4,5,5,4,5,4,5,4,5,0,0,11,11,11,0,0,11,8,8,10,11,12,8,10,11,12,8,10,11,12,11,8,10,11,12,8,8,10,11,12,10,8,8,8,10,11,12,8,8,10,10,11,11,12,12,8,10,11,8,10,11,12,11,11,11,8,8,10,8,8,10,8,8,8,8,8,8,10,11,12,8,10,11,12,8,10,11,12,8,8,10,8,8,8,8,21,21,21,0,24,24,21,21,21,23,21,21,21,21,23,0,24,24,0,21,21,21,0,21,21,21,23,0,23,21,21,21,21,0,0,0,21,21,21,72,26,73,23,24,25,20,21,72,26,73,23,24,25,20,21,20,20,23,24,25,20,21,21,25,25,20,21,23,24,25,20,21,25,23,24,25,20,21,72,26,73,23,24,25,25,20,20,21,21,73,25,20,21,25,72,26,73,23,24,25,20,21,20,21,21,21,73,25,20,20,20,25,25,25,20,25,25,72,26,73,23,24,25,20,21,72,26,73,23,24,25,20,21,72,26,73,23,24,25,20,21,20,20,25,25,25,20,25,0,27,27,27,0,27,27,27,27,0,0,28,74,27,28,74,27,27,27,27,28,74,27,74,28,74,27,74,28,74,27,28,74,27,28,74,27,0,0,0,0,0,29,31,31,29,30,38,31,29,30,38,29,30,29,29,29,29,29,31,29,30,38,29,31,29,30,38,31,29,30,38,29,29,29,29,29,29,29,31,29,38,31,29,30,38,38,29,29,29,30,30,29,29,30,29,29,29,29,31,29,30,38,31,29,30,38,31,29,30,38,0,0,40,41,40,41,40,41,40,41,40,41,40,41,40,40,41,41,40,41,40,41,41,41,41,0,40,41,41,41,41,41,40,41,40,40,41,40,41,40,41,41,41,41,41,40,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,43,44,44,45,45,45,45,44,43,46,45,44,43,46,45,43,43,44,43,44,43,46,45,46,46,44,43,46,45,44,44,43,46,45,46,46,0,46,44,43,46,45,45,43,43,44,44,43,43,46,46,45,45,44,43,46,45,46,44,0,44,44,43,46,45,0,44,46,43,45,45,43,44,46,0,43,44,46,46,46,43,46,0,45,46,44,46,44,43,46,45,43,44,44,45,45,45,45,43,43,44,46,46,44,46,46,46,45,43,43,46,44,44,44,46,43,45,45,43,44,46,43,44,46,46,46,43,46,45,46,44,46,44,44,46,45,46,46,46,46,43,46,44,46,46,44,44,44,46,43,44,44,44,46,45,46,46,46,46,43,46,44,44,43,46,45,44,43,46,45,44,43,46,45,46,46,44,44,44,46,43,44,44,45,45,45,45,43,43,44,46,46,44,46,46,46,45,43,43,46,44,44,44,46,43,45,45,43,44,46,43,44,46,46,46,43,46,45,46,44,46,44,44,46,45,46,46,46,46,43,46,44,46,46,44,44,44,46,43,44,43,44,0,0,0,47,47,47,47,47,48,49,47,48,49,47,47,47,47,47,48,49,47,47,47,47,0,47,47,47,47,47,48,49,47,47,48,49,47,47,47,47,48,49,47,47,47,48,48,49,49,47,47,48,49,47,47,48,49,47,47,47,47,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,49,47,48,49,47,48,49,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,52,52,52,52,51,52,52,52,52,52,0,0,52,52,52,52,52,52,52,52,52,52,52,51,53,51,52,53,51,52,53,51,52,53,51,52,52,53,51,51,52,53,51,52,53,51,52,52,53,51,51,53,51,52,52,53,51,53,52,52,52,52,53,51,51,51,51,51,52,53,51,52,53,51,52,53,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,75,55,76,57,56,55,57,58,56,55,57,58,75,55,56,55,57,58,56,55,57,58,76,56,55,57,58,56,55,57,58,75,76,77,57,56,56,55,55,57,57,58,58,56,55,76,56,55,57,58,77,75,75,55,76,56,55,75,55,76,57,75,55,76,76,77,75,75,55,76,75,75,75,55,56,55,57,58,56,55,57,58,56,55,57,58,75,75,76,57,75,55,76,76,77,75,75,55,76,75,75,75,55,75,75,55,64,64,70,70,0,70,70,70,0,0,0,0,0,0,64,64,60,64,0,69,0,0,0,0,70,0,64,0,64,64,64,64,64,64,60,62,78,78,79,80,70,62,63,64,65,66,60,67,68,61,69,79,80,70,62,63,64,65,66,60,67,68,61,69,61,62,63,64,65,66,60,67,68,61,64,78,78,78,79,78,78,62,63,64,66,60,67,68,61,63,68,62,63,64,65,66,60,67,68,61,69,65,60,68,62,63,64,65,66,60,67,68,61,69,78,79,80,70,62,63,63,64,64,65,66,66,60,67,67,68,61,61,69,79,80,70,62,67,64,61,79,80,70,62,63,64,65,66,60,67,68,61,69,78,78,78,64,69,60,62,63,69,69,64,64,63,60,68,63,63,67,64,78,78,63,69,68,79,80,70,62,60,78,78,61,78,78,78,78,78,68,67,61,78,78,60,63,63,67,69,78,78,63,68,78,62,69,78,79,80,70,62,63,64,65,66,60,67,68,61,69,79,80,70,62,63,64,65,66,60,67,68,61,69,79,80,70,62,63,64,65,66,60,67,68,61,69,78,78,61,78,78,78,78,78,67,61,78,78,63,67,78,78,63,78],"f":[0,0,0,0,[1,2],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[3,4],[[]],[[]],[[],4],[[],5],0,[[]],[[]],[5],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0,0,0,0,0,0,0,[8,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[10,10],[11,11],[12,12],[[11,11],13],[[],8],[[],10],[[],11],[[],12],[8,9],[[8,8],9],[[10,10],9],[[11,11],9],[[12,12],9],[10,12],[8,9],[8,9],[[8,14],15],[[10,14],15],[[11,14],15],[[12,14],15],[[]],[16,8],[[]],[16,10],[3,11],[[]],[3,12],[[]],[[],8],[[],10],[[11,17]],[[]],[[]],[[]],[[]],[11,[[19,[18]]]],[11,[[19,[18]]]],[[11,11],[[19,[13]]]],[8,11],[8],[10],[[8,9]],[[8,9]],[[10,12]],[[8,9]],[[8,9]],[[8,11]],[[8,12]],[8,12],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[8,9],8],[[8,9],8],[[10,12],10],[[8,9],8],[[8,9],8],[[8,11],8],[[8,12],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,21],[20,22],[23,23],[24,24],[25,25],[20,20],[21,21],[[21,21],13],[25,9],[[],25],[[],20],[[],21],[[23,23],9],[[24,24],9],[[25,25],9],[[20,20],9],[[21,21],9],[25,9],[[23,14],15],[[24,14],15],[[25,14],15],[[20,14],15],[[21,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[16,25],[16,20],[[]],[[]],[3,21],[4,26],[[],25],[4,20],[[21,17]],[25,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,9],[21,[[19,[18]]]],[21,[[19,[18]]]],[[21,21],[[19,[13]]]],[[4,26]],[25],[[4,20]],[[20,21]],[[20,22]],[[25,9]],[[25,9]],[[25,9]],[[20,9]],[[25,9]],[25,9],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[20,21],20],[[20,22],20],[[25,9],25],[[25,9],25],[[25,9],25],[[20,9],20],[[25,9],25],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[[27,27],9],[[27,14],15],[[]],[[]],[[]],[[],28],[[]],[[]],[[]],[28],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[30,30],0,0,0,0,0,[[31,31],9],[[29,29],9],[[30,30],9],[[[38,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,37]]]],[38,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,37]]]]],9],0,[[31,14],15],[[29,14],15],[[30,14],15],[[[38,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,39]]]],14],15],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[],29],[[],30],0,0,0,0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],0,0,[[]],[[]],[[]],[[]],[40,40],[41,41],[[],40],[[],41],[[40,40],9],[[41,41],9],[[40,14],15],[[41,14],15],[1,40],[[]],[16,41],[[]],[[],40],[[],41],[[]],[[]],[41,9],[41,9],[41,9],0,[40],[41],[[41,9]],[[41,9]],[[41,9]],[[41,9]],[[40,3]],[41,9],[40,3],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[41,9],41],[[41,9],41],[[41,9],41],[[41,9],41],[[40,3],40],0,[[]],[[]],[42,42],[[],42],[[42,42],9],[[42,14],15],[[]],0,[[]],0,[[],42],0,[[],6],[[],6],[[],7],0,0,0,0,[43,9],[44,9],[44,9],[45,9],[45,9],[45,9],[45,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,9],[43,9],[44,9],[[]],[44,44],[43,43],[46,46],[45,45],[46,9],[46,9],[[],44],[[],43],[[],46],[[],45],[44,9],[[44,44],9],[[43,43],9],[[46,46],9],[[45,45],9],[46,9],[46,9],0,[46,9],[[44,14],15],[[43,14],15],[[46,14],15],[[45,14],15],[45,9],[43,9],[43,9],[[]],[1,44],[1,43],[[]],[1,46],[[]],[16,45],[[]],[[],44],[[],43],[[],46],[[],45],[46,9],[44,9],0,[44,9],[[]],[[]],[[]],[[]],0,[44,3],[46,9],[43,9],[45,9],[45,9],[43,9],[44,9],[46,9],0,[43,9],[44,9],[46,9],[46,9],[46,9],[43,9],[46,9],0,[45,9],[46,9],[44,9],[46,9],[44],[43],[46],[45],[[43,9]],[[44,9]],[[44,9]],[[45,9]],[[45,9]],[[45,9]],[[45,9]],[[43,9]],[[43,9]],[[44,9]],[[46,9]],[[46,9]],[[44,9]],[[46,9]],[[46,9]],[[46,9]],[[45,9]],[[43,9]],[[43,9]],[[46,9]],[[44,9]],[[44,9]],[[44,3]],[[46,9]],[[43,9]],[[45,9]],[[45,9]],[[43,9]],[[44,9]],[[46,9]],[[43,9]],[[44,9]],[[46,9]],[[46,9]],[[46,9]],[[43,9]],[[46,9]],[[45,9]],[[46,9]],[[44,9]],[[46,9]],[[44,9]],[[44,9]],[[46,9]],[[45,9]],[[46,9]],[[46,9]],[[46,9]],[[46,9]],[[43,9]],[[46,9]],[[44,9]],[[46,9]],[[46,9]],[[44,9]],[[44,9]],[[44,9]],[[46,9]],[[43,9]],[[44,9]],[44,9],[44,9],[46,9],[45,9],[46,9],[46,9],[46,9],[46,9],[43,9],[46,9],[44,9],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[46,9],[46,9],[44,9],[44,9],[44,9],[46,9],[[43,9],43],[[44,9],44],[[44,9],44],[[45,9],45],[[45,9],45],[[45,9],45],[[45,9],45],[[43,9],43],[[43,9],43],[[44,9],44],[[46,9],46],[[46,9],46],[[44,9],44],[[46,9],46],[[46,9],46],[[46,9],46],[[45,9],45],[[43,9],43],[[43,9],43],[[46,9],46],[[44,9],44],[[44,9],44],[[44,3],44],[[46,9],46],[[43,9],43],[[45,9],45],[[45,9],45],[[43,9],43],[[44,9],44],[[46,9],46],[[43,9],43],[[44,9],44],[[46,9],46],[[46,9],46],[[46,9],46],[[43,9],43],[[46,9],46],[[45,9],45],[[46,9],46],[[44,9],44],[[46,9],46],[[44,9],44],[[44,9],44],[[46,9],46],[[45,9],45],[[46,9],46],[[46,9],46],[[46,9],46],[[46,9],46],[[43,9],43],[[46,9],46],[[44,9],44],[[46,9],46],[[46,9],46],[[44,9],44],[[44,9],44],[[44,9],44],[[46,9],46],[[43,9],43],[[44,9],44],[43,9],[44,9],0,0,0,[47,9],[47,9],[47,9],[47,9],[[]],[[]],[[]],[[]],[[]],[[]],[47,9],[47,9],[47,9],[47,9],[47,47],[48,48],[49,49],[47,9],[47,9],[47,9],[47,9],[[22,22],[[50,[22]]]],[47,9],[47,9],[47,9],[47,9],[[],47],[[],48],[[],49],[47,9],[[47,47],9],[[48,48],9],[[49,49],9],[47,9],[47,9],[47,9],[[47,14],15],[[48,14],15],[[49,14],15],[47,9],[16,47],[[]],[16,48],[[]],[22,49],[[]],[47,9],[[],47],[[],48],[[],49],[47,9],[[]],[[]],[[]],[47,9],[47,9],[47,9],[47,9],[[],22],[[],22],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[[47,9]],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[47,9],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[47,9],[47,9],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],[[47,9],47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[51,1],0,[51,9],[[]],[[]],[[]],[[]],[[]],[[]],[52,52],[53,53],[51,51],[[52,52],13],[[],52],[[],53],[[],51],[51,9],[[52,52],9],[[53,53],9],[[51,51],9],[[52,14],15],[[53,14],15],[[51,14],15],[3,52],[[]],[[]],[16,51],[[]],[[],53],[[],51],[[52,17]],[[]],[[]],[[]],0,[52,[[19,[18]]]],[52,[[19,[18]]]],[[52,52],[[19,[13]]]],[52,9],[53],[51],[[51,1]],[[51,9]],[[51,9]],[[51,9]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[51,9],51],[[51,9],51],[[51,9],51],[51,9],[54,54],[54,22],[54,3],[[54,54]],[[54,22]],[[54,3]],0,0,0,0,0,0,0,[[],9],[55,1],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[55,9],[56,56],[55,55],[57,57],[58,58],[[],56],[[],55],[[],57],[[],58],[[],9],[[56,56],9],[[55,55],9],[[57,57],9],[[58,58],9],[[56,14],15],[[55,14],15],[[57,14],15],[[58,14],15],[59],[59],[59],[59],[[]],[1,56],[1,55],[[]],[1,57],[[]],[1,58],[[]],[[],56],[[],55],[[],9],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[55,54],[[],3],[56],[55],[9],[[55,1]],[9],[9],[9],[[55,9]],[9],[9],[9],[9],[9],[[55,54]],[3],[9],[9],[9],[[55,9]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],9],[9],[9],[9],[9],[[55,9],55],[9],[9],[9],[9],[9],[[55,54],55],[3],[9],[9],[9],[[55,9],55],[[],9],[[],9],[55,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[60,1],0,[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,3],[62,62],[63,63],[64,64],[65,65],[66,66],[60,60],[67,67],[68,68],[61,61],[[64,64],13],[[],9],[[],9],[[],9],[[],60],[[],9],[[],9],[[],62],[[],63],[[],64],[[],66],[[],60],[[],67],[[],68],[[],61],[63,1],[68,1],[[62,62],9],[[63,63],9],[[64,64],9],[[65,65],9],[[66,66],9],[[60,60],9],[[67,67],9],[[68,68],9],[[61,61],9],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,37]]]],[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,37]]]]],9],0,0,0,[[62,14],15],[[63,14],15],[[64,14],15],[[65,14],15],[[66,14],15],[[60,14],15],[[67,14],15],[[68,14],15],[[61,14],15],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36,39]]]],14],15],[59],[[]],[[]],[[]],[[]],[[]],[54,63],[[]],[3,64],[[]],[22,66],[[]],[[]],[[]],[22,67],[[]],[[]],[22,61],[[]],[[],63],[[],63],[70,63],[[],62],[67,9],[[64,17]],[61,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[64,9],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36]]]],54],9],[60,22],0,[63,9],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36]]]]],[[19,[71]]]],[1,[[19,[71]]]],[64,[[19,[18]]]],[64,[[19,[18]]]],[[54,3,9],63],[[],60],[[],68],[[],63],[63,54],[67,9],[[64,64],[[19,[13]]]],[[],9],[[],3],[63,3],[54,1],[68,63],[63],[63],[[70,63]],[62],[[60,1]],[9],[9],[[61,3]],[9],[9],[9],[9],[9],[[68,1]],[[67,9]],[[61,3]],[9],[9],[[60,22]],[[63,9]],[[63,54]],[[67,9]],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36]]]],54,9]],[9],[3],[[63,3]],[[68,63]],[64],[[62,63,63]],[[[69,[[0,[[33,[[32,[3]]]],[34,[[32,[3]]]],35,36]]]]],1],[[],64],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[9],[9],[[61,3],61],[9],[9],[9],[9],[9],[[67,9],67],[[61,3],61],[9],[9],[[63,9],63],[[67,9],67],[9],[3],[[63,3],63],[64]],"c":[],"p":[[15,"usize"],[15,"never"],[15,"u8"],[4,"ExceptionLevel"],[4,"StackPointerSelect"],[4,"Result"],[3,"TypeId"],[3,"ControlRegister"],[15,"bool"],[3,"StatusRegister"],[3,"RoundingMode"],[3,"Exceptions"],[4,"Ordering"],[3,"Formatter"],[6,"Result"],[15,"u64"],[8,"Hasher"],[15,"str"],[4,"Option"],[3,"SyndromeRegister"],[3,"Class"],[15,"u32"],[4,"Kind"],[4,"Source"],[3,"MaskRegister"],[3,"VectorTable"],[4,"Kind"],[3,"VectorTable"],[3,"TaskStateSegmentHeader"],[3,"PrivilegedStack"],[3,"BasicTaskStateSegment"],[15,"slice"],[8,"AsRef"],[8,"AsMut"],[8,"Eq"],[8,"Sized"],[8,"PartialEq"],[3,"TaskStateSegmentBitmaps"],[8,"Debug"],[3,"ControlRegister8"],[3,"ExtendedFeatureEnableRegister"],[3,"TaskStateSegmentHeader"],[3,"ControlRegister0"],[3,"FlagRegister"],[3,"ExtendedControlRegister0"],[3,"ControlRegister4"],[3,"BasicFeatures"],[3,"ExtendedFeatures"],[3,"AddressSpaceSizes"],[15,"array"],[3,"APICBaseRegister"],[3,"InterruptVector"],[3,"InterruptDescriptorTableRegister"],[15,"u16"],[3,"ControlRegister3"],[3,"ControlRegister2"],[3,"Level2PageTableEntry"],[3,"Level1PageTableEntry"],[3,"DebugStruct"],[3,"SegmentDescriptor"],[3,"GateDescriptorFlags"],[3,"GlobalDescriptorTableRegister"],[3,"Selector"],[3,"SystemDescriptorType"],[3,"GenericDescriptor"],[3,"GenericDescriptorFlags"],[3,"SegmentDescriptorFlags"],[3,"GateDescriptor"],[3,"IOPermissionBitmap"],[4,"SegmentRegister"],[3,"NonZeroU16"],[3,"VectorEntry"],[4,"VectorBaseAddressRegister"],[4,"VectorBaseAddressRegister"],[8,"GenericPageTableEntry"],[8,"DirectPageTableEntry"],[8,"HybridPageTableEntry"],[8,"DescriptorFlags"],[4,"LocalDescriptorTableRegister"],[4,"TaskRegister"]]},\
"tartan_devicetree":{"doc":"Support for the Devicetree specification.","t":"DDMALLLLLLLLMLLLLLLLLLMLLLLLLLLNNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["MemoryReservation","Value","address","blob","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","eq","eq","fmt","fmt","from","from","into","into","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BeginNode","EndNode","Property","StructureData","Tree","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","from","from","from_buffer","from_ptr","into","into","memory_reservation_iter","structure_iter","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","name","value"],"q":[[0,"tartan_devicetree"],[31,"tartan_devicetree::blob"],[65,"tartan_devicetree::blob::StructureData"]],"d":["Indicates an area of memory that the kernel does not have …","Wrapper for a raw byte array used as the value of a …","Start address of the reserved memory","Flattened device tree, a.k.a. devicetree blob (DTB), as …","","","","","","","","","Property value as raw bytes","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Size of the reserved memory in bytes","","","","","","","","","Indicates that the following events are within the scope …","Indicates that the previous current node is complete, and …","Defines a property of the current node","An event that signals the start/end of a node or a …","Represents a full flattened device tree blob (DTB).","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Parse a devicetree blob that starts at the beginning of …","Parse a devicetree blob that begins at the specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate over memory reservations defined by this devicetree","Iterate over elements in the device tree. Note that this …","","","","","","","","","The name of the property.","The value of the property."],"i":[0,0,2,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,9,9,9,0,0,8,9,8,9,8,9,8,9,8,8,9,8,9,8,9,8,8,8,9,8,8,8,9,8,9,8,9,8,9,15,15],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,[[],2],[[1,1],3],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0,0,0,0,[[]],[[]],[[]],[[]],[8,8],[9,9],[[]],[[]],[[],8],[[8,8],3],[[9,9],3],[[8,4],5],[[9,4],5],[[]],[[]],[[[11,[10]]],[[6,[8,[13,[[12,[[11,[10]]]]]]]]]],[10,[[6,[8,[13,[[12,[[11,[10]]]]]]]]]],[[]],[[]],[8,14],[8,14],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0],"c":[],"p":[[3,"Value"],[3,"MemoryReservation"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Tree"],[4,"StructureData"],[15,"u8"],[15,"slice"],[8,"ParseError"],[4,"Err"],[8,"Iterator"],[13,"Property"]]},\
"tartan_elf":{"doc":"Support for Executable and Linkable Format (ELF) binaries.","t":"SSSSSSSSSSSSDSSDDSSSDDGSSSSSSSSSSSDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSSSSSDDGSDDSSSSSDDGDSSSSSSSSSSSSSSMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMLMMMMMMMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLMMMLLLLLLLLLLMMMMMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLL","n":["AIX","AROS","Arm","Arm64","Big","CloudABI","Constructors","Core","Destructors","DynamicLink","DynamicLink","DynamicLinkSymbol","Endianness","Executable","FenixOS","FileClass","FileType","FreeBSD","Group","HPUX","Header","HeaderIdent","HeaderNative","Hurd","IA64","IRIX","Interpreter","Linux","Little","Loadable","M68K","MAGIC","MIPS","MIPSRS3kLittleEndian","Machine","MaxArchDefined","MaxArchDefined","MaxArchDefined","MaxArchDefined","MaxOSDefined","MaxOSDefined","MaxOSDefined","MaxUserDefined","MinArchDefined","MinArchDefined","MinArchDefined","MinArchDefined","MinOSDefined","MinOSDefined","MinOSDefined","MinUserDefined","Modesto","NATIVE","NATIVE","NATIVE","NATIVE","NATIVE","NetBSD","NoBits","NonStopKernel","None","None","None","None","None","None","None","Note","Note","OSABI","OpenBSD","OpenVMS","OpenVOS","PowerPC","PowerPC64","PreConstructors","ProgramDefined","ProgramHeader32","ProgramHeader64","ProgramHeaderNative","ProgramHeaderTable","ProgramSegmentFlags","ProgramSegmentType","RISCV","Relocatable","RelocationNoAdded","RelocationWithAdded","SPARC","SectionFlags","SectionHeader","SectionHeaderNative","SectionType","SharedObject","Size32","Size64","Solaris","Strings","SymbolHash","SymbolIndirectSections","Symbols","TRU64","ThreadLocalStorage","VERSION","VERSION","X86","X86_64","alignment","alignment","alignment","allocate","arch_defined","arch_defined","associated_section_index","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","default","default","endianness","entry_point","entry_size","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","execute","execute","extra_info","extra_info_is_link","file_offset","file_offset","file_offset","file_size","file_size","file_size","file_type","flags","flags","flags","flags","flags_raw","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","group_member","hash","hash","hash","hash","hash","hash","hash","header_size","header_version","ident","into","into","into","into","into","into","into","into","into","into","into","into","into","into","keep_order","machine","magic","mem_size","mem_size","merged","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name_table_offset","os_abi","os_abi_version","os_defined","os_defined","os_nonconforming","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_addr","physical_addr","program_header_count","program_header_offset","program_header_size","read","section_header_count","section_header_offset","section_header_size","section_names_index","section_type","segment_type","segment_type","set_allocate","set_arch_defined","set_arch_defined","set_execute","set_execute","set_extra_info_is_link","set_flags","set_group_member","set_keep_order","set_merged","set_os_defined","set_os_defined","set_os_nonconforming","set_read","set_strings","set_thread_locals","set_write","set_write","strings","thread_locals","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_format","verify_native","verify_native","version","virtual_addr","virtual_addr","virtual_addr","with_allocate","with_arch_defined","with_arch_defined","with_execute","with_execute","with_extra_info_is_link","with_group_member","with_keep_order","with_merged","with_os_defined","with_os_defined","with_os_nonconforming","with_read","with_strings","with_thread_locals","with_write","with_write","write","write"],"q":[[0,"tartan_elf"]],"d":["IBM AIX","AROS (Amiga)","32-bit Arm","64-bit Arm","File uses big-endian (MSB-first) byte ordering.","Nuxi CloudABI","Section containing the addresses of constructor functions …","Core dump","Section containing the addresses of destructor functions …","Segment containing information for the dynamic linker.","Section containing information for the dynamic linker.","Section containing the symbol table for dynamic linking.","Specifies whether the file uses big or little endian byte …","A file with an entry point that can be executed","FenixOS (Passas and Karlsson 2011?)","Specifies the address size (32- or 64-bit) of the file.","Types of object files supported by the ELF specification","FreeBSD","Section that groups other sections.","HP-UX","File header for an ELF file with a specific address size.","Initial header which has the same layout in all ELF …","Variant of the <code>Header</code> structure native to the current …","GNU with Hurd kernel","Intel Itanium IA-64","SGI IRIX","Segment containing the path to the program’s interpreter …","GNU with Linux kernel","File uses little-endian (LSB first) byte ordering.","Segment that should be loaded into memory.","Motorola 68000","Expected value of the <code>magic</code> field.","MIPS I","MIPS RS3000 (little-endian)","Identifies the target CPU architecture.","End of range (inclusive) for CPU architecture-specific …","Beginning of range (inclusive) for CPU …","End of range (inclusive) for CPU architecture-specific …","End of range (inclusive) for CPU architecture-specific …","End of range (inclusive) for OS-specific values","End of range (inclusive) for OS-specific values","End of range (inclusive) for OS-specific values","End of range (inclusive) for user-defined values","Beginning of range (inclusive) for CPU …","Beginning of range (inclusive) for CPU …","Beginning of range (inclusive) for CPU …","Beginning of range (inclusive) for CPU …","Beginning of range (inclusive) for OS-specific values","Beginning of range (inclusive) for OS-specific values","Beginning of range (inclusive) for OS-specific values","Beginning of range (inclusive) for user-defined values","Novell Modesto","The expected file class for the current platform.","The expected file class for the current platform.","The expected endianness value for the current platform.","The expected machine type for the current platform.","The expected machine type for the current platform.","NetBSD","An empty file section that will be filled with zeros when …","HP Non-Stop Kernel","Invalid placeholder value.","Invalid placeholder value.","Original Unix System V ABI","Invalid placeholder value.","No specific architecture defined.","Marks an ignored or unused segment.","Marks an ignored or unused section.","Segment containing auxillary information.","Section containing auxillary information.","Operating-system-specific ABI extensions supported by the …","OpenBSD","DEC OpenVMS","Stratus Open VOS","32-bit PowerPC","64-bit PowerPC","Section containing the addresses of constructor functions …","Section containing data that is only meaningful to the …","Header that controls loading of a single segment of an …","Header that controls loading of a single segment of an …","Program header variant native to the current target","Segment that contains the program header itself, including …","Permissions and other OS/arch-specific flags for …","Defines the contents and meaning of individual program …","RISC-V","Relocatable object file","Section containing relocation data where the addends are …","Section containing relocation data with addends given in …","Sun/Oracle SPARC","Additional attributes for object file sections.","Header that controls linking","Variant of the <code>SectionHeader</code> structure native to the …","Defines the contents and meaning of individual sections.","Dynamic shared library","File uses 32-bit addresses/offsets.","File uses 64-bit addresses/offsets.","Sun/Oracle Solaris","Section containing packed null-terminated strings.","Section containing the hash table for symbols.","Table of section indexes that correspond to entries in the …","Section containing the symbol table for this object file.","Compaq TRU64 Unix","Segment that contains a template for the thread-local …","Expected value of the <code>version</code> field.","Expected value of the <code>header_version</code> field.","32-bit x86","64-bit x86","Alignment of the segment in bytes, for both the file and …","Alignment of the segment in bytes, for both the file and …","Required alignment of the section in bytes.","Indicates this section should be loaded into memory when …","Bits that are left for CPU architecture-specific flags.","Bits that are left for CPU architecture-defined flags.","Depending on the <code>section_type</code>, this may identify another …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the address size (32- or 64-bit) of the file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies whether the file uses big or little endian byte …","Virtual address of executable entry point. Zero if not …","Depending on the <code>section_type</code>, this may identify the size …","","","","","","","","","","","","","","","Indicates the segment contains code that should be …","Indicates this section contains code that should be …","Additional flags that depend on the <code>section_type</code>.","Indicates that the <code>extra_info</code> field of the section header …","File offset to the start of this segment’s data.","File offset to the start of this segment’s data.","File offset to the start of this section’s data.","Size in bytes of the file data for this segment.","Size in bytes of the file data for this segment.","Size in bytes of this section’s file data.","Distinguishes executables, libraries, etc.","Flags for various attributes of this section.","CPU architecture-specific flags.","Controls permissions and other OS/arch-specific flags.","Controls permissions and other OS/arch-specific flags.","Flags for various attributes of this section.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Indicates the section is listed by a section with type …","","","","","","","","Size in bytes of this header. May be longer than the …","Version of the ELF header.","Header common to all ELF variants.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Indicates that this section and the […","CPU architecture","Magic number that identifies this as an ELF file.","Size in bytes of this segment once it is loaded into …","Size in bytes of this segment once it is loaded into …","Indicates that multiple sections of this type can be …","","The name of the enum variant in code, if one is defined …","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","Offset within the names section to the start of this …","Operating-system-specific ABI extensions that this file …","Backwards-incompatible version number of the <code>os_abi</code> …","Bits that are left for OS-specific flags.","Bits that are left for OS-defined flags.","Indicates that the section must be processed in an …","","","","","","","","Physical base address where the segment should be loaded. …","Physical base address where the segment should be loaded. …","Number of program segment headers.","File offset to the array of program section headers which …","Size in bytes of of each program segment header. May be …","Indicates the segment contains data that should be …","Number of section headers.","File offset to the array of section header which control …","Size in bytes of each section header. May be longer than …","Index of the section header which contains the list of …","Indicates the contents/meaning of the section described by …","Indicates the contents/meaning of the segment described by …","Indicates the contents/meaning of the segment described by …","Indicates this section should be loaded into memory when …","Bits that are left for CPU architecture-specific flags.","Bits that are left for CPU architecture-defined flags.","Indicates the segment contains code that should be …","Indicates this section contains code that should be …","Indicates that the <code>extra_info</code> field of the section header …","Flags for various attributes of this section.","Indicates the section is listed by a section with type …","Indicates that this section and the […","Indicates that multiple sections of this type can be …","Bits that are left for OS-specific flags.","Bits that are left for OS-defined flags.","Indicates that the section must be processed in an …","Indicates the segment contains data that should be …","Indicates the section contains null-terminate strings.","Indicates the section contains a template for the …","Indicates the segment contains data that should be …","Indicates the section contains data that should be …","Indicates the section contains null-terminate strings.","Indicates the section contains a template for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that the header represents a valid ELF file, of any …","Checks that the header represents a valid ELF file for the …","Checks that the header represents an ELF file in the …","ELF format version","Virtual base address where the segment should be loaded.","Virtual base address where the segment should be loaded.","Virtual address where this section should be loaded in …","Indicates this section should be loaded into memory when …","Bits that are left for CPU architecture-specific flags.","Bits that are left for CPU architecture-defined flags.","Indicates the segment contains code that should be …","Indicates this section contains code that should be …","Indicates that the <code>extra_info</code> field of the section header …","Indicates the section is listed by a section with type …","Indicates that this section and the […","Indicates that multiple sections of this type can be …","Bits that are left for OS-specific flags.","Bits that are left for OS-defined flags.","Indicates that the section must be processed in an …","Indicates the segment contains data that should be …","Indicates the section contains null-terminate strings.","Indicates the section contains a template for the …","Indicates the segment contains data that should be …","Indicates the section contains data that should be …","Indicates the segment contains data that should be …","Indicates the section contains data that should be …"],"i":[11,11,13,13,10,11,18,12,18,16,18,18,0,12,11,0,0,11,18,11,0,0,0,11,13,11,16,11,10,16,13,8,13,13,0,11,12,16,18,12,16,18,18,11,12,16,18,12,16,18,18,11,9,9,10,13,13,11,18,11,9,10,11,12,13,16,18,16,18,0,11,11,11,13,13,18,18,0,0,0,16,0,0,13,12,18,18,13,0,0,0,0,12,9,9,11,18,18,18,18,11,16,7,8,13,13,14,15,17,1,3,1,17,7,8,9,10,11,12,13,14,15,16,3,17,18,1,7,8,9,10,11,12,13,14,15,16,3,17,18,1,8,7,8,9,10,11,12,13,14,15,16,3,17,18,1,9,10,11,12,13,16,18,7,8,9,10,11,12,13,14,15,16,3,17,18,1,8,7,17,7,8,9,10,11,12,13,14,15,16,3,17,18,1,3,1,17,1,14,15,17,14,15,17,7,17,7,14,15,17,7,8,9,10,11,12,13,14,15,16,3,17,18,1,7,8,9,9,10,10,11,11,12,12,13,13,14,15,16,16,3,3,17,18,18,1,1,1,1,9,10,11,12,13,16,18,7,8,7,7,8,9,10,11,12,13,14,15,16,3,17,18,1,1,7,8,14,15,1,9,9,10,10,11,11,12,12,13,13,16,16,18,18,17,8,8,3,1,1,9,10,11,12,13,16,18,14,15,7,7,7,3,7,7,7,7,17,14,15,1,3,1,3,1,1,17,1,1,1,3,1,1,3,1,1,3,1,1,1,7,8,9,10,11,12,13,14,15,16,3,17,18,1,7,8,9,10,11,12,13,14,15,16,3,17,18,1,7,8,9,10,11,12,13,14,15,16,3,17,18,1,8,7,8,7,14,15,17,1,3,1,3,1,1,1,1,1,3,1,1,3,1,1,3,1,3,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[1,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[7,[[0,[5,6]]]]],[[7,[[0,[5,6]]]]]],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[3,3],[[[17,[[0,[5,6]]]]],[[17,[[0,[5,6]]]]]],[18,18],[1,1],[[9,9],19],[[10,10],19],[[11,11],19],[[12,12],19],[[13,13],19],[[16,16],19],[[18,18],19],[[],[[7,[[0,[20,6]]]]]],[[],8],[[],9],[[],10],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],3],[[],[[17,[[0,[20,6]]]]]],[[],18],[[],1],0,0,0,[[[7,[[0,[21,6]]]],[7,[[0,[21,6]]]]],2],[[8,8],2],[[9,9],2],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[14,14],2],[[15,15],2],[[16,16],2],[[3,3],2],[[[17,[[0,[21,6]]]],[17,[[0,[21,6]]]]],2],[[18,18],2],[[1,1],2],[3,2],[1,2],0,[1,2],0,0,0,0,0,0,0,[[[17,[[0,[6,[22,[1]],[23,[1]]]]]]],1],0,0,0,0,[[[7,[[0,[24,6]]]],25],26],[[8,25],26],[[9,25],26],[[10,25],26],[[11,25],26],[[12,25],26],[[13,25],26],[[14,25],26],[[15,25],26],[[16,25],26],[[3,25],26],[[[17,[[0,[24,6]]]],25],26],[[18,25],26],[[1,25],26],[[]],[[]],[[]],[4,9],[[]],[4,10],[4,11],[[]],[27,12],[[]],[4,13],[[]],[[]],[[]],[28,16],[[]],[[]],[28,3],[[]],[28,18],[[]],[28,1],[29,1],[[]],[1,2],[[9,30]],[[10,30]],[[11,30]],[[12,30]],[[13,30]],[[16,30]],[[18,30]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],0,0,0,0,[1,2],[9,[[32,[31]]]],[9,[[32,[31]]]],[10,[[32,[31]]]],[10,[[32,[31]]]],[11,[[32,[31]]]],[11,[[32,[31]]]],[12,[[32,[31]]]],[12,[[32,[31]]]],[13,[[32,[31]]]],[13,[[32,[31]]]],[16,[[32,[31]]]],[16,[[32,[31]]]],[18,[[32,[31]]]],[18,[[32,[31]]]],0,0,0,[3,4],[1,4],[1,2],[[9,9],[[32,[19]]]],[[10,10],[[32,[19]]]],[[11,11],[[32,[19]]]],[[12,12],[[32,[19]]]],[[13,13],[[32,[19]]]],[[16,16],[[32,[19]]]],[[18,18],[[32,[19]]]],0,0,0,0,0,[3,2],0,0,0,0,0,0,0,[[1,2]],[[3,4]],[[1,4]],[[3,2]],[[1,2]],[[1,2]],[[[17,[[0,[6,[22,[1]],[23,[1]]]]]],1]],[[1,2]],[[1,2]],[[1,2]],[[3,4]],[[1,4]],[[1,2]],[[3,2]],[[1,2]],[[1,2]],[[3,2]],[[1,2]],[1,2],[1,2],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[8],[[[7,[6]]]],[8],0,0,0,0,[[1,2],1],[[3,4],3],[[1,4],1],[[3,2],3],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,2],1],[[3,4],3],[[1,4],1],[[1,2],1],[[3,2],3],[[1,2],1],[[1,2],1],[[3,2],3],[[1,2],1],[3,2],[1,2]],"c":[],"p":[[3,"SectionFlags"],[15,"bool"],[3,"ProgramSegmentFlags"],[15,"u8"],[8,"Clone"],[8,"Copy"],[3,"Header"],[3,"HeaderIdent"],[3,"FileClass"],[3,"Endianness"],[3,"OSABI"],[3,"FileType"],[3,"Machine"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"ProgramSegmentType"],[3,"SectionHeader"],[3,"SectionType"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[8,"From"],[8,"Into"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u16"],[15,"u32"],[15,"usize"],[8,"Hasher"],[15,"str"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"tartan_kernel":{"doc":"","t":"HHHFFAAAFFAFFADDDDSFFLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFHDHDHLLLLMMMLLOFFFFLLFFFFMMLLLLLLFFFFFFFFF","n":["ALLOCATOR","HEAP","X","_start","alloc_error","allocator","arch","cpu","eh_personality","find_uart","intrinsics","kernel_main","panic_handler","pci","Allocator","BlockHeader","BlockList","CursorMut","SIZE_MASK","align_mask","align_up","alloc","block_list","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_fit","clone","clone_into","current","cursor_from_data_ptr","data","data_ptr","data_size","dealloc","default","eq","fmt","fmt_fields","free","from","from","from","from","from","from_block","front_mut","init","into","into","into","into","is_end","merge_next_if_free","move_next","next","next_mut","next_ptr","set_data_size","set_free","split_exact","split_to_align","split_to_minimum","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninitialized","with_free","x86_64","x86_common","initialize","GLOBAL_DESCRIPTOR_TABLE","GlobalDescriptorTable","INTERRUPT_DESCRIPTOR_TABLE","InterruptDescriptorTable","TASK_STATE_SEGMENT","borrow","borrow","borrow_mut","borrow_mut","code_segment","data_segment","descriptors","from","from","global_selector","handle_unknown_interrupt","initialize_control_registers","initialize_interrupts","initialize_segments","into","into","make_code_descriptor","make_data_descriptor","make_interrupt_gate","make_task_state_descriptor","null_segment","task_state_segment","try_from","try_from","try_into","try_into","type_id","type_id","describe_segment_register","print_state","bcmp","memcmp","memcpy","memmove","memset","find_pci_access","print_devices"],"q":[[0,"tartan_kernel"],[14,"tartan_kernel::allocator"],[83,"tartan_kernel::arch"],[85,"tartan_kernel::arch::x86_64"],[86,"tartan_kernel::arch::x86_common"],[119,"tartan_kernel::cpu"],[121,"tartan_kernel::intrinsics"],[126,"tartan_kernel::pci"]],"d":["","","","","","","Interface to architecture-specific code","","","","This module contains some compiler-rt intrinsics that are …","","","","Simple kernel allocator that keeps a singly-linked list of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Print this object’s bitfield values. Helper method for …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Architecture-specific bindings for 64-bit Intel x86-based …","Shared architecture-specific bindings for 32-bit and …","Perform early architecture-specific setup","","Global descriptor table structure specific to Tartan OS.","","","","","","","","Main code segment that covers all memory, used by CS.","Main data that covers all memory, used by everything but …","","Returns the argument unchanged.","Returns the argument unchanged.","Create a segment selector that points to the given …","","Set flags in general control registers to a known state","","Initialize the segmentation system to use a flat memory …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Dummy descriptor for segment index 0. The processor always …","Sole task state segment required by task register.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,8,8,8,13,12,9,8,13,12,9,9,9,9,12,13,13,9,9,8,9,9,9,9,9,8,13,12,9,9,13,13,8,8,13,12,9,9,12,12,9,9,9,9,9,12,12,12,9,8,13,12,9,8,13,12,9,8,13,12,9,8,9,0,0,0,0,0,0,0,0,30,31,30,31,30,30,31,30,31,0,0,0,0,0,30,31,0,0,0,0,30,30,30,31,30,31,30,31,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[1,2],1],[3,4],0,0,0,[[],4],[[],5],0,[[],4],[6,4],0,0,0,0,0,0,[3,7],[[7,3],7],[[8,3],2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[9]],3],11],[9,9],[[]],[12,[[10,[9]]]],[[13,2],12],0,[[[10,[9]]],2],[9,7],[[8,2,3]],[[],9],[[9,9],11],[[9,14],15],[[9,16]],[9,11],[[]],[[]],[[]],[[]],[7,9],[[[18,[[17,[7]]]]],13],[13,12],[[8,13]],[[]],[[]],[[]],[[]],[9,11],[12],[12],[[[10,[9]]],[[19,[[10,[9]]]]]],[[[10,[9]]],[[19,[[10,[9]]]]]],[[[10,[9]]],19],[[9,7]],[[9,11]],[[12,7]],[[12,3]],[[12,7]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],8],[[9,11],9],0,0,[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],0,[22],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[24,25],[[],23],0,0,[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[26,27,24],15],[26,15],[[2,2,7],28],[[2,2,7],28],[[2,2,7],2],[[2,2,7],2],[[2,28,7],2],[[],29],[26,15]],"c":[],"p":[[15,"isize"],[15,"u8"],[3,"Layout"],[15,"never"],[8,"UART"],[3,"PanicInfo"],[15,"usize"],[3,"Allocator"],[3,"BlockHeader"],[3,"Pin"],[15,"bool"],[3,"CursorMut"],[3,"BlockList"],[3,"Formatter"],[6,"Result"],[3,"DebugStruct"],[19,"MaybeUninit"],[15,"slice"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"InterruptVector"],[3,"SegmentDescriptor"],[3,"Selector"],[3,"GateDescriptor"],[8,"Write"],[15,"str"],[15,"i32"],[8,"ConfigAccess"],[3,"GlobalDescriptorTable"],[3,"InterruptDescriptorTable"]]},\
"tartan_parsers":{"doc":"Utilities for nom parsers","t":"AFFODIDLLLLLLFMLLLLLMMLLLMLLLLLLLLL","n":["error","opcode","result_iterator","struct_parser","ErrorWithPosition","GeneralParseError","Position","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","err","error","fmt","fmt","fmt","from","from","full_input","full_input","into","into","new","state","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"tartan_parsers"],[4,"tartan_parsers::error"]],"d":["Helpers for reporting parsing errors","Combinator for productions that use a deterministic opcode","Create an iterator that repeatedly executes the parser.","Parse struct fields in order using an initializer-like …","A parser error with position info useful for printing …","Trait alias combining the nom error traits <code>ParseError</code> and …","Helper struct that prints human-readable position …","","","","","","","Shortcut for constructing parser errors","The error returned by the parser","","","","Returns the argument unchanged.","Returns the argument unchanged.","The complete input we are trying to parse","The complete input we were trying to parse","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Associate a parse error with its full input, to reference …","The state of the parser at the time we are interested in","","","","","","","","",""],"i":[0,0,0,0,0,0,0,17,14,17,14,14,14,0,14,17,14,14,17,14,17,14,17,14,14,17,14,17,14,17,14,17,14,17,14],"f":[0,[[1,[5,[2,[0,[[3,[2]],[4,[2]]]]]],[5,[2,[0,[[3,[2]],[4,[2]]]]]]],6],[[7,8],9],0,0,0,0,[[]],[[]],[[]],[[]],[[[14,[[0,[[12,[[11,[10]]]],13,2]]]]],[[14,[[0,[[12,[[11,[10]]]],13,2]]]]]],[[]],[15,[[16,[3]]]],0,[[[17,[13]],18],[[20,[19]]]],[[[14,[[0,[[12,[[11,[10]]]],13]]]],18],[[20,[19]]]],[[[14,[[0,[[12,[[11,[10]]]],13,21]]]],18],22],[[]],[[]],0,0,[[]],[[]],[[[24,[[23,[[0,[[12,[[11,[10]]]],13]]]]]],[11,[10]]],[[14,[[0,[[12,[[11,[10]]]],13]]]]]],0,[[]],[[],25],[[],25],[[],20],[[],20],[[],20],[[],20],[[],26],[[],26]],"c":[],"p":[[15,"str"],[8,"Clone"],[8,"ParseError"],[8,"ContextError"],[8,"Parser"],[8,"FnMut"],[8,"InputLength"],[8,"Fn"],[8,"Iterator"],[15,"u8"],[15,"slice"],[8,"From"],[8,"AsBytes"],[3,"ErrorWithPosition"],[4,"ErrorKind"],[6,"IResult"],[3,"Position"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"Debug"],[6,"Result"],[3,"VerboseError"],[4,"Err"],[3,"String"],[3,"TypeId"]]},\
"tartan_pci":{"doc":"Support for Peripheral Component Interconnect (PCI) and …","t":"DRRRALLFAFFFLMLFMLLLIDDMLLLLMMLLLMLLLLLLMLKLLLAMLKLLLLLLLDLLLLLLLLLLLLLEEDDIDDDDDNNNSDDDDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CapabilityEntry","INVALID_VENDOR","MAX_DEVICE","MAX_FUNCTION","access","borrow","borrow_mut","check_valid","config","enumerate_bus","enumerate_bus_devices","enumerate_device_functions","from","id","into","iter_capabilities","register","try_from","try_into","type_id","ConfigAccess","ConfigSelector","MemMapConfigAccess","base_address","borrow","borrow","borrow_mut","borrow_mut","bus","bus_range","clone","clone","default","device","eq","eq","fmt","fmt","from","from","function","get_fixed_register","get_register","get_register","into","into","io","segment_group","set_fixed_register","set_register","set_register","try_from","try_from","try_into","try_into","type_id","type_id","IOConfigAccess","borrow","borrow_mut","clone","default","eq","fmt","from","get_register","into","set_register","try_from","try_into","type_id","AddressSpace","AddressWidth","BaseAddressRegister","CommandRegister","FixedConfigRegister","GenericCapabilityRegister","HeaderRegister0","HeaderRegister1","HeaderRegister2","HeaderRegister3","IO","Invalid","Memory","REGISTER_NUMBER","SelfTest","StatusRegister","Type0HeaderRegister11","Type0HeaderRegister13","Type0HeaderRegister15","U32","U64","address_space","address_u32","address_u64","address_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus_master","cache_line_size","capabilities_list_available","capabilities_offset","capable","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","command","completion_code","default","default","default","default","default","default","default","default","default","default","default","default","device","device_select_timing","double_clock_capable","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fast_back_to_back_capable","fast_back_to_back_enabled","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_type","id","interface","interrupt_disabled","interrupt_line","interrupt_pin","interrupt_status","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io_space","latency_timer","master_abort_received","master_parity_error","max_latency","memory_space","min_grant","multi_function","next_offset","parity_error_detected","parity_error_response","prefetchable","revision","self_test","set_bus_master","set_cache_line_size","set_capabilities_list_available","set_capabilities_offset","set_capable","set_class","set_command","set_completion_code","set_device","set_device_select_timing","set_double_clock_capable","set_fast_back_to_back_capable","set_fast_back_to_back_enabled","set_header_type","set_id","set_interface","set_interrupt_disabled","set_interrupt_line","set_interrupt_pin","set_interrupt_status","set_io_space","set_latency_timer","set_master_abort_received","set_master_parity_error","set_max_latency","set_memory_space","set_min_grant","set_multi_function","set_next_offset","set_parity_error_detected","set_parity_error_response","set_revision","set_self_test","set_special_cycle","set_start","set_status","set_subclass","set_subsystem","set_subsystem_vendor","set_system_error_enabled","set_system_error_signaled","set_target_abort_received","set_target_abort_signaled","set_vendor","set_vga_palette_snoop","set_write_and_invalidate_enable","special_cycle","start","status","subclass","subsystem","subsystem_vendor","system_error_enabled","system_error_signaled","target_abort_received","target_abort_signaled","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid","vendor","vga_palette_snoop","with_bus_master","with_cache_line_size","with_capabilities_list_available","with_capabilities_offset","with_capable","with_class","with_command","with_completion_code","with_device","with_device_select_timing","with_double_clock_capable","with_fast_back_to_back_capable","with_fast_back_to_back_enabled","with_header_type","with_id","with_interface","with_interrupt_disabled","with_interrupt_line","with_interrupt_pin","with_interrupt_status","with_io_space","with_latency_timer","with_master_abort_received","with_master_parity_error","with_max_latency","with_memory_space","with_min_grant","with_multi_function","with_next_offset","with_parity_error_detected","with_parity_error_response","with_revision","with_self_test","with_special_cycle","with_start","with_status","with_subclass","with_subsystem","with_subsystem_vendor","with_system_error_enabled","with_system_error_signaled","with_target_abort_received","with_target_abort_signaled","with_vendor","with_vga_palette_snoop","with_write_and_invalidate_enable","write_and_invalidate_enable"],"q":[[0,"tartan_pci"],[20,"tartan_pci::access"],[57,"tartan_pci::access::io"],[71,"tartan_pci::config"]],"d":["Information to identify and locate capability registers","Placeholder value that will always be returned in the …","Highest device number allowed by the PCI specification.","Highest function number allowed by the PCI specification.","Access methods for PCI configuration space.","","","Return true if a function is available at the specified …","Data exposed in PCI configuration space.","Iterate over the devices and functions present on the …","Iterate over the devices present on the specified bus.","Iterate over the functions available on the specified …","Returns the argument unchanged.","Capability ID defined by PCI-SIG","Calls <code>U::from(self)</code>.","Iterate over all capabilities defined in the configuration …","Register number in config space (offset in 4-byte units) …","","","","Provides methods to access PCI configuration space.","Logical PCI address for a function of a specific …","Access to memory-mapped PCI configuration space","Address of register 0 on bus","","","","","PCI bus number within the indicated segment group. The …","Bus numbers covered by this memory map","","","","PCI device number on the indicated bus.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","PCI function number on the indicated device. Usually zero, …","Get a register in PCI configuration space with an offset …","Get a specific 32-bit register in PCI configuration space.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Support for the I/O based configuration access method on …","Segment group as defined by PCI Express. Always zero for …","Set a register in PCI configuration space with an offset …","Set a specific 32-bit register in PCI configuration space.","","","","","","","","I/O based configuration access method on x86/x86-64.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Differentiates between memory and I/O addresses","Size of address bus supported by a PCI function","A pointer to a memory or I/O space that is used to …","Control bits set by the host","A register type that is always located at a specific offset","Structure shared by all capability registers","The first register of the standard configuration header …","The second register of the standard configuration header …","The third register of the standard configuration header …","The fourth register of the standard configuration header …","This address is in I/O space (supported on x86/x86-64 only)","Unknown address bus width","This address is in the normal memory address space","Fixed offset for this register type","Control and status flags for a function’s self test …","Status bits indicated by the function","Twelfth register of the standard configuration header for …","Fourtheenth register of the standard configuration header …","Sixteenth register of the standard configuration header …","32-bit address bus","64-bit address bus","Indicates whether this BAR points to memory or I/O space","The address as a 32-bit number.","The address as a 64-bit number, when combined with the …","Size of address bus supported by this PCI function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Controls whether the device may act as a master of the PCI …","Informs the device of the size of the system’s cache …","Indicates whether the configuration space contains a …","Offset within this function’s configuration space that …","Indicates whether the function has a self-test capability.","Indicates the general purpose of the function, from a list …","","","","","","","","","","","","","","","Control bits set by the host","If a self-test is complete, then any non-zero value in …","","","","","","","","","","","","","Vendor-defined device ID","Indicates how quickly the device can assert the <code>DEVSEL#</code> …","Indicates whether the device can run at 66 MHz (true).","","","","","","","","","","","","","","","Indicates whether the device supports receiving …","Controls whether the device may use fast back-to-back …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Indicates which of the standard PCI configuration header …","Capability ID defined by PCI-SIG","Indicates a standard programming interface that can be …","Controls whether the device is prohibited from asserting …","Indicates which system interrupt number the function uses, …","Indicates which of the four interrupt pins on the PCI bus …","Indicates whether the device wants to signal an interrupt, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Controls whether the device may respond to accesses …","The value of the bus master’s latency timer in PCI clock …","Indicates whether the transaction was aborted with a …","Indicates whether a partity error was detected while this …","Indicates the longest period the device can wait to access …","Controls whether the device may respond to accesses …","Indicates the desired length of bursts in units of 0.25 …","If true, then this device responds to at least some …","Byte offset within capability space of next capability …","Indicates taht the device has detected a parity error, …","Controls whether the device responds normally to parity …","Indicates whether the host can safely cache the memory …","Vendor-defined revision of the hardware","Control and status flags for a function’s self test …","Controls whether the device may act as a master of the PCI …","Informs the device of the size of the system’s cache …","Indicates whether the configuration space contains a …","Offset within this function’s configuration space that …","Indicates whether the function has a self-test capability.","Indicates the general purpose of the function, from a list …","Control bits set by the host","If a self-test is complete, then any non-zero value in …","Vendor-defined device ID","Indicates how quickly the device can assert the <code>DEVSEL#</code> …","Indicates whether the device can run at 66 MHz (true).","Indicates whether the device supports receiving …","Controls whether the device may use fast back-to-back …","Indicates which of the standard PCI configuration header …","Capability ID defined by PCI-SIG","Indicates a standard programming interface that can be …","Controls whether the device is prohibited from asserting …","Indicates which system interrupt number the function uses, …","Indicates which of the four interrupt pins on the PCI bus …","Indicates whether the device wants to signal an interrupt, …","Controls whether the device may respond to accesses …","The value of the bus master’s latency timer in PCI clock …","Indicates whether the transaction was aborted with a …","Indicates whether a partity error was detected while this …","Indicates the longest period the device can wait to access …","Controls whether the device may respond to accesses …","Indicates the desired length of bursts in units of 0.25 …","If true, then this device responds to at least some …","Byte offset within capability space of next capability …","Indicates taht the device has detected a parity error, …","Controls whether the device responds normally to parity …","Vendor-defined revision of the hardware","Control and status flags for a function’s self test …","Controls whether the device may respond to “special cycle…","Setting this bit triggers the device to start its self …","Status bits indicated by the function","Indicates the purpose of the function more specifically, …","ID of the device as defined by the card manufacturer.","ID of the card manufacturer, which may be different than …","Controls whether the device may signal critical errors in …","Indicates that the device has detected a critical error in …","Indicates whether the transaction was aborted with a …","Indicates that this function generated an abort on the …","ID of the chipset manufacturer for this function, assigned …","Controls whether a VGA or graphics card device may “snoop…","Controls whether the device may send a “Memory Write and …","Controls whether the device may respond to “special cycle…","Setting this bit triggers the device to start its self …","Status bits indicated by the function","Indicates the purpose of the function more specifically, …","ID of the device as defined by the card manufacturer.","ID of the card manufacturer, which may be different than …","Controls whether the device may signal critical errors in …","Indicates that the device has detected a critical error in …","Indicates whether the transaction was aborted with a …","Indicates that this function generated an abort on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return false if the function is not present, as indicated …","ID of the chipset manufacturer for this function, assigned …","Controls whether a VGA or graphics card device may “snoop…","Controls whether the device may act as a master of the PCI …","Informs the device of the size of the system’s cache …","Indicates whether the configuration space contains a …","Offset within this function’s configuration space that …","Indicates whether the function has a self-test capability.","Indicates the general purpose of the function, from a list …","Control bits set by the host","If a self-test is complete, then any non-zero value in …","Vendor-defined device ID","Indicates how quickly the device can assert the <code>DEVSEL#</code> …","Indicates whether the device can run at 66 MHz (true).","Indicates whether the device supports receiving …","Controls whether the device may use fast back-to-back …","Indicates which of the standard PCI configuration header …","Capability ID defined by PCI-SIG","Indicates a standard programming interface that can be …","Controls whether the device is prohibited from asserting …","Indicates which system interrupt number the function uses, …","Indicates which of the four interrupt pins on the PCI bus …","Indicates whether the device wants to signal an interrupt, …","Controls whether the device may respond to accesses …","The value of the bus master’s latency timer in PCI clock …","Indicates whether the transaction was aborted with a …","Indicates whether a partity error was detected while this …","Indicates the longest period the device can wait to access …","Controls whether the device may respond to accesses …","Indicates the desired length of bursts in units of 0.25 …","If true, then this device responds to at least some …","Byte offset within capability space of next capability …","Indicates taht the device has detected a parity error, …","Controls whether the device responds normally to parity …","Vendor-defined revision of the hardware","Control and status flags for a function’s self test …","Controls whether the device may respond to “special cycle…","Setting this bit triggers the device to start its self …","Status bits indicated by the function","Indicates the purpose of the function more specifically, …","ID of the device as defined by the card manufacturer.","ID of the card manufacturer, which may be different than …","Controls whether the device may signal critical errors in …","Indicates that the device has detected a critical error in …","Indicates whether the transaction was aborted with a …","Indicates that this function generated an abort on the …","ID of the chipset manufacturer for this function, assigned …","Controls whether a VGA or graphics card device may “snoop…","Controls whether the device may send a “Memory Write and …","Controls whether the device may send a “Memory Write and …"],"i":[0,0,0,0,0,30,30,0,0,0,0,0,30,30,30,0,30,30,30,30,0,0,0,7,2,7,2,7,2,7,2,7,2,2,2,7,2,7,2,7,2,1,1,7,2,7,0,2,1,1,7,2,7,2,7,2,7,0,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,15,17,15,10,0,0,0,0,0,17,17,14,14,14,14,25,26,24,19,27,22,28,18,21,23,14,15,17,29,25,26,24,19,27,22,28,18,21,23,14,15,17,29,18,19,21,22,23,24,25,26,24,19,27,22,28,18,21,23,14,15,17,29,26,23,25,26,24,19,27,22,28,18,21,23,14,29,25,21,21,25,26,24,19,27,22,28,18,21,23,14,15,17,29,21,18,25,26,24,19,27,22,28,18,21,23,14,15,17,29,25,25,26,26,24,24,19,19,27,27,22,22,28,28,18,18,21,21,23,23,14,15,17,29,29,19,29,24,18,28,28,21,25,26,24,19,27,22,28,18,21,23,14,15,17,29,18,19,21,21,28,18,28,19,29,21,18,14,24,19,18,19,21,22,23,24,26,23,25,21,21,21,18,19,29,24,18,28,28,21,18,19,21,21,28,18,28,19,29,21,18,24,19,18,23,26,24,27,27,18,21,21,21,25,18,18,18,23,26,24,27,27,18,21,21,21,25,26,24,19,27,22,28,18,21,23,14,15,17,29,25,26,24,19,27,22,28,18,21,23,14,15,17,29,25,26,24,19,27,22,28,18,21,23,14,15,17,29,25,25,18,18,19,21,22,23,24,26,23,25,21,21,21,18,19,29,24,18,28,28,21,18,19,21,21,28,18,28,19,29,21,18,24,19,18,23,26,24,27,27,18,21,21,21,25,18,18,18],"f":[0,0,0,0,0,[[]],[[]],[[1,2],3],0,[[1,2],4],[[1,2],4],[[1,2],4],[[]],0,[[]],[[1,2],4],0,[[],5],[[],5],[[],6],0,0,0,0,[[]],[[]],[[]],[[]],0,0,[2,2],[7,7],[[],2],0,[[2,2],3],[[7,7],3],[[2,8],9],[[7,8],9],[[]],[[]],0,[2,10],[[2,11],12],[[7,2,11],12],[[]],[[]],0,0,[[2,10]],[[2,11,12]],[[7,2,11,12]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,[[]],[[]],[13,13],[[],13],[[13,13],3],[[13,8],9],[[]],[[13,2,11],12],[[]],[[13,2,11,12]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[14,12],[[14,12],16],[14,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,3],[19,20],[21,3],[22,20],[23,3],[24,20],[25,25],[26,26],[24,24],[19,19],[27,27],[22,22],[28,28],[18,18],[21,21],[23,23],[14,14],[15,15],[17,17],[29,29],[26,18],[23,20],[[],25],[[],26],[[],24],[[],19],[[],27],[[],22],[[],28],[[],18],[[],21],[[],23],[[],14],[[],29],[25,11],[21,20],[21,3],[[25,25],3],[[26,26],3],[[24,24],3],[[19,19],3],[[27,27],3],[[22,22],3],[[28,28],3],[[18,18],3],[[21,21],3],[[23,23],3],[[14,14],3],[[15,15],3],[[17,17],3],[[29,29],3],[21,3],[18,3],[[25,8],9],[[26,8],9],[[24,8],9],[[19,8],9],[[27,8],9],[[22,8],9],[[28,8],9],[[18,8],9],[[21,8],9],[[23,8],9],[[14,8],9],[[15,8],9],[[17,8],9],[[29,8],9],[[]],[12,25],[[]],[12,26],[[]],[12,24],[[]],[12,19],[12,27],[[]],[12,22],[[]],[[]],[12,28],[11,18],[[]],[[]],[11,21],[[]],[20,23],[[]],[[]],[[]],[[]],[12,29],[19,20],[29,20],[24,20],[18,3],[28,20],[28,20],[21,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,3],[19,20],[21,3],[21,3],[28,20],[18,3],[28,20],[19,3],[29,20],[21,3],[18,3],[14,3],[24,20],[19,23],[[18,3]],[[19,20]],[[21,3]],[[22,20]],[[23,3]],[[24,20]],[[26,18]],[[23,20]],[[25,11]],[[21,20]],[[21,3]],[[21,3]],[[18,3]],[[19,20]],[[29,20]],[[24,20]],[[18,3]],[[28,20]],[[28,20]],[[21,3]],[[18,3]],[[19,20]],[[21,3]],[[21,3]],[[28,20]],[[18,3]],[[28,20]],[[19,3]],[[29,20]],[[21,3]],[[18,3]],[[24,20]],[[19,23]],[[18,3]],[[23,3]],[[26,21]],[[24,20]],[[27,11]],[[27,11]],[[18,3]],[[21,3]],[[21,3]],[[21,3]],[[25,11]],[[18,3]],[[18,3]],[18,3],[23,3],[26,21],[24,20],[27,11],[27,11],[18,3],[21,3],[21,3],[21,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[25,3],[25,11],[18,3],[[18,3],18],[[19,20],19],[[21,3],21],[[22,20],22],[[23,3],23],[[24,20],24],[[26,18],26],[[23,20],23],[[25,11],25],[[21,20],21],[[21,3],21],[[21,3],21],[[18,3],18],[[19,20],19],[[29,20],29],[[24,20],24],[[18,3],18],[[28,20],28],[[28,20],28],[[21,3],21],[[18,3],18],[[19,20],19],[[21,3],21],[[21,3],21],[[28,20],28],[[18,3],18],[[28,20],28],[[19,3],19],[[29,20],29],[[21,3],21],[[18,3],18],[[24,20],24],[[19,23],19],[[18,3],18],[[23,3],23],[[26,21],26],[[24,20],24],[[27,11],27],[[27,11],27],[[18,3],18],[[21,3],21],[[21,3],21],[[21,3],21],[[25,11],25],[[18,3],18],[[18,3],18],[18,3]],"c":[],"p":[[8,"ConfigAccess"],[3,"ConfigSelector"],[15,"bool"],[8,"Iterator"],[4,"Result"],[3,"TypeId"],[3,"MemMapConfigAccess"],[3,"Formatter"],[6,"Result"],[8,"FixedConfigRegister"],[15,"u16"],[15,"u32"],[3,"IOConfigAccess"],[3,"BaseAddressRegister"],[4,"AddressSpace"],[15,"u64"],[4,"AddressWidth"],[3,"CommandRegister"],[3,"HeaderRegister3"],[15,"u8"],[3,"StatusRegister"],[3,"Type0HeaderRegister13"],[3,"SelfTest"],[3,"HeaderRegister2"],[3,"HeaderRegister0"],[3,"HeaderRegister1"],[3,"Type0HeaderRegister11"],[3,"Type0HeaderRegister15"],[3,"GenericCapabilityRegister"],[3,"CapabilityEntry"]]},\
"tartan_serial":{"doc":"Support for Universal Asynchronous Receiver/Transmitter …","t":"NNDNNDNEIDMLLLLLLLLLLMLLLLMLLLLLLLLLLKLAAMKLKLLLLLLLLLLLLLKLLDIDLLLLLLLLLLLKLLLLLLLLLKLLDDMLLLLLLLLLMLLLLLLLLL","n":["Even","High","LineMode","Low","None","NullUART","Odd","Parity","UART","UARTWriteAdapter","baud","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","data_bits","default","default","eq","eq","extended_stop","fmt","fmt","from","from","from","from","into","into","into","into","line_mode","line_mode","model_16550","model_pl011","parity","reset","reset","set_line_mode","set_line_mode","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write_str","ActualRegisterAccess","RegisterAccess","UART16550","borrow","borrow","borrow_mut","borrow_mut","default","from","from","into","into","line_mode","new","read","read","reset","set_line_mode","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write","RegisterBlock","UARTPL011","base_clock_rate","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","line_mode","register_block","reset","set_line_mode","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":[[0,"tartan_serial"],[61,"tartan_serial::model_16550"],[88,"tartan_serial::model_pl011"]],"d":["Set parity so that there are an even number of high bits …","Set parity bit high unconditionally (sticky).","Speed and other line protocol settings.","Set parity bit low unconditionally (sticky).","No parity bit.","Dummy UART driver that drops outgoing data and never …","Set parity so that there are an odd number of high bits in …","Parity setting for line protocol.","High-level interface for UART drivers.","Newtype wrapper that allows a UART implementation to be …","Bits per second (including non-data bits) of line protocol.","","","","","","","","","","","Number of data bits per word in line protocol.","","","","","Use 1.5 or 2 stop bits (depending on baud rate) if set. If …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the device’s active line protocol mode.","","Driver for the common UART interface provided on PCs that …","Driver for Arm’s <code>PrimeCell</code> PL011 UART","Parity setting for line protocol.","Stop transmission, clear buffers, and set the device to a …","","Update the device’s line protocol mode.","","","","","","","","","","","","","","Send the given data through the UART. Blocks until all …","","","Strategy that reads and writes registers from I/O space.","Strategy that provides access to registers for a 16550 …","Driver for a PC UART based on the National Semiconductor …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a driver for the UART with the given base I/O …","Read 8-bit register at the given port","","","","","","","","","","Write 8-bit register at the given port","","","Memory-mapped registers for PL011 UART.","Driver for the PL011 UART.","Frequency, in hertz, of the clock input to the UART.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Memory-mapped registers for this device.","","","","","","","","",""],"i":[2,2,0,2,2,0,2,0,0,0,1,12,6,1,2,12,6,1,2,1,2,1,1,2,1,2,1,1,2,12,6,1,2,12,6,1,2,11,6,0,0,1,11,6,11,6,12,6,1,2,12,6,1,2,12,6,1,2,11,6,12,0,0,0,16,14,16,14,14,16,14,16,14,16,16,15,14,16,16,16,14,16,14,16,14,15,16,14,0,0,18,18,19,18,19,18,19,18,19,18,18,18,18,18,19,18,19,18,19,18],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],0,[[],1],[[],2],[[1,1],3],[[2,2],3],0,[[1,4],5],[[2,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[6,1],0,0,0,[[]],[6],[1],[[6,1]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[[10,[9]]]],[[6,[10,[9]]]],[[[12,[11]],13],5],0,0,0,[[]],[[]],[[]],[[]],[[],14],[[]],[[]],[[]],[[]],[[[16,[15]]],1],[17,[[16,[14]]]],[17,9],[[14,17],9],[[[16,[15]]]],[[[16,[15]],1]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[17,9]],[[[16,[15]],[10,[9]]]],[[14,17,9]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,1],0,[18],[[18,1]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[18,[10,[9]]]]],"c":[],"p":[[3,"LineMode"],[4,"Parity"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"NullUART"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"slice"],[8,"UART"],[3,"UARTWriteAdapter"],[15,"str"],[3,"ActualRegisterAccess"],[8,"RegisterAccess"],[3,"UART16550"],[15,"u16"],[3,"UARTPL011"],[3,"RegisterBlock"]]},\
"tartan_uefi":{"doc":"Support for Unified Extensible Firmware Interface","t":"SSSSSSDSSSDSSSSSSSSDSSSSSSSDSSDSSSSSSSSSSSSSSSSSDDDDSSSSSSSSSDSRSSSSGDDSSSSSSSDSDSIDSSSSSSSSSSSSSSSSSSSSSSSSSSLMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLKLLLMMMMLLLLLLLLLLLLLLLLALLLMLMLLLLLLLLLLLLLLMLLLLLMAMMLMLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLODLLLLLLLLLHDDLLLLLLLFLLLLLMLLLLLLLLLLLDDDDSSSSISSSDDDDMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLMMMMMLLLLMMLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLML","n":["ACPINonVolatile","ACPIReclaim","ACPI_20_GUID","ACPI_GUID","Aborted","AccessDenied","AllocateType","AlreadyStarted","AnyAddress","BadBufferSize","BootServices","BootServicesCode","BootServicesData","BufferTooSmall","ByChild","ByDriver","ByHandle","CRCError","CompromisedData","ConfigurationTable","Conventional","DeviceError","ERROR_BIT","EndOfFile","EndOfMedia","ExactAddress","Exclusive","GUID","Get","HTTPError","Handle","ICMPError","IncompatibleVersion","InvalidLanguage","InvalidParameter","LATEST","LoadError","LoaderCode","LoaderData","MIN_REVISION","MIN_VERSION","MPS_GUID","MappedIO","MappedIOPortSpace","MaxAddress","MaxOEMDefined","MaxOSDefined","MediaChanged","MemoryAttributes","MemoryDescriptor","MemoryMap","MemoryType","MinOEMDefined","MinOSDefined","NULL","NoMapping","NoMedia","NoResponse","NotFound","NotReady","NotStarted","OpenProtocolAttributes","OutOfResources","PAGE_SIZE","Persistent","ProcessorCode","ProtocolError","Reserved","Result","Revision","RuntimeServices","RuntimeServicesCode","RuntimeServicesData","SAL_SYSTEM_GUID","SIGNATURE","SMBIOS3_GUID","SMBIOS_GUID","SecurityViolation","Status","Success","SystemTable","TFTPError","Table","TableHeader","Test","Timeout","Unsupported","Unusable","V1_02","V1_10","V2_00","V2_10","V2_20","V2_30","V2_31","V2_40","V2_50","V2_60","V2_70","V2_80","VolumeCorrupted","VolumeFull","WarnBufferTooSmall","WarnDeleteFailure","WarnFileSystem","WarnResetRequired","WarnStaleData","WarnUnknownGlyph","WarnWriteFailure","WriteProtected","allocate_pages","allocate_pool","allocator","attributes","boot_services","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","config_entry_count","config_table","console_in","console_in_handle","console_out","console_out_handle","crc32","default","default","default","default","default","default","default","descriptor_size","descriptor_version","eq","eq","eq","eq","eq","eq","eq","eq","exit_boot_services","exit_boot_services","firmware_revision","firmware_vendor","fix_version","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_pages","free_pool","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_memory_map","get_protocol","global","handle_protocol","hash","hash","hash","hash","hash","header","header","header","header","header","header","header","header_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_result","io","is_error","is_warning","iter","key","major_version","memory_type","minor_version","more_reliable","name","name","name","name","name","name","name","name","name","name","new","nonvolatile","page_count","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_start","proto","raw_map","revision","runtime","runtime_services","set_more_reliable","set_nonvolatile","set_runtime","set_specific_purpose","set_supports_cpu_crypto","set_supports_exec_protect","set_supports_read_only","set_supports_read_protect","set_supports_uncacheable","set_supports_uncacheable_sem","set_supports_write_back","set_supports_write_combining","set_supports_write_protect","set_supports_write_through","signature","specific_purpose","std_err","std_err_handle","supports_cpu_crypto","supports_exec_protect","supports_read_only","supports_read_protect","supports_uncacheable","supports_uncacheable_sem","supports_write_back","supports_write_combining","supports_write_protect","supports_write_through","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vendor_guid","verify","verify","verify_crc32","verify_descriptor_size","verify_map","verify_revision","verify_signature","verify_size","verify_version","virtual_start","with_more_reliable","with_nonvolatile","with_runtime","with_specific_purpose","with_supports_cpu_crypto","with_supports_exec_protect","with_supports_read_only","with_supports_read_protect","with_supports_uncacheable","with_supports_uncacheable_sem","with_supports_write_back","with_supports_write_combining","with_supports_write_protect","with_supports_write_through","writeln_result","BootAllocator","alloc","borrow","borrow_mut","dealloc","from","into","try_from","try_into","type_id","SYSTEM_TABLE","Logger","OutputStream","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","enabled","encode_c_utf16","flush","from","from","into","into","last_result","log","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_char","write_str","File","FileAttributes","FileMode","LoadedImage","MIN_REVISION","MIN_REVISION","MIN_REVISION","PROTOCOL_ID","Protocol","Read","ReadWrite","ReadWriteCreate","SimpleFileSystem","SimpleTextInput","SimpleTextOutput","SimpleTextOutputMode","attribute","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close","cmp","cursor_column","cursor_row","cursor_visible","default","default","delete","device_handle","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_position","hash","image_base","image_code_type","image_data_type","image_size","into","into","into","into","into","into","into","into","load_options","load_options_size","max_mode","mode","mode","name","name","open","open_volume","output_string","parent_handle","partial_cmp","read","reset","revision","revision","revision","set_position","system_table","test_string","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unload","write"],"q":[[0,"tartan_uefi"],[404,"tartan_uefi::allocator"],[414,"tartan_uefi::global"],[415,"tartan_uefi::io"],[442,"tartan_uefi::proto"]],"d":["Memory that must be preserved in ACPI states S1–S3.","Memory that can be used after the OS initializes ACPI.","","","","","","","","","","Memory used for drivers that provide <code>BootServices</code>.","Memory allocated by drivers that provide <code>BootServices</code>.","","","","","","","","Free memory.","","","","","","","","","","","","","","","","","Memory used for UEFI application code.","Memory allocated by UEFI applications.","","","","Memory mapped to device I/O.","Memory mapped to I/O ports.","","End of range (inclusive) for OEM-specific memory types","End of range (inclusive) for operating system-specific …","","","","","","Beginning of range (inclusive) for OEM-specific memory …","Beginning of range (inclusive) for operating …","","","","","","","","","","Constant page size defined by UEFI specification for …","Free nonvolatile memory.","Memory used by processor firmware code.","","Memory that is never available for use","","","","Memory used for drivers that provide <code>RuntimeServices</code>.","Memory allocated by drivers that provide <code>RuntimeServices</code>.","","","","","","","","","","","","","","","Damaged memory modules.","","","","","","","","","","","","","","","","","","","","","","","Allocate a number of pages of a given type of memory, …","","<code>BootServices</code>-based heap allocator to support the standard …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safe(r) wrapper around <code>BootServices::exit_boot_services</code> …","Signal to UEFI that the OS is now taking over.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Get a map representing the status of all available memory.","Get the implementation of a protocol offered by the given …","Static pointer to the <code>SystemTable</code>, used by features where …","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wraps success <em>and</em> warning codes in <code>Ok</code>, and error codes in …","<code>SimpleTextOutput</code>-based <code>Write</code> implementation to support …","","","Iterate over memory descriptors contained in the map.","","","","","","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","","The name of the enum variant in code, if one is defined …","The name of the enum variant in code, if one is defined …","","The name of the enum variant in code, if one is defined …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write formatted data to an <code>OutputStream</code> and return the …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Convert a Rust string to a buffer containing a …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Protocol for accessing a file or directory.","Basic properties of a file or directory as defined by the …","Controls how a file is opened.","","Minimum supported <code>SimpleFileSystem::revision</code>. Future …","Minimum supported <code>SimpleFileSystem::revision</code>. Future …","","","","File will be read, and should exist already.","File will be read and written, and should exist already.","File will be read and written, and will be created if it …","Protocol for accessing a file system supported by UEFI …","","","","","","","","","","","","","","","","","","","","","","","","","","","Flush and close the file or directory represented by the …","","","","","","","Delete the file or directory represented by the current …","","","","","Write any buffered changes.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Get the handle’s current position in the file.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The name of the enum variant in code, if one is defined …","","Get a handle to a new file, relative to the directory …","Get a handle to the root of the file system.","","","","Read file contents or a directory entry into the buffer.","","Implemented revision of the SimpleFileSystem protocol.","Implemented revision of the File protocol.","","Set the handle’s current position in the file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the contents of <code>buffer</code> out to the current position."],"i":[3,3,51,51,7,7,0,7,2,7,0,3,3,7,13,13,13,7,7,0,3,7,7,7,7,2,13,0,13,7,0,7,7,7,7,10,7,3,3,52,15,51,3,3,2,3,3,7,0,0,0,0,3,3,9,7,7,7,7,7,7,0,7,0,3,3,7,3,0,0,0,3,3,51,52,51,51,7,0,7,0,7,0,0,13,7,7,3,10,10,10,10,10,10,10,10,10,10,10,10,7,7,7,7,7,7,7,7,7,7,1,1,0,53,17,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,9,10,7,11,3,2,12,13,9,10,7,11,3,2,12,13,10,7,3,2,13,17,17,17,17,17,17,26,15,10,7,3,2,12,13,15,15,9,10,7,11,3,2,12,13,17,1,17,17,10,9,10,10,7,11,3,2,12,13,1,1,18,26,17,27,1,51,53,15,9,10,10,7,7,11,11,11,3,3,2,2,12,12,13,13,1,1,0,1,10,7,3,2,13,52,17,27,1,17,27,1,26,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,7,0,7,7,15,15,10,53,10,12,10,10,7,7,3,3,2,2,13,13,15,12,53,10,7,3,2,13,53,0,15,26,12,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,26,12,17,17,12,12,12,12,12,12,12,12,12,12,9,10,7,11,3,2,12,13,10,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,26,17,27,1,51,53,15,9,10,7,11,3,2,12,13,51,52,15,52,15,15,52,52,52,15,53,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,33,33,33,33,33,33,33,33,33,0,0,0,37,36,37,36,36,36,37,0,37,37,36,37,36,36,37,36,36,37,36,37,36,37,36,36,36,0,0,0,0,50,47,49,24,0,45,45,45,0,0,0,0,44,42,50,47,48,44,49,45,46,42,50,47,48,44,49,45,46,44,45,46,44,45,46,47,45,44,44,44,45,46,47,49,44,45,46,47,48,44,49,45,46,42,50,47,48,44,49,45,45,46,46,47,45,49,49,49,49,42,50,47,48,44,49,45,46,49,49,44,42,44,45,45,47,50,42,49,45,47,42,50,47,49,47,49,42,44,45,46,42,50,47,48,44,49,45,46,42,50,47,48,44,49,45,46,42,50,47,48,44,49,45,46,49,47],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,4,[6,[5]]],[[8,[5,7]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[10,10],[7,7],[11,11],[3,3],[2,2],[12,12],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],14],[[7,7],14],[[3,3],14],[[2,2],14],[[13,13],14],0,0,0,0,0,0,0,[[],15],[[],10],[[],7],[[],3],[[],2],[[],12],[[],13],0,0,[[9,9],16],[[10,10],16],[[7,7],16],[[11,11],16],[[3,3],16],[[2,2],16],[[12,12],16],[[13,13],16],[[17,9],15],[[1,9,4],18],0,0,[10,19],[[9,20],21],[[10,20],21],[[10,20],21],[[7,20],21],[[11,20],21],[[3,20],21],[[2,20],21],[[12,20],21],[[13,20],21],0,0,[7,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,10],[[]],[[]],[4,7],[[]],[23,11],[23,11],[22,3],[[]],[[]],[22,2],[[]],[5,12],[[]],[22,13],[1,15],[[1,9,9],[[8,[24,7]]]],0,0,[[10,25]],[[7,25]],[[3,25]],[[2,25]],[[13,25]],[[],26],[17,26],[27,26],[1,26],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,18],0,[7,16],[7,16],[15,28],0,[10,19],0,[10,19],[12,16],[10,[[6,[29]]]],[10,[[6,[29]]]],[7,[[6,[29]]]],[7,[[6,[29]]]],[3,[[6,[29]]]],[3,[[6,[29]]]],[2,[[6,[29]]]],[2,[[6,[29]]]],[13,[[6,[29]]]],[13,[[6,[29]]]],[[],15],[12,16],0,[[10,10],[[6,[14]]]],[[7,7],[[6,[14]]]],[[3,3],[[6,[14]]]],[[2,2],[[6,[14]]]],[[13,13],[[6,[14]]]],0,0,0,0,[12,16],0,[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],[[12,16]],0,[12,16],0,0,[12,16],[12,16],[12,16],[12,16],[12,16],[12,16],[12,16],[12,16],[12,16],[12,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[32],[15],[[]],[15],[15],[[]],[[]],[32],[15],0,[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],[[12,16],12],0,0,[[33,34],35],[[]],[[]],[[33,35,34]],[[]],[[]],[[],8],[[],8],[[],31],0,0,0,[[]],[[]],[[]],[[]],[36,36],[[]],[[37,38],16],[29,[[40,[[39,[19]]]]]],[37],[[]],[[]],[[]],[[]],0,[[37,41]],[42,36],[[]],[[],8],[[],8],[[],8],[[],8],[[],31],[[],31],[[36,43],21],[[36,29],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[45,45],[46,46],[[]],[[]],[[]],[47],[[45,45],14],0,0,0,[[],45],[[],46],[47,7],0,[[44,44],16],[[45,45],16],[[46,46],16],[47,18],[[48,20],21],[[44,20],21],[[49,20],21],[[45,20],21],[[46,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[5,45],[[]],[[]],[5,46],[47,[[8,[5,7]]]],[[45,25]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[45,[[6,[29]]]],[45,[[6,[29]]]],[[47,[39,[19]],45,46],[[8,[47,7]]]],[50,[[8,[47,7]]]],0,0,[[45,45],[[6,[14]]]],[[47,[39,[35]]],[[8,[4,7]]]],0,0,0,0,[[47,5],18],0,0,[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[47,[39,[35]]],[[8,[4,7]]]]],"c":[],"p":[[3,"BootServices"],[3,"AllocateType"],[3,"MemoryType"],[15,"usize"],[15,"u64"],[4,"Option"],[3,"Status"],[4,"Result"],[3,"Handle"],[3,"Revision"],[3,"GUID"],[3,"MemoryAttributes"],[3,"OpenProtocolAttributes"],[4,"Ordering"],[3,"MemoryMap"],[15,"bool"],[3,"SystemTable"],[6,"Result"],[15,"u16"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"u128"],[8,"Protocol"],[8,"Hasher"],[3,"TableHeader"],[3,"RuntimeServices"],[8,"Iterator"],[15,"str"],[3,"String"],[3,"TypeId"],[8,"Sized"],[3,"BootAllocator"],[3,"Layout"],[15,"u8"],[3,"OutputStream"],[3,"Logger"],[3,"Metadata"],[15,"slice"],[3,"Box"],[3,"Record"],[3,"SimpleTextOutput"],[15,"char"],[3,"SimpleTextOutputMode"],[3,"FileMode"],[3,"FileAttributes"],[3,"File"],[3,"SimpleTextInput"],[3,"LoadedImage"],[3,"SimpleFileSystem"],[3,"ConfigurationTable"],[8,"Table"],[3,"MemoryDescriptor"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
