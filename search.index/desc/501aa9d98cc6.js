rd_("CkThis address is in I/O space (supported on x86/x86-64 only)AeBranch on a predicateAjContains the success value0B`Capability ID defined by PCI-SIG0AcAccess to I/O spaceClSupport for the I/O based configuration access method on \xe2\x80\xa6Ed<code>SimpleTextOutput</code>-based <code>Write</code> implementation to support \xe2\x80\xa6gIBM AIXA`Add two integersj32-bit ArmBoFile uses big-endian (MSB-first) byte ordering.AhContains the error value0BlSet parity bit low unconditionally (sticky).BcCopy a slice of a string or buffer.CnCompute the remainder of dividing the first integer by the \xe2\x80\xa6BgCompute the bitwise NOR of two integersCnSet parity so that there are an odd number of high bits in \xe2\x80\xa6Bj<code>EL1</code>, used for OS kernel code.Cn<code>EL2</code>, used for hypervisors in virtualized systems.Ab32-bit address busAb64-bit address busj32-bit x86Ck<code>AESNI</code>: Supports AES acceleration instructions.BnAbstract syntax tree for ACPI Machine LanguageC`Architecture-specific primitives for 32-bit Arm.Bl<code>AVX</code>: Supports AVX instructions.CjPCI bus number within the indicated segment group. The \xe2\x80\xa6BgShortcut for constructing parser errorsCcFormat a <code>NameString</code> like a path in ASLBf<code>XCR0.X87</code>: Hardcoded to 1.CgRetrieve the current value of this register for the \xe2\x80\xa6BkRetrieve the current value of this register0CmGet the current exception level. Only accessible from EL1 \xe2\x80\xa6CnGet the value of the flag for the current exception level. \xe2\x80\xa622323CoRetrieve the current value of the <code>EFLAGS</code> register.33333333333CjRetrieve the feature list from the processor using the \xe2\x80\xa6CiRetrieve the extended feature list from the processor \xe2\x80\xa6CgRetrieve the supported address space sizes from the \xe2\x80\xa6Bl<code>MMX</code>: Supports MMX instructions.CkCreate a header with zero-initialized stack pointers and anBdCreate a new zero-initialized headerBkCreate a new zero-initialized stack pointerCaCreate a new selector with the given field valuesBdCreate a zero-initialized descriptor0CmAssociate a parse error with its full input, to reference \xe2\x80\xa6ChCreate a driver for the UART with the given base I/O \xe2\x80\xa6CnUpdate the register for the specified exception level with \xe2\x80\xa6BgUpdate the register to the given value.0CjUpdate the value of the flag for the current exception \xe2\x80\xa611212DdUpdate the <code>EFLAGS</code> register with the given value, as \xe2\x80\xa622222CbUpdate the register with the value in this struct.CeUpdate the register with the provided selector value.0444Fc<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> \xe2\x80\xa6Bl<code>SSE</code>: Supports SSE instructions.CkArchitecture-specific primitives for 32-bit x86 processors.lAROS (Amiga)Cl<code>CS</code> register, which controls instruction loadingiCore dumpDd<code>DS</code> register, which controls the default segment for \xe2\x80\xa6ClSet parity so that there are an even number of high bits \xe2\x80\xa6BkProtocol for accessing a file or directory.eHP-UXBmSet parity bit high unconditionally (sticky).AdGNU with Hurd kernelAcIntel Itanium IA-64hSGI IRIXBcThe kind of exception being handledChThe kind of exception being handled: sync, IRQ, FIQ, \xe2\x80\xa6CmEvaluate to true if the left value is less than the right \xe2\x80\xa6CnLoad a dynamically-generated SSDT from a field, region, or \xe2\x80\xa6nMotorola 68000fMIPS IC`Attach a name to an anonymous data or reference.BhCompute the bitwise NAND of two integersjDo nothingiNo value.AjInvalid placeholder value.0AjOriginal Unix System V ABI1BaNo specific architecture defined.BcMarks an ignored or unused segment.BcMarks an ignored or unused section.nNo parity bit.BiSegment containing auxillary information.BiSection containing auxillary information.BlFile will be read, and should exist already.BbSome value of type <code>T</code>.CcRepresents a full flattened device tree blob (DTB).BfHigh-level interface for UART drivers.CmTry to wait for another thread to signal an event object, \xe2\x80\xa6DlTrapped execution of a wait instruction (<code>WFE</code>/<code>WFI</code>).Cb<code>EL0</code>, used for unprivileged user code.AmRound toward zero (truncate).BgInterface to architecture-specific codeCkBits per second (including non-data bits) of line protocol.CkFlattened device tree, a.k.a. devicetree blob (DTB), as \xe2\x80\xa6BjTop-level AML objects defined in the tablenData resourcesBaData objects, defined in \xc2\xa720.2.3AkProperty value as raw bytesAoReturns the argument unchanged.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CeIterate over memory descriptors contained in the map.CnUnconditionally transfer control to the instruction at the \xe2\x80\xa6DbWraps a byte-oriented parser to work with <code>ParserState</code>oSpecial symbolsBjMiscellaneous objects, defined in \xc2\xa720.2.6CkThe name of the enum variant in code, if one is defined \xe2\x80\xa60BkNames of objects, arguments, and referencesBaName objects, defined in \xc2\xa720.2.22222AiThe name of the property.3333333333333AfCreate a null selectorCiGet a handle to a new file, relative to the directory \xe2\x80\xa6AdSegments of the pathCfIndicates the segment contains data that should be \xe2\x80\xa6BeRead 8-bit register at the given portChRead file contents or a directory entry into the buffer.Dk<code>SF</code>: Indicates that the most-significant bit of a result is \xe2\x80\xa6BfThe number of bytes in this structure.BdSize of the reserved memory in bytesAlTop-level terms and opcodes.AjTerms, defined in \xc2\xa720.2.5Bn<code>TF</code>: Enable single-step debugging.Di<code>U/S</code>: Allows access to this memory region from permission \xe2\x80\xa6De<code>ZF</code>: Indicates that the result of an instruction is zero.DnCreate a new <code>alias</code> for existing named <code>source</code> object.j64-bit ArmEc<code>#BR</code>: Out-of-bounds index detected with <code>BOUND</code> instruction.AaBreak from a loopBfClassifies different exception causes.AmGet the target of a referenceBiEvaluate to true if both values are equalBiDeclare a waitable synchronization objectDh<code>ES</code> segment register, which can be used as an additional \xe2\x80\xa6BoSignal an error that requires a system shutdownAiDeclare a group of fieldsBcSection that groups other sections.BnCreate a reference to an index within a bufferAeGNU with Linux kernelBoExpected value of the <code>magic</code> field.CfSearch a package and return the index of the first \xe2\x80\xa6AkDeclare an acquirable mutexAaA named bitfield.CmOperating-system-specific ABI extensions supported by the \xe2\x80\xa6BnAn object that can be parsed from AML bytecodefRISC-VBdCreate a reference to the given nameBlClear the signalled state of an event objectA`Sun/Oracle SPARCC`Evaluate the contained terms within a new scope.ClDelay for at least the given milliseconds, releasing the \xe2\x80\xa6Dh<code>SS</code> segment register, which controls the location of the \xe2\x80\xa6DbDelay for at least the given microseconds, but do <em>not</em> \xe2\x80\xa6CnUpdate the destination with the given value, converting it \xe2\x80\xa6AaCompaq TRU64 UnixBn<code>EL3</code>, used for the secure manager.CbGet the current value of the system timer in 100nsCmEncode an integer into a sequence of binary-coded decimal \xe2\x80\xa6CgWrapper for a raw byte array used as the value of a \xe2\x80\xa6CnExecute a series of statements as long as the predicate is \xe2\x80\xa6Dd<code>CF</code>: Indicates an arithmetic instruction generated a \xe2\x80\xa6Ck<code>EC</code>: The class of exception that was triggered.CgSpecifies the address size (32- or 64-bit) of the file.CnIndicates the general purpose of the function, from a list \xe2\x80\xa6ClFlush and close the file or directory represented by the \xe2\x80\xa6CmLow-level CPUID call. Writes the leaf/subleaf index given \xe2\x80\xa6Di<code>D</code>: Set by the processor when an instruction modifies the \xe2\x80\xa6BdHelpers for reporting parsing errorsB`The error returned by the parserCa<code>EFLAGS</code> value saved by the processor.AkCommon descriptor settings.BcCommon segment descriptor settings.B`Common gate descriptor settings.BmFlags for various attributes of this section.B`CPU architecture-specific flags.CfControls permissions and other OS/arch-specific flags.100BbFloating-point control and status.AkWrite any buffered changes.BbHeader common to all ELF variants.0CmRead an 8-bit value from the port at the given address in \xe2\x80\xa6ClThe inclusive maximum address offset (i.e., size - 1) of \xe2\x80\xa6CiThe \xe2\x80\x9climit\xe2\x80\x9d of the segment, which is a maximum or \xe2\x80\xa61CkIndicates that this selector references a descriptor in \xe2\x80\xa6CaMagic number that identifies this as an ELF file.AiParsers for AML bytecode.ClTry to parse an object of this type from the given input \xe2\x80\xa6CmStop transmission, clear buffers, and set the device to a \xe2\x80\xa6Bn<code>SSE2</code>: Supports SSE2 instructions.Bn<code>SSE3</code>: Supports SSE3 instructions.CjSetting this bit triggers the device to start its self \xe2\x80\xa6BmParser context needed to disambiguate grammarChThe state of the parser at the time we are interested inCmReturn false if the function is not present, as indicated \xe2\x80\xa6AjThe value of the property.CfIndicates the segment contains data that should be \xe2\x80\xa6CfIndicates the section contains data that should be \xe2\x80\xa6CjSend the given data through the UART. Blocks until all \xe2\x80\xa6BfWrite 8-bit register at the given portDfWrite the contents of <code>buffer</code> out to the current position.CmBlock of raw bytes, optionally initialized in whole or in \xe2\x80\xa6BbConcatenate two strings or buffersClDeclare a device and its associated fields, methods, and \xe2\x80\xa6BmPerform integer (quotient-remainder) divisionDh<code>FS</code> segment register, which can be used as an additional \xe2\x80\xa6Dh<code>GS</code> segment register, which can be used as an additional \xe2\x80\xa6CiFile header for an ELF file with a specific address size.AhExecute a control methodDf<code>T</code> (thread) mode: use the stack pointer register from EL0.CbFile uses little-endian (LSB first) byte ordering.CbThis address is in the normal memory address spaceAhDeclare a control methodCaThe expected file class for the current platform.0CgThe expected endianness value for the current platform.CcThe expected machine type for the current platform.0fNetBSDCmAn empty file section that will be filled with zeros when \xe2\x80\xa6BnSend a signal value to a device/processor/zoneBaParity setting for line protocol.ClExit the current method and yield the given value to the \xe2\x80\xa6BiSignal to one thread waiting on the eventBcFile uses 32-bit addresses/offsets.BcFile uses 64-bit addresses/offsets.BnGet the length of a string, buffer, or packageC`The exception level that generated an exception.BlLocation to store the result of an operationj64-bit x86BkAccess methods for PCI configuration space.CkSpecifies how to resolve this path as absolute or relative.BhData exposed in PCI configuration space.CkDelete the file or directory represented by the current \xe2\x80\xa6BgPCI device number on the indicated bus.AhVendor-defined device IDDk<code>G</code>: Indicates that this is a global page shared by all task \xe2\x80\xa6DjStatic pointer to the <code>SystemTable</code>, used by features where \xe2\x80\xa6AhCommon ACPI table headerBfSaved task data and pointer to bitmapsCmRead a 16-bit value from the port at the given address in \xe2\x80\xa6CmRead a 32-bit value from the port at the given address in \xe2\x80\xa6ChIndicates that multiple sections of this type can be \xe2\x80\xa6CeThe offset of the referenced segment entry in the \xe2\x80\xa6CjCombinator for productions that use a deterministic opcodeCkOperating-system-specific ABI extensions that this file \xe2\x80\xa6ClWrite an 8-bit value to the port at the given address in \xe2\x80\xa6BbSupport for virtual memory paging.Di<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.De<code>PF</code>: Indicates that the least-significant byte of the \xe2\x80\xa6BaParity setting for line protocol.DbSupports random number generation with the <code>RDRAND</code> \xe2\x80\xa6Ca<code>RF</code>: Disable instruction breakpoints.B`Capability ID defined by PCI-SIGBeStatus bits indicated by the functionCnID of the chipset manufacturer for this function, assigned \xe2\x80\xa6CkArchitecture-specific primitives for 64-bit x86 processors.CmArchitecture-specific bindings for 64-bit Intel x86-based \xe2\x80\xa6DbTry to acquire a mutex, returning <em>true</em> if the attempt \xe2\x80\xa6CmIndicates that the previous current node is complete, and \xe2\x80\xa6BcFenixOS (Passas and Karlsson 2011?)gFreeBSDCkDecode a series of binary-coded decimal nibbles into an \xe2\x80\xa6CjEvaluate to true if the left value is greater than the \xe2\x80\xa6AiUnknown address bus widthBgIdentifies the target CPU architecture.nNovell ModestoCfFour-character name segment, allowing underscores, \xe2\x80\xa6CkRound to the nearest number, with ties toward even numbers.gOpenBSDkDEC OpenVMSA`Stratus Open VOSCnGroup of related data elements, optionally inititalized in \xe2\x80\xa6n32-bit PowerPCAdRelease a held mutexAbSun/Oracle SolarisCbSection containing packed null-terminated strings.CiSection containing the symbol table for this object file.AnTerm that resolves to a value.ClTried to execute an undefined/unsupported opcode, or for \xe2\x80\xa6CaExpected value of the <code>version</code> field.ChExpected value of the <code>header_version</code> field.C`Architecture-specific primitives for 64-bit Arm.BgBase address of the APIC\xe2\x80\x99s registers.BeBase address of the descriptor table.CmBase virtual address of the segment, to which offsets are \xe2\x80\xa6BdBase address of the descriptor tableBlGet the address of the top-level page table.BdStart address of the reserved memoryDi<code>x2APIC</code>: Supports the enhanced \xe2\x80\x9cx2\xe2\x80\x9d interface for the \xe2\x80\xa6Dj<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the \xe2\x80\xa6Df<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper \xe2\x80\xa6BmI/O permission map and interrupt redirect mapCjIndicates whether the function has a self-test capability.AlControl bits set by the hostCmCan be cleared to disable the APIC. However, it cannot be \xe2\x80\xa6CfIndicates the segment contains code that should be \xe2\x80\xa6CgIndicates this section contains code that should be \xe2\x80\xa6CkIndicates whether this is a code (true) or data (false) \xe2\x80\xa6CeIndicates that this is a <code>GateDescriptor</code>.0Dd<code>PS</code>: Indicates that this entry directly maps a page. \xe2\x80\xa6A`CPU architecture0Eh<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.ClWrite a 16-bit value to the port at the given address in \xe2\x80\xa60CoStack pointer (<code>SP</code>) value for this privilege level.Cf<code>P</code>: Indicates that the segment is defined.Df<code>P</code>: Indicates that this entry is mapped. Otherwise the \xe2\x80\xa6CoStack segment (<code>SS</code>) value for this privilege level.Ck<code>AESNI</code>: Supports AES acceleration instructions.Bl<code>AVX</code>: Supports AVX instructions.Bf<code>XCR0.X87</code>: Hardcoded to 1.Bl<code>MMX</code>: Supports MMX instructions.Fc<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> \xe2\x80\xa6Bl<code>SSE</code>: Supports SSE instructions.Cb<code>SSE4_1</code>: Supports SSE4.1 instructions.Cb<code>SSE4_2</code>: Supports SSE4.2 instructions.CfIndicates the section contains null-terminate strings.El<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.CmConvert a list of segments in various formats into a path \xe2\x80\xa6AbELF format version0B`Capability ID defined by PCI-SIGCkAn ACPI table that contains AML, such as the DSDT or an \xe2\x80\xa6CnSets access information for <strong>following</strong> fields.CkA <code>GateDescriptor</code> for a call to 32/64-bit code.mNuxi CloudABIBcContinue to the next loop iterationCgDeclare an object that is defined in another ACPI tableAnControls how a file is opened.ChTypes of object files supported by the ELF specificationBgSpeed and other line protocol settings.BjSegment that should be loaded into memory.BkSize in bytes required to map all I/O portsAlMemory mapped to device I/O.AeMultiply two integersCjEvaluate to true if the left value is not equal to the \xe2\x80\xa6ChDummy UART driver that drops outgoing data and never \xe2\x80\xa6Ee<code>#OF</code>: Overflow condition was detected with <code>INTO</code> instruction.CeHelper struct that prints human-readable position \xe2\x80\xa6BfDefines a property of the current nodeDiIndicates that the next most significant <code>bit_length</code> bits \xe2\x80\xa6BfMemory that is never available for useCfA reference to an entry in a segment descriptor table.CiControl and status flags for a function\xe2\x80\x99s self test \xe2\x80\xa6CdSubtract an integer from another, ignoring underflowCaA <code>GateDescriptor</code> for task switching.AkConvert a value to a bufferCfCopy an ASCII string from a buffer into a string valueD`A <code>GateDescriptor</code> for a 32/64-bit interrupt handler.AgDamaged memory modules.Di<code>A</code>: Set by the processor when an instruction accesses the \xe2\x80\xa6ClIndicates this section should be loaded into memory when \xe2\x80\xa6BgProcessor feature detection with CPUID.Eo<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.ChParse a devicetree blob that begins at the specified \xe2\x80\xa6CnPCI function number on the indicated device. Usually zero, \xe2\x80\xa6CkExecute a parser in a new scope relative to the current \xe2\x80\xa6CgControls whether the device may respond to accesses \xe2\x80\xa6CkThe last I/O port that is covered by this map. The bits \xe2\x80\xa6ChSize in bytes of this segment once it is loaded into \xe2\x80\xa600ClRegister number in config space (offset in 4-byte units) \xe2\x80\xa6CnIndicates that this is interrupt vector is reserved by the \xe2\x80\xa6BgVendor-defined revision of the hardwareDcImplemented revision of the <code>SimpleFileSystem</code> protocol.BjImplemented revision of the File protocol.CmSelector that points to the code or task state segment to \xe2\x80\xa6CfIndicates the segment contains data that should be \xe2\x80\xa6Dk<code>SF</code>: Indicates that the most-significant bit of a result is \xe2\x80\xa6Bn<code>TF</code>: Enable single-step debugging.Di<code>U/S</code>: Allows access to this memory region from permission \xe2\x80\xa6De<code>ZF</code>: Indicates that the result of an instruction is zero.ClIndicates the purpose of the function more specifically, \xe2\x80\xa6Eg<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.Ck<code>AESNI</code>: Supports AES acceleration instructions.Bl<code>AVX</code>: Supports AVX instructions.Bf<code>XCR0.X87</code>: Hardcoded to 1.Bl<code>MMX</code>: Supports MMX instructions.Fc<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> \xe2\x80\xa6Bl<code>SSE</code>: Supports SSE instructions.Cf<code>R/W</code>: Allows writes to this memory region.CnSimple kernel allocator that keeps a singly-linked list of \xe2\x80\xa6CjSymbol for a positional argument passed to the current \xe2\x80\xa6CmDeclare fields that can only be accessed after writing to \xe2\x80\xa6ClIndicates that the following events are within the scope \xe2\x80\xa6BjCompute the bitwise OR of the two integersCeConcatenate two buffers containing resource templatesCkTry to create a reference, returning false if it is not \xe2\x80\xa6AmDecrement an integer variableCgTrapped access to a FPU/vector register or instruction.CgSpecifies the address size (32- or 64-bit) of the file.AmIncrement an integer variableAlAn external interrupt (IRQ).DfThe maximum supported value of the <code>limit</code> field (20 bits).ClEvaluate to true if the left value is less than or equal \xe2\x80\xa6BfFind an ACPI table indexed by the XSDTCjEvaluate to true if either of the values is a non-zero \xe2\x80\xa6ChConstant page size defined by UEFI specification for \xe2\x80\xa6Dj<code>#PF</code>: Tried to load a page that was not present, or used a \xe2\x80\xa6n64-bit PowerPCCaDeclare a processor and associated register blockChFile will be read and written, and should exist already.CaMultiply an integer by the specified power of twoClA named object, variable, reference expression, or debug \xe2\x80\xa6CmConvert a value to an integer, either by parsing a string \xe2\x80\xa6ClDriver for a PC UART based on the National Semiconductor \xe2\x80\xa6AjDriver for the PL011 UART.ClAlignment of the segment in bytes, for both the file and \xe2\x80\xa6BkRequired alignment of the section in bytes.110Dj<code>BootServices</code>-based heap allocator to support the standard \xe2\x80\xa6Df<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in \xe2\x80\xa6BfBus numbers covered by this memory mapBnNumber of data bits per word in line protocol.Dk<code>DF</code>: String instructions work on addresses high-to-low when \xe2\x80\xa6C`Size in bytes of the file data for this segment.BlSize in bytes of this section\xe2\x80\x99s file data.110BjDistinguishes executables, libraries, etc.0BmFlags for various attributes of this section.0Bn<code>EAX</code> value saved by the processor.Bn<code>EBX</code> value saved by the processor.Bn<code>ECX</code> value saved by the processor.Bn<code>EDX</code> value saved by the processor.CjIndicates a standard programming interface that can be \xe2\x80\xa6BaException and interrupt handling.0B`Support for managing interrupts.BmGet the device\xe2\x80\x99s active line protocol mode.CkIndicates the desired length of bursts in units of 0.25 \xe2\x80\xa6CmDefines a byte slice parser function, avoiding repetitive \xe2\x80\xa6CiControl and status flags for a function\xe2\x80\x99s self test \xe2\x80\xa6Dd<code>CF</code>: Indicates an arithmetic instruction generated a \xe2\x80\xa6Ck<code>EC</code>: The class of exception that was triggered.CnIndicates the general purpose of the function, from a list \xe2\x80\xa6Di<code>D</code>: Set by the processor when an instruction modifies the \xe2\x80\xa6?AiUpdate the segment limit.CkIndicates that this selector references a descriptor in \xe2\x80\xa6Bn<code>SSE2</code>: Supports SSE2 instructions.Bn<code>SSE3</code>: Supports SSE3 instructions.CjSetting this bit triggers the device to start its self \xe2\x80\xa6CfIndicates the segment contains data that should be \xe2\x80\xa6CfIndicates the section contains data that should be \xe2\x80\xa6CeID of the device as defined by the card manufacturer.2Dk<code>SF</code>: Indicates that the most-significant bit of a result is \xe2\x80\xa6Bn<code>TF</code>: Enable single-step debugging.Di<code>U/S</code>: Allows access to this memory region from permission \xe2\x80\xa6De<code>ZF</code>: Indicates that the result of an instruction is zero.BoMemory width used to read/write from a registerAmWidth used to access a field.BeCompute a bitwise AND of two integersAmInvert the bits of an integerBgCompute the bitwise XOR of two integersAmTrigger a debugger breakpointCo<code>#BP</code>: Breakpoint via <code>INT3</code> instruction.CjUpdate the destination with a copy of the given value, \xe2\x80\xa6ChData resolved at compile time, possibly grouped in a \xe2\x80\xa6CmSpecifies whether the file uses big or little endian byte \xe2\x80\xa6CkStatus/mask bits for each type of floating-point exception.BoA file with an entry point that can be executedBfRules for reading and writing a field.BoSupport flags from Fixed ACPI Description TableCmDeclare a group of field that must be accessed by writing \xe2\x80\xa6BfMemory used for UEFI application code.BfMemory allocated by UEFI applications.ChEvaluate to true if both arguments are non-zero integersBeEvaluate to true if the value is zeroCeException from lower level (e.g., EL0) in 64-bit modeCgHighest device number allowed by the PCI specification.CiFully qualified object path, either absolute or relative.ClGet an integer representing the type of the given value. \xe2\x80\xa6CnType ID returned by <code>ExpressionOpcode::ObjectType</code>.CkIndicates whether a name is absolute or relative to the \xe2\x80\xa6AhFree nonvolatile memory.BoDivide an integer by the specified power of twoAkA named object or variable.Di<code>#SS</code>: The stack overflowed its segment or the segment was \xe2\x80\xa6BnSection containing the hash table for symbols.CnTop-level, most general term type where the value (if any) \xe2\x80\xa6CkIndicates what to do with unused bits when writing a field.CmGroup of related data elements, with a number of elements \xe2\x80\xa6CnControls whether the device may act as a master of the PCI \xe2\x80\xa6Dj<code>ISS</code>: Additional data about the exception in a format that \xe2\x80\xa6DjSupports counting the set bits in a value with the <code>POPCNT</code> \xe2\x80\xa6CjIndicates that a debug exception should be raised when \xe2\x80\xa6CmSpecifies whether the file uses big or little endian byte \xe2\x80\xa6DjDepending on the <code>section_type</code>, this may identify the size \xe2\x80\xa60CgIndicates any non-trapped exceptions that have been \xe2\x80\xa6CnAdditional flags that depend on the <code>section_type</code>.0ClPrint this object\xe2\x80\x99s bitfield values. Helper method for \xe2\x80\xa600000BiThe complete input we are trying to parseBjThe complete input we were trying to parseBiPerform early architecture-specific setupCmThis module contains some compiler-rt intrinsics that are \xe2\x80\xa6BhIndicates that this section and the [\xe2\x80\xa6Dn<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.Dg<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.Dm<code>XD</code>/<code>NX</code>: Prevent the processor from executing any \xe2\x80\xa6Dg<code>AVL</code>: Ignored bit that can be used by the operating system.BiBits that are left for OS-specific flags.BhBits that are left for OS-defined flags.BeSupport for protected mode operation.00CmThe processor can snoop on its own cache line. This helps \xe2\x80\xa6AhVendor-defined device IDDk<code>G</code>: Indicates that this is a global page shared by all task \xe2\x80\xa6ChIndicates that multiple sections of this type can be \xe2\x80\xa6CdUpdate the offset of the referenced entry in the \xe2\x80\xa6Di<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.De<code>PF</code>: Indicates that the least-significant byte of the \xe2\x80\xa6DbSupports random number generation with the <code>RDRAND</code> \xe2\x80\xa6Ca<code>RF</code>: Disable instruction breakpoints.BeStatus bits indicated by the functionCnID of the chipset manufacturer for this function, assigned \xe2\x80\xa6CjSupport for Executable and Linkable Format (ELF) binaries.CkSupport for Peripheral Component Interconnect (PCI) and \xe2\x80\xa6Dd<code>CF</code>: Indicates an arithmetic instruction generated a \xe2\x80\xa6Ck<code>EC</code>: The class of exception that was triggered.CnIndicates the general purpose of the function, from a list \xe2\x80\xa6Di<code>D</code>: Set by the processor when an instruction modifies the \xe2\x80\xa6CkIndicates that this selector references a descriptor in \xe2\x80\xa6Bn<code>SSE2</code>: Supports SSE2 instructions.Bn<code>SSE3</code>: Supports SSE3 instructions.CjSetting this bit triggers the device to start its self \xe2\x80\xa6CfIndicates the segment contains data that should be \xe2\x80\xa6CfIndicates the section contains data that should be \xe2\x80\xa6CiArchitecture-specific primitives common to 32-bit and \xe2\x80\xa6ChShared architecture-specific bindings for 32-bit and \xe2\x80\xa6CfMemory that can be used after the OS initializes ACPI.C`Declare an arbitrary-width field within a bufferBkSymbol representing debugger output device.ClSection containing the addresses of destructor functions \xe2\x80\xa6Ck<code>#DE</code>: Division by zero or overflow in division.Db<code>#DF</code>: A fault was triggered while handling another \xe2\x80\xa6CfSegment containing information for the dynamic linker.CfSection containing information for the dynamic linker.CgInitial header which has the same layout in all ELF \xe2\x80\xa6CnSegment containing the path to the program\xe2\x80\x99s interpreter \xe2\x80\xa6CbSymbol for a variable local to the current method.BnType of comparison used for a branch in an \xe2\x80\xa6BgInformation about how to call a method.BhTerm that defines an object with a name.Dc<code>NMI</code>: Severe external interrupt that cannot be ignored.BeProgram counter not properly aligned.CfInput data plus context needed to disambiguate grammarBeAddress space used to access a field.AgRelocatable object fileBcStack pointer not properly aligned.ChDefines the contents and meaning of individual sections.CiA standard exception traceable to a specific instruction.BnAn internal error with the processor (SError).AfSystem error (SError).B`Declare a thermal zone namespaceBmEncode a value as an ASCII hexadecimal numberCiA single entry in the exception <code>VectorTable</code>.ClException vector table that contains code to handle each \xe2\x80\xa6CgException vector table that contains code to handle \xe2\x80\xa6AoThe address as a 32-bit number.CjThe address as a 64-bit number, when combined with the \xe2\x80\xa6CkReturn true if a function is available at the specified \xe2\x80\xa6Cn<code>DS</code>: Supports writing debug information to memory.De<code>DN</code>: Always use the default encoding for NaN results. \xe2\x80\xa6CjVirtual address of executable entry point. Zero if not \xe2\x80\xa60CbFile offset to the start of this segment\xe2\x80\x99s data.CbFile offset to the start of this section\xe2\x80\x99s data.110CkParse a devicetree blob that starts at the beginning of \xe2\x80\xa6Dh<code>G</code>: Indicates that the segment limit is in units of 4KB. \xe2\x80\xa6ChSize in bytes of this header. May be longer than the \xe2\x80\xa60ClIndicates which of the standard PCI configuration header \xe2\x80\xa6EcWraps success <em>and</em> warning codes in <code>Ok</code>, and error codes in \xe2\x80\xa6CnIndicates the longest period the device can wait to access \xe2\x80\xa6CmDriver for the common UART interface provided on PCs that \xe2\x80\xa6CdDriver for Arm\xe2\x80\x99s <code>PrimeCell</code> PL011 UARTEh<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> \xe2\x80\xa6Di<code>NT</code>: Indicates that the processor should switch back to a \xe2\x80\xa6CjByte offset within capability space of next capability \xe2\x80\xa6Df<code>FPU</code>: The processor has a built-in x87 floating-point unitBlGet a handle to the root of the file system.CkParse an ACPI table that contains AML, including the headerCbUpdate the base address of the APIC\xe2\x80\x99s registers.AhUpdate the base address.BlSet the address of the top-level page table.Di<code>x2APIC</code>: Supports the enhanced \xe2\x80\x9cx2\xe2\x80\x9d interface for the \xe2\x80\xa6Dj<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the \xe2\x80\xa6Df<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper \xe2\x80\xa6CjIndicates whether the function has a self-test capability.AlControl bits set by the hostCmCan be cleared to disable the APIC. However, it cannot be \xe2\x80\xa6CfIndicates the segment contains code that should be \xe2\x80\xa6CgIndicates this section contains code that should be \xe2\x80\xa6CkIndicates whether this is a code (true) or data (false) \xe2\x80\xa6Dd<code>PS</code>: Indicates that this entry directly maps a page. \xe2\x80\xa6Eh<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.Cf<code>P</code>: Indicates that the segment is defined.Df<code>P</code>: Indicates that this entry is mapped. Otherwise the \xe2\x80\xa6Cb<code>SSE4_1</code>: Supports SSE4.1 instructions.Cb<code>SSE4_2</code>: Supports SSE4.2 instructions.CfIndicates the section contains null-terminate strings.El<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.CeIf this is a system descriptor, indicates which type.CfSupport for Advanced Configuration and Power InterfaceBnArchitecture-specific primitives for Tartan OSCaSupport for Unified Extensible Firmware InterfaceAhVendor-defined device IDDk<code>G</code>: Indicates that this is a global page shared by all task \xe2\x80\xa6ChIndicates that multiple sections of this type can be \xe2\x80\xa6Di<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.De<code>PF</code>: Indicates that the least-significant byte of the \xe2\x80\xa6DbSupports random number generation with the <code>RDRAND</code> \xe2\x80\xa6Ca<code>RF</code>: Disable instruction breakpoints.BeStatus bits indicated by the functionCnID of the chipset manufacturer for this function, assigned \xe2\x80\xa6CeAdditional information about how a field is accessed.AhType of register addressBoDifferentiates between memory and I/O addressesBoSize of address bus supported by a PCI functionCcProvides methods to access PCI configuration space.DlIndicates that <strong>following</strong> fields should be accessed with \xe2\x80\xa6CmSection containing the addresses of constructor functions \xe2\x80\xa6lFree memory.Di<code>H</code> (handler) mode: use the stack pointer register for the \xe2\x80\xa6AjA substructure of a field.Ef<code>EFLAGS</code>/<code>RFLAGS</code>: General flags, including control, status, \xe2\x80\xa6CiEvaluate to true if the left value is greater than or \xe2\x80\xa6DfVariant of the <code>Header</code> structure native to the current \xe2\x80\xa6CfTried to execute instructions after an illegal return.CiHighest function number allowed by the PCI specification.DeMinimum supported <code>SimpleFileSystem::revision</code>. Future \xe2\x80\xa60Bo<code>#MC</code>: Internal processor/bus error.De<code>DAIF</code>: Controls masking of different kinds of exceptions.BoEnd of range (inclusive) for OS-specific values00CjEnd of range (inclusive) for operating system-specific \xe2\x80\xa6CeBeginning of range (inclusive) for OS-specific values00C`Beginning of range (inclusive) for operating \xe2\x80\xa6AoRound toward positive infinity.CeFloating-point rounding mode, as defined by IEEE 754.BoAdditional attributes for object file sections.AfDynamic shared libraryFb<code>TR</code>: Contains a <code>Selector</code> referencing a <code>SegmentDescriptor</code> \xe2\x80\xa6CcTrapped access to a vector register or instruction.CgBits that are left for CPU architecture-specific flags.CfBits that are left for CPU architecture-defined flags.AlAddress of register 0 on busBn<code>EBP</code> value saved by the processor.Dj<code>L</code>: If this is a code segment, indicates that it should be \xe2\x80\xa6Bm<code>CS</code> value saved by the processor.CeMain code segment that covers all memory, used by CS.Bm<code>DS</code> value saved by the processor.ClMain data that covers all memory, used by everything but \xe2\x80\xa6Dc<code>D</code>: Mask debugging-related exceptions (breakpoints, \xe2\x80\xa6C`Get the handle\xe2\x80\x99s current position in the file.CmGet the implementation of a protocol offered by the given \xe2\x80\xa6CjGet a specific 32-bit register in PCI configuration space.Dk<code>CR4.PGE</code>: Enable global pages, which are shared across task \xe2\x80\xa6Dg<code>PGE</code>: Supports global pages, which are available in all \xe2\x80\xa6CjIndicates the section is listed by a section with type \xe2\x80\xa6Db<code>IL</code>: When set, indicates that the instruction that \xe2\x80\xa6CgControls whether the device may respond to accesses \xe2\x80\xa6CnDummy descriptor for segment index 0. The processor always \xe2\x80\xa6Di<code>APIC</code>: The processor has a built-in advanced programmable \xe2\x80\xa6hGrammar:CjIndicates whether the host can safely cache the memory \xe2\x80\xa6CnIndicates the contents/meaning of the section described by \xe2\x80\xa60CnIndicates the contents/meaning of the segment described by \xe2\x80\xa600Di<code>A</code>: Set by the processor when an instruction accesses the \xe2\x80\xa6ClIndicates this section should be loaded into memory when \xe2\x80\xa6Eo<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.9C`Set the handle\xe2\x80\x99s current position in the file.CjSet a specific 32-bit register in PCI configuration space.BgVendor-defined revision of the hardwareCnUpdate the selector pointing to the segment to be accessed \xe2\x80\xa6ClIndicates the purpose of the function more specifically, \xe2\x80\xa6Eg<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.Cf<code>R/W</code>: Allows writes to this memory region.Bn<code>ESI</code> value saved by the processor.ChVirtual base address where the segment should be loaded.CjVirtual address where this section should be loaded in \xe2\x80\xa6110Di<code>x2APIC</code>: Supports the enhanced \xe2\x80\x9cx2\xe2\x80\x9d interface for the \xe2\x80\xa6Dj<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the \xe2\x80\xa6Df<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper \xe2\x80\xa6CjIndicates whether the function has a self-test capability.AlControl bits set by the hostCmCan be cleared to disable the APIC. However, it cannot be \xe2\x80\xa6CfIndicates the segment contains code that should be \xe2\x80\xa6CgIndicates this section contains code that should be \xe2\x80\xa6CkIndicates whether this is a code (true) or data (false) \xe2\x80\xa6Dd<code>PS</code>: Indicates that this entry directly maps a page. \xe2\x80\xa6Eh<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.Cf<code>P</code>: Indicates that the segment is defined.Df<code>P</code>: Indicates that this entry is mapped. Otherwise the \xe2\x80\xa6Cb<code>SSE4_1</code>: Supports SSE4.1 instructions.Cb<code>SSE4_2</code>: Supports SSE4.2 instructions.CfIndicates the section contains null-terminate strings.El<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.AcEnable the APIC\xe2\x80\x99sCdTrait \xe2\x80\x9calias\xe2\x80\x9d for error type used by AML parsersD`Primary feature list returned in <code>CPUID.01H:ECX+EDX</code>.ChA <code>GateDescriptor</code> for a call to 16-bit code.DlIndicates that <strong>following</strong> fields should be accessed with \xe2\x80\xa6CjAn external interrupt through the higher-priority fast \xe2\x80\xa6D`A <code>GateDescriptor</code> for a 32/64-bit interrupt handler.Cn<code>#UD</code>: Unrecognized or reserved instruction opcode.CfEnd of range (inclusive) for OEM-specific memory typesCjBeginning of range (inclusive) for OEM-specific memory \xe2\x80\xa6AoRound toward negative infinity.AbHP Non-Stop KernelAoDeclare a power resource objectBgMemory used by processor firmware code.BgMemory-mapped registers for PL011 UART.AlHeader that controls linkingBgSoftware step at lower exception level.CfAn event that signals the start/end of a node or a \xe2\x80\xa6DgA <code>SegmentDescriptor</code> for a 32/64-bit task state segment \xe2\x80\xa6ChA <code>GateDescriptor</code> for a 16-bit trap handler.ChIndicates whether this BAR points to memory or I/O spaceCcSize of address bus supported by this PCI function.ClIf this is a code descriptor, indicates that the segment \xe2\x80\xa6CmIf this is a data descriptor, indicates that this segment \xe2\x80\xa6CiIterate over the devices and functions present on the \xe2\x80\xa6CnUse 1.5 or 2 stop bits (depending on baud rate) if set. If \xe2\x80\xa6Di<code>FZ</code>: When a result would be denormal, yield zero instead. \xe2\x80\xa6Dk<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used \xe2\x80\xa6ChGet the argument count of the named method, if it is \xe2\x80\xa6CmIndicates which of the four interrupt pins on the PCI bus \xe2\x80\xa6CbThe <code>IOPermissionBitmap</code> for this task.Df<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or \xe2\x80\xa6CnThe value of the bus master\xe2\x80\x99s latency timer in PCI clock \xe2\x80\xa6CmPhysical base address where the segment should be loaded. \xe2\x80\xa600CkSegment selector saved by the processor referencing the \xe2\x80\xa6CjCalculate the size in bytes of a map that has bits for \xe2\x80\xa6Cf<code>RMode</code>: The IEEE 754 rounding mode in use.ClSegment group as defined by PCI Express. Always zero for \xe2\x80\xa6Dh<code>PSN</code>: Supports retrieving a processor serial number with \xe2\x80\xa6Df<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in \xe2\x80\xa6Dk<code>DF</code>: String instructions work on addresses high-to-low when \xe2\x80\xa6CjIndicates a standard programming interface that can be \xe2\x80\xa6BiUpdate the device\xe2\x80\x99s line protocol mode.CkIndicates the desired length of bursts in units of 0.25 \xe2\x80\xa6CiControl and status flags for a function\xe2\x80\x99s self test \xe2\x80\xa6CeID of the device as defined by the card manufacturer.CnControls whether the device may respond to \xe2\x80\x9cspecial cycle\xe2\x80\xa6Dc<code>SP</code> value saved by the processor for privilege level 3.Dc<code>SS</code> value saved by the processor for privilege level 3.CjParse struct fields in order using an initializer-like \xe2\x80\xa6CkSupport for Universal Asynchronous Receiver/Transmitter \xe2\x80\xa6CeIndicates the section contains a template for the \xe2\x80\xa6CnChecks that the header represents a valid ELF file, of any \xe2\x80\xa6CnChecks that the header represents a valid ELF file for the \xe2\x80\xa6ChChecks that the header represents an ELF file in the \xe2\x80\xa6Di<code>A</code>: Set by the processor when an instruction accesses the \xe2\x80\xa6ClIndicates this section should be loaded into memory when \xe2\x80\xa6Eo<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.CgControls whether the device may respond to accesses \xe2\x80\xa6BgVendor-defined revision of the hardwareClIndicates the purpose of the function more specifically, \xe2\x80\xa6Eg<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.Cf<code>R/W</code>: Allows writes to this memory region.Di<code>CR0.WP</code>: Enforce read-only pages even in privilege levels \xe2\x80\xa6Dg<code>PWT</code>: Enables write-through caching for this memory region.Di<code>CR3.PWT</code>: Enables write-through caching for the top-level \xe2\x80\xa6BfAlias for type returned by AML parsersDi<code>#AC</code>: Improperly aligned memory access in user mode while \xe2\x80\xa6CdLogical PCI address for a function of a specific \xe2\x80\xa6BjDeclare a single-bit field within a bufferDf<code>#DB</code>: Breakpoints or other debugging-related traps/faults.Dj<code>EL</code>: Defines the privilege level of executing code. Higher \xe2\x80\xa6CmBasic properties of a file or directory as defined by the \xe2\x80\xa6ChGet the index of the most-significant set bit in a valueBaTrapped floating point exception.ClAn entry in a segment descriptor table that points to an \xe2\x80\xa6CmExtended address structure defined in ACPI 2.0 to support \xe2\x80\xa6CiPlaceholder value that will always be returned in the \xe2\x80\xa6CdI/O based configuration access method on x86/x86-64.CjEnd of range (inclusive) for CPU architecture-specific \xe2\x80\xa6BjBeginning of range (inclusive) for CPU \xe2\x80\xa611C`End of range (inclusive) for user-defined values1111CfBeginning of range (inclusive) for user-defined valuesDkA name or reference that constitutes part of a <code>Package</code> (or \xe2\x80\xa6CjSection containing data that is only meaningful to the \xe2\x80\xa6CjStrategy that provides access to registers for a 16550 \xe2\x80\xa6Dc<code>FPSR</code>: Indicates non-trapped floating-point exceptions.BeStatus bits indicated by the functionCmTriggered a system call via the <code>SVC</code> instruction.CiAllocate a number of pages of a given type of memory, \xe2\x80\xa6Eb<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.CoSupports byte swapping with the <code>MOVBE</code> instruction.C`<code>CR0.CD</code>: Disable all memory caching.Cj<code>PCD</code>: Disables caching for this memory region.Dd<code>CR3.PCD</code>: Disables caching for the top-level page table.CbConvert a Rust string to a buffer containing a \xe2\x80\xa6CjGet a map representing the status of all available memory.AjVersion of the ELF header.Eb<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.CnIndicates which system interrupt number the function uses, \xe2\x80\xa6Da<code>S</code>: Indicates that this is an application section \xe2\x80\xa6CgIf true, then this device responds to at least some \xe2\x80\xa6DdBackwards-incompatible version number of the <code>os_abi</code> \xe2\x80\xa6CmEnable protected mode. Does not enable paging on its own. \xe2\x80\xa6CfThe protection key that applies to this memory region.BhMemory-mapped registers for this device.CkList all possible absolute pathnames that this name may \xe2\x80\xa6CnControls whether the device may act as a master of the PCI \xe2\x80\xa6Dj<code>ISS</code>: Additional data about the exception in a format that \xe2\x80\xa6DjSupports counting the set bits in a value with the <code>POPCNT</code> \xe2\x80\xa6CgIndicates any non-trapped exceptions that have been \xe2\x80\xa6BhIndicates that this section and the [\xe2\x80\xa6Dn<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.Dg<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.Dm<code>XD</code>/<code>NX</code>: Prevent the processor from executing any \xe2\x80\xa6Dg<code>AVL</code>: Ignored bit that can be used by the operating system.BiBits that are left for OS-specific flags.BhBits that are left for OS-defined flags.CmThe processor can snoop on its own cache line. This helps \xe2\x80\xa6ClIterate over elements in the device tree. Note that this \xe2\x80\xa6AiUtilities for nom parsersDf<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in \xe2\x80\xa6Dk<code>DF</code>: String instructions work on addresses high-to-low when \xe2\x80\xa6CjIndicates a standard programming interface that can be \xe2\x80\xa6CkIndicates the desired length of bursts in units of 0.25 \xe2\x80\xa6CiControl and status flags for a function\xe2\x80\x99s self test \xe2\x80\xa6CeID of the device as defined by the card manufacturer.DgWrite formatted data to an <code>OutputStream</code> and return the \xe2\x80\xa6CeMemory that must be preserved in ACPI states S1\xe2\x80\x93S3.CgInformation to identify and locate capability registersAlControl bits set by the hostDc<code>FPCR</code>: Influences floating-point instruction execution.BlCreate a one-byte-wide field within a bufferBmDeclare a two-byte-wide field within a bufferCjThe default APIC base address when the processor is reset.CkAllow an ACPI table indexed in the XSDT to be used as a \xe2\x80\xa6EdSettings common to <code>SegmentDescriptor</code>s and <code>GateDescriptor</code>s.CiGet the index of the least-significant set bit in a valueCkThe first register of the standard configuration header \xe2\x80\xa6ClThe second register of the standard configuration header \xe2\x80\xa6CkThe third register of the standard configuration header \xe2\x80\xa6ClThe fourth register of the standard configuration header \xe2\x80\xa6AnAn interrupt/exception number.CeException from lower level (e.g., EL0) in 32-bit modeCkExpected argument count for a method in the ACPI namespace.CcDeclare an address space that can be used by fieldsCmSection containing the addresses of constructor functions \xe2\x80\xa6CeStack pointer and segment for a given privilege levelCjHeader that controls loading of a single segment of an \xe2\x80\xa60Da<code>#GP</code>: Memory protection or other miscellaneous error.BcFixed offset for this register typeClFile will be read and written, and will be created if it \xe2\x80\xa6EoStandard segment registers (<code>CS</code>, <code>DS</code>, <code>SS</code>, etc.), which \xe2\x80\xa6CiTerminal operation that does not evaluate to a value, \xe2\x80\xa6BiSoftware step at current exception level.BiEncode a value as an ASCII decimal numberDg<code>PAT</code>: Used to associate this page with a page attribute \xe2\x80\xa6CdFrequency, in hertz, of the clock input to the UART.CjInforms the device of the size of the system\xe2\x80\x99s cache \xe2\x80\xa6CmIf this is a code descriptor, indicates that this segment \xe2\x80\xa6CjIf a self-test is complete, then any non-zero value in \xe2\x80\xa6CfCreate a segment selector that points to the given \xe2\x80\xa6CnStack pointers available for use when handling interrupts. \xe2\x80\xa6CkGet the value in this bitmap that indicates whether the \xe2\x80\xa6Dh<code>MSR</code>: Has model-specific registers which can be accessed \xe2\x80\xa6Db<code>DPL</code>: The privilege level associated with the segment.Dh<code>RPL</code>: The privilege level \xe2\x80\x9crequested\xe2\x80\x9d when accessing \xe2\x80\xa6CkConvert to an absolute namespace path in the context of \xe2\x80\xa6CgCreate an iterator that repeatedly executes the parser.Cn<code>DS</code>: Supports writing debug information to memory.De<code>DN</code>: Always use the default encoding for NaN results. \xe2\x80\xa6Dh<code>G</code>: Indicates that the segment limit is in units of 4KB. \xe2\x80\xa6ClIndicates which of the standard PCI configuration header \xe2\x80\xa6CnIndicates the longest period the device can wait to access \xe2\x80\xa6Eh<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> \xe2\x80\xa6Di<code>NT</code>: Indicates that the processor should switch back to a \xe2\x80\xa6CjByte offset within capability space of next capability \xe2\x80\xa6Df<code>FPU</code>: The processor has a built-in x87 floating-point unitCeIf this is a system descriptor, indicates which type.Dd<code>OF</code>: Indicates that the result overflowed for signed \xe2\x80\xa6Dd<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point \xe2\x80\xa6Cm<code>TM</code>: Has thermal monitor control circuitry (TCC).CnControls whether the device may act as a master of the PCI \xe2\x80\xa6Dj<code>ISS</code>: Additional data about the exception in a format that \xe2\x80\xa6DjSupports counting the set bits in a value with the <code>POPCNT</code> \xe2\x80\xa6CgIndicates any non-trapped exceptions that have been \xe2\x80\xa6BhIndicates that this section and the [\xe2\x80\xa6Dn<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.Dg<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.Dm<code>XD</code>/<code>NX</code>: Prevent the processor from executing any \xe2\x80\xa6Dg<code>AVL</code>: Ignored bit that can be used by the operating system.BiBits that are left for OS-specific flags.BhBits that are left for OS-defined flags.CmThe processor can snoop on its own cache line. This helps \xe2\x80\xa6Df<code>IA32_APIC_BASE</code>: A model-specific register that allows \xe2\x80\xa6CoMemory used for drivers that provide <code>BootServices</code>.DcMemory allocated by drivers that provide <code>BootServices</code>.Db<code>CR0</code>: System control register with flags affecting \xe2\x80\xa6Dc<code>CR2</code>: Contains the address that triggered a page fault.Di<code>CR3</code>: System control register that contains the top-level \xe2\x80\xa6Ce<code>CR4</code>: Miscellaneous system control flags.Dh<code>CR8</code>: System control register for controlling interrupts \xe2\x80\xa6BnDeclare a four-byte-wide field within a bufferC`Declare an eight-byte-wide field within a bufferCjTerminal operation that evaluates to a value or reference.CiFeatures applicable to 64-bit processors, returned in \xe2\x80\xa6BcFixed ACPI Description Table (FADT)CjProtocol for accessing a file system supported by UEFI \xe2\x80\xa6Db<code>ESR_ELx</code>: Holds information about the cause of the \xe2\x80\xa6CkNewtype wrapper that allows a UART implementation to be \xe2\x80\xa6Fd<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>\xe2\x80\x93<code>ZMM31</code> with \xe2\x80\xa6Ed<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> \xe2\x80\xa6CjNumber of stack parameters to copy if the code segment \xe2\x80\xa6Gb<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU \xe2\x80\xa6ClIf this is a data descriptor, indicates that the segment \xe2\x80\xa6CnIndicates whether the device wants to signal an interrupt, \xe2\x80\xa6Dg<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.De<code>CR0.NE</code>: Use internal error mechanism for FPU errors, \xe2\x80\xa6CfIndicates that the section must be processed in an \xe2\x80\xa6ClStack pointers to use when switching to privilege levels \xe2\x80\xa6CeStack pointer and segment for privilege levels 0\xe2\x80\x932.CgBits that are left for CPU architecture-specific flags.CfBits that are left for CPU architecture-defined flags.Dj<code>L</code>: If this is a code segment, indicates that it should be \xe2\x80\xa6Dc<code>D</code>: Mask debugging-related exceptions (breakpoints, \xe2\x80\xa6Dk<code>CR4.PGE</code>: Enable global pages, which are shared across task \xe2\x80\xa6Dg<code>PGE</code>: Supports global pages, which are available in all \xe2\x80\xa6CjIndicates the section is listed by a section with type \xe2\x80\xa6Db<code>IL</code>: When set, indicates that the instruction that \xe2\x80\xa6CgControls whether the device may respond to accesses \xe2\x80\xa6Di<code>APIC</code>: The processor has a built-in advanced programmable \xe2\x80\xa6CkSet the value in this bitmap that indicates whether the \xe2\x80\xa6AcEnable the APIC\xe2\x80\x99sEh<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE \xe2\x80\xa6ClID of the card manufacturer, which may be different than \xe2\x80\xa6Cn<code>DS</code>: Supports writing debug information to memory.De<code>DN</code>: Always use the default encoding for NaN results. \xe2\x80\xa6Dh<code>G</code>: Indicates that the segment limit is in units of 4KB. \xe2\x80\xa6ClIndicates which of the standard PCI configuration header \xe2\x80\xa6CnIndicates the longest period the device can wait to access \xe2\x80\xa6Eh<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code> \xe2\x80\xa6Di<code>NT</code>: Indicates that the processor should switch back to a \xe2\x80\xa6CjByte offset within capability space of next capability \xe2\x80\xa6Df<code>FPU</code>: The processor has a built-in x87 floating-point unitCeIf this is a system descriptor, indicates which type.CnIndicates the processor\xe2\x80\x99s maximum supported physical and \xe2\x80\xa6BfSingle value resolved at compile time.DiCommon table header defined as <code>DESCRIPTION_HEADER</code> in the \xe2\x80\xa6ChSection containing the symbol table for dynamic linking.CiA parser error with position info useful for printing \xe2\x80\xa6DjTrait alias combining the nom error traits <code>ParseError</code> and \xe2\x80\xa6ChGeneric entry in a global/local/interrupt descriptor \xe2\x80\xa6AkMemory mapped to I/O ports.CmIndicates an area of memory that the kernel does not have \xe2\x80\xa6BjTerm that attaches a name to its argument.ClSection containing relocation data where the addends are \xe2\x80\xa6CmAn entry in a segment descriptor table that defines a new \xe2\x80\xa6Dj<code>#NP</code>: Tried to use a segment without a descriptor defined. \xe2\x80\xa6CcTrapped access to a system register or instruction.Dc<code>DTES64</code>: Supports 64-bit addresses for the debug store.Bn<code>EDI</code> value saved by the processor.Dk<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in \xe2\x80\xa6Bm<code>ES</code> value saved by the processor.Bm<code>FS</code> value saved by the processor.Bm<code>GS</code> value saved by the processor.Da<code>IF</code>: Enable non-maskable interrupts. Non-maskable \xe2\x80\xa6Bn<code>I</code>: Mask regular (IRQ) interrupts.CnIterate over all capabilities defined in the configuration \xe2\x80\xa6C`<code>IA32_EFER.LME</code>: Support 64-bit mode.Dg<code>HTT</code>: Indicates that the number of reserved APIC IDs is \xe2\x80\xa6CkCalculate the last I/O port that is covered by a map of \xe2\x80\xa6ChOffset within the names section to the start of this \xe2\x80\xa60ClIf this is a code descriptor, indicates that the segment \xe2\x80\xa6CmIf this is a data descriptor, indicates that this segment \xe2\x80\xa6Di<code>FZ</code>: When a result would be denormal, yield zero instead. \xe2\x80\xa6Dk<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used \xe2\x80\xa6CmIndicates which of the four interrupt pins on the PCI bus \xe2\x80\xa6Df<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or \xe2\x80\xa6CnThe value of the bus master\xe2\x80\x99s latency timer in PCI clock \xe2\x80\xa6Cf<code>RMode</code>: The IEEE 754 rounding mode in use.Dh<code>PSN</code>: Supports retrieving a processor serial number with \xe2\x80\xa6CnControls whether the device may respond to \xe2\x80\x9cspecial cycle\xe2\x80\xa6CeIndicates the section contains a template for the \xe2\x80\xa6CnUpdate the global descriptor table pointer and all segment \xe2\x80\xa6Di<code>CR0.WP</code>: Enforce read-only pages even in privilege levels \xe2\x80\xa6Dg<code>PWT</code>: Enables write-through caching for this memory region.Di<code>CR3.PWT</code>: Enables write-through caching for the top-level \xe2\x80\xa6BiSupport for the Devicetree specification.BkSupports the TM2 thermal monitor interface.CnControls whether a VGA or graphics card device may \xe2\x80\x9csnoop\xe2\x80\xa6Bj<code>VM</code>: Enable virtual real mode.CgBits that are left for CPU architecture-specific flags.CfBits that are left for CPU architecture-defined flags.Dj<code>L</code>: If this is a code segment, indicates that it should be \xe2\x80\xa6Dc<code>D</code>: Mask debugging-related exceptions (breakpoints, \xe2\x80\xa6Dk<code>CR4.PGE</code>: Enable global pages, which are shared across task \xe2\x80\xa6Dg<code>PGE</code>: Supports global pages, which are available in all \xe2\x80\xa6CjIndicates the section is listed by a section with type \xe2\x80\xa6Db<code>IL</code>: When set, indicates that the instruction that \xe2\x80\xa6CgControls whether the device may respond to accesses \xe2\x80\xa6Di<code>APIC</code>: The processor has a built-in advanced programmable \xe2\x80\xa6AcEnable the APIC\xe2\x80\x99sCgException from current level using SP_EL0 (thread mode)BnData abort triggered at lower exception level.Dj<code>#NM</code>: Tried to execute FPU instruction with no coprocessor \xe2\x80\xa6Ec<code>#MF</code>: Unmasked floating-point error that was <em>not</em> part of a \xe2\x80\xa6CmBitmap that controls which I/O port addresses are covered \xe2\x80\xa6CmA <code>GateDescriptor</code> for a 16-bit interrupt handler.De<code>#TS</code>: An error was found in the TSS while task switching.BoAccess to memory-mapped PCI configuration spaceCgImproperly authenticated pointer detected. Requires \xe2\x80\xa6CnSegment that contains the program header itself, including \xe2\x80\xa6CjDefines the contents and meaning of individual program \xe2\x80\xa6CfControls which stack pointer register is used when \xe2\x80\xa6DgA <code>SegmentDescriptor</code> for a 32/64-bit task state segment \xe2\x80\xa6DjA <code>SegmentDescriptor</code> for a 16-bit task state segment (TSS) \xe2\x80\xa6CiSegment that contains a template for the thread-local \xe2\x80\xa6CfPage table pointer from <code>ControlRegister3</code>.CoGet a pointer to the <code>SegmentDescriptor</code> for the \xe2\x80\xa6CnCalculate the address of the descriptor referenced by this \xe2\x80\xa6Cj<code>EIST</code>: Supports enhanced SpeedStep throttling.CkOffset of the entry point in code segment referenced by \xe2\x80\xa6DhSafe(r) wrapper around <code>BootServices::exit_boot_services</code> \xe2\x80\xa6BnSignal to UEFI that the OS is now taking over.DjIndicates that the <code>extra_info</code> field of the section header \xe2\x80\xa6Dj<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if \xe2\x80\xa6Co<code>FMA</code>: Supports fused multiply-add SSE instructions.ClGet a register in PCI configuration space with an offset \xe2\x80\xa6ClControls whether the device is prohibited from asserting \xe2\x80\xa6CiIndicates which handler to use for software-triggered \xe2\x80\xa6Dh<code>IOPL</code>: Sets the privilege threshold for a task to access \xe2\x80\xa6Da<code>CR4.PCIDE</code>: The process-context identifier (PCID) \xe2\x80\xa6Eb<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.CoSupports byte swapping with the <code>MOVBE</code> instruction.C`<code>CR0.CD</code>: Disable all memory caching.Cj<code>PCD</code>: Disables caching for this memory region.Dd<code>CR3.PCD</code>: Disables caching for the top-level page table.ClSet a register in PCI configuration space with an offset \xe2\x80\xa6Eb<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.CnIndicates which system interrupt number the function uses, \xe2\x80\xa6Da<code>S</code>: Indicates that this is an application section \xe2\x80\xa6CgIf true, then this device responds to at least some \xe2\x80\xa6CmEnable protected mode. Does not enable paging on its own. \xe2\x80\xa6CfThe protection key that applies to this memory region.Dd<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.CbSole task state segment required by task register.Dg<code>TSC</code>: Supports reading the processor\xe2\x80\x99s timestamp with \xe2\x80\xa6Dg<code>CR4.TSD</code>: Disable access to processor timestamp counter \xe2\x80\xa6CnFor each type of floating-point exception, defines whether \xe2\x80\xa6ClIf this is a code descriptor, indicates that the segment \xe2\x80\xa6CmIf this is a data descriptor, indicates that this segment \xe2\x80\xa6Di<code>FZ</code>: When a result would be denormal, yield zero instead. \xe2\x80\xa6Dk<code>CR0.EM</code>: Trigger an exception on all FPU instructions. Used \xe2\x80\xa6CmIndicates which of the four interrupt pins on the PCI bus \xe2\x80\xa6Df<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or \xe2\x80\xa6CnThe value of the bus master\xe2\x80\x99s latency timer in PCI clock \xe2\x80\xa6Cf<code>RMode</code>: The IEEE 754 rounding mode in use.Dh<code>PSN</code>: Supports retrieving a processor serial number with \xe2\x80\xa6CnControls whether the device may respond to \xe2\x80\x9cspecial cycle\xe2\x80\xa6CeIndicates the section contains a template for the \xe2\x80\xa6Di<code>CR0.WP</code>: Enforce read-only pages even in privilege levels \xe2\x80\xa6Dg<code>PWT</code>: Enables write-through caching for this memory region.Di<code>CR3.PWT</code>: Enables write-through caching for the top-level \xe2\x80\xa6CfA pointer to a memory or I/O space that is used to \xe2\x80\xa6BnBreakpoint triggered at lower exception level.CgException from current level using current-level SP \xe2\x80\xa6CkA register type that is always located at a specific offsetBjSettings for <code>GateDescriptor</code>s.CcProgram header variant native to the current targetCdPermissions and other OS/arch-specific flags for \xe2\x80\xa6ClSection containing relocation data with addends given in \xe2\x80\xa6DbMemory used for drivers that provide <code>RuntimeServices</code>.DfMemory allocated by drivers that provide <code>RuntimeServices</code>.DeVariant of the <code>SectionHeader</code> structure native to the \xe2\x80\xa6BnWatchpoint triggered at lower exception level.Do<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. \xe2\x80\xa6ClIndicates that this core was designated as the bootstrap \xe2\x80\xa6ClOffset within this function\xe2\x80\x99s configuration space that \xe2\x80\xa6Dj<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring \xe2\x80\xa6Df<code>XSAVE</code>: Supports instructions for saving and restoring \xe2\x80\xa6Df<code>F16C</code>: Supports conversion instructions for 16-bit floats.CkInitialize the segmentation system to use a flat memory \xe2\x80\xa6Bn<code>EIP</code> value saved by the processor.CmIndicates whether a partity error was detected while this \xe2\x80\xa6Dg<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.Dk<code>CR4.PCE</code>: Allow access to performance monitoring counter in \xe2\x80\xa6Dh<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in \xe2\x80\xa6C`<code>PCID</code>: Supports process-context IDs.CkSize in bytes of of each program segment header. May be \xe2\x80\xa60ClSize in bytes of each section header. May be longer than \xe2\x80\xa60CjIndex of the section header which contains the list of \xe2\x80\xa60Dg<code>PAT</code>: Used to associate this page with a page attribute \xe2\x80\xa6CjInforms the device of the size of the system\xe2\x80\x99s cache \xe2\x80\xa6CmIf this is a code descriptor, indicates that this segment \xe2\x80\xa6CjIf a self-test is complete, then any non-zero value in \xe2\x80\xa6Dh<code>MSR</code>: Has model-specific registers which can be accessed \xe2\x80\xa6Db<code>DPL</code>: The privilege level associated with the segment.Dh<code>RPL</code>: The privilege level \xe2\x80\x9crequested\xe2\x80\x9d when accessing \xe2\x80\xa6Dd<code>OF</code>: Indicates that the result overflowed for signed \xe2\x80\xa6Dd<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point \xe2\x80\xa6Cm<code>TM</code>: Has thermal monitor control circuitry (TCC).Cf<code>A</code>: Mask system error (SError) exceptions.Di<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. \xe2\x80\xa6Eb<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.CoSupports byte swapping with the <code>MOVBE</code> instruction.C`<code>CR0.CD</code>: Disable all memory caching.Cj<code>PCD</code>: Disables caching for this memory region.Dd<code>CR3.PCD</code>: Disables caching for the top-level page table.Eb<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.CnIndicates which system interrupt number the function uses, \xe2\x80\xa6Da<code>S</code>: Indicates that this is an application section \xe2\x80\xa6CgIf true, then this device responds to at least some \xe2\x80\xa6CmEnable protected mode. Does not enable paging on its own. \xe2\x80\xa6CfThe protection key that applies to this memory region.ChStrategy that reads and writes registers from I/O space.C`Data abort triggered at current exception level.CjAn page table entry (any level) that directly maps a page.CnA page table entry (any level) that either directly maps a \xe2\x80\xa6CjBottom-level page table entry that maps a single 4KB page.CnSecond-level page table (page directory) entry that either \xe2\x80\xa6DhA <code>SegmentDescriptor</code> for a segment that contains a local \xe2\x80\xa6AkMIPS RS3000 (little-endian)CjDiscriminate types of segment descriptors that are not \xe2\x80\xa6Dk<code>CR0.AM</code>: Enables strict alignment checks for memory access, \xe2\x80\xa6CkThe processor sets this bit whenever a segment register \xe2\x80\xa6Ef<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and \xe2\x80\xa6Dd<code>DE</code>: Supports breaking on I/O and on accessing debug \xe2\x80\xa6DhIndicates how quickly the device can assert the <code>DEVSEL#</code> \xe2\x80\xa6CfIndicates whether the device can run at 66 MHz (true).Ca<code>PAT</code>: Supports page attribute tables.Dk<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode \xe2\x80\xa6Dj<code>PBE</code>: Supports a pin notifying a stopped processor that an \xe2\x80\xa6BbNumber of program segment headers.0AjNumber of section headers.0Fd<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>\xe2\x80\x93<code>ZMM31</code> with \xe2\x80\xa6Ed<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> \xe2\x80\xa6CjNumber of stack parameters to copy if the code segment \xe2\x80\xa6Gb<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU \xe2\x80\xa6ClIf this is a data descriptor, indicates that the segment \xe2\x80\xa6CnIndicates whether the device wants to signal an interrupt, \xe2\x80\xa6Dg<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.De<code>CR0.NE</code>: Use internal error mechanism for FPU errors, \xe2\x80\xa6CfIndicates that the section must be processed in an \xe2\x80\xa6Eh<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE \xe2\x80\xa6ClID of the card manufacturer, which may be different than \xe2\x80\xa6AlPointer to the shadow stack.CmControls whether the device may signal critical errors in \xe2\x80\xa6Dd<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to \xe2\x80\xa6Dg<code>PAT</code>: Used to associate this page with a page attribute \xe2\x80\xa6CjInforms the device of the size of the system\xe2\x80\x99s cache \xe2\x80\xa6CmIf this is a code descriptor, indicates that this segment \xe2\x80\xa6CjIf a self-test is complete, then any non-zero value in \xe2\x80\xa6Dh<code>MSR</code>: Has model-specific registers which can be accessed \xe2\x80\xa6Db<code>DPL</code>: The privilege level associated with the segment.Dh<code>RPL</code>: The privilege level \xe2\x80\x9crequested\xe2\x80\x9d when accessing \xe2\x80\xa6Dd<code>OF</code>: Indicates that the result overflowed for signed \xe2\x80\xa6Dd<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point \xe2\x80\xa6Cm<code>TM</code>: Has thermal monitor control circuitry (TCC).CjA task state segment (TSS) with fixed redirect and I/O \xe2\x80\xa6C`Breakpoint triggered at current exception level.CcExecuted a <code>BRK</code> breakpoint instruction.BfAn entry in a page table at any level.ChGlobal descriptor table structure specific to Tartan OS.CnHelper trait used to convert a parser error from one input \xe2\x80\xa6CmTwelfth register of the standard configuration header for \xe2\x80\xa6CmFourtheenth register of the standard configuration header \xe2\x80\xa6CkSixteenth register of the standard configuration header \xe2\x80\xa6C`Watchpoint triggered at current exception level.CfIterate over the devices present on the specified bus.DkOne-based index of the <code>interrupt_stack</code> pointer to use when \xe2\x80\xa6ChIndicates whether the transaction was aborted with a \xe2\x80\xa6CkGet the maximum primary index value (EAX) supported for \xe2\x80\xa6CjIndicates taht the device has detected a parity error, \xe2\x80\xa6CkControls whether the device responds normally to parity \xe2\x80\xa6CmFile offset to the array of program section headers which \xe2\x80\xa60Dg<code>XCR0.PKRU</code>: Manage protection key rights registers with \xe2\x80\xa6Ea<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.C`<code>SMX</code>: Supports safer-mode extensionsClFile offset to the array of section header which control \xe2\x80\xa60Dc<code>DTES64</code>: Supports 64-bit addresses for the debug store.Dk<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in \xe2\x80\xa6Da<code>IF</code>: Enable non-maskable interrupts. Non-maskable \xe2\x80\xa6Bn<code>I</code>: Mask regular (IRQ) interrupts.C`<code>IA32_EFER.LME</code>: Support 64-bit mode.Dg<code>HTT</code>: Indicates that the number of reserved APIC IDs is \xe2\x80\xa6BkSupports the TM2 thermal monitor interface.CnControls whether a VGA or graphics card device may \xe2\x80\x9csnoop\xe2\x80\xa6Bj<code>VM</code>: Enable virtual real mode.CnIndicates that the device has detected a critical error in \xe2\x80\xa6ChIndicates whether the transaction was aborted with a \xe2\x80\xa6CjIndicates that this function generated an abort on the \xe2\x80\xa6Fd<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>\xe2\x80\x93<code>ZMM31</code> with \xe2\x80\xa6Ed<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> \xe2\x80\xa6CjNumber of stack parameters to copy if the code segment \xe2\x80\xa6Gb<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if FPU \xe2\x80\xa6ClIf this is a data descriptor, indicates that the segment \xe2\x80\xa6CnIndicates whether the device wants to signal an interrupt, \xe2\x80\xa6Dg<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.De<code>CR0.NE</code>: Use internal error mechanism for FPU errors, \xe2\x80\xa6CfIndicates that the section must be processed in an \xe2\x80\xa6Eh<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE \xe2\x80\xa6ClID of the card manufacturer, which may be different than \xe2\x80\xa6BmSettings for <code>GenericDescriptor</code>s.Df<code>#XM</code>: Unmasked floating-point error during SIMD operation.BmSettings for <code>SegmentDescriptor</code>s.CnTable of section indexes that correspond to entries in the \xe2\x80\xa6CjStack and I/O permission map pointers that make up the \xe2\x80\xa6ClSaved task state that makes up the most significant part \xe2\x80\xa6Ea<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.Bk<code>F</code>: Mask fast (FIQ) interrupts.Dj<code>LocalDescriptorTableRegister</code> value to load when executing \xe2\x80\xa6Dh<code>DCA</code>: Supports prefetching memory-mapped data from a device.Cj<code>EIST</code>: Supports enhanced SpeedStep throttling.CnUpdate the offset of the entry point within the referenced \xe2\x80\xa6DjIndicates that the <code>extra_info</code> field of the section header \xe2\x80\xa6Dj<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if \xe2\x80\xa6Co<code>FMA</code>: Supports fused multiply-add SSE instructions.ClControls whether the device is prohibited from asserting \xe2\x80\xa6Dh<code>IOPL</code>: Sets the privilege threshold for a task to access \xe2\x80\xa6Da<code>CR4.PCIDE</code>: The process-context identifier (PCID) \xe2\x80\xa6Dd<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.Dg<code>TSC</code>: Supports reading the processor\xe2\x80\x99s timestamp with \xe2\x80\xa6Dg<code>CR4.TSD</code>: Disable access to processor timestamp counter \xe2\x80\xa6CnFor each type of floating-point exception, defines whether \xe2\x80\xa6Dc<code>DTES64</code>: Supports 64-bit addresses for the debug store.Dk<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging in \xe2\x80\xa6Da<code>IF</code>: Enable non-maskable interrupts. Non-maskable \xe2\x80\xa6Bn<code>I</code>: Mask regular (IRQ) interrupts.C`<code>IA32_EFER.LME</code>: Support 64-bit mode.Dg<code>HTT</code>: Indicates that the number of reserved APIC IDs is \xe2\x80\xa6BkSupports the TM2 thermal monitor interface.CnControls whether a VGA or graphics card device may \xe2\x80\x9csnoop\xe2\x80\xa6Bj<code>VM</code>: Enable virtual real mode.DjA <code>SegmentDescriptor</code> for a 16-bit task state segment (TSS) \xe2\x80\xa6ClI/O permission map and interrupt redirect map, which are \xe2\x80\xa6Cl<code>#VE</code>: Improper use of virtualization extensions.Di<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC \xe2\x80\xa6Cn<code>CR0.NW</code>: Disable write-back/write-through caching.E`<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic \xe2\x80\xa6Eh<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and \xe2\x80\xa6Ce<code>CR4.MCE</code>: Enable machine-check exception.Df<code>MCE</code>: Defines an exception (18) for reporting internal \xe2\x80\xa6CkIterate over memory reservations defined by this devicetreeDi<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with \xe2\x80\xa6Do<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. \xe2\x80\xa6ClIndicates that this core was designated as the bootstrap \xe2\x80\xa6ClOffset within this function\xe2\x80\x99s configuration space that \xe2\x80\xa6Dj<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring \xe2\x80\xa6Df<code>XSAVE</code>: Supports instructions for saving and restoring \xe2\x80\xa6Df<code>F16C</code>: Supports conversion instructions for 16-bit floats.CmIndicates whether a partity error was detected while this \xe2\x80\xa6Dg<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.Dk<code>CR4.PCE</code>: Allow access to performance monitoring counter in \xe2\x80\xa6Dh<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in \xe2\x80\xa6C`<code>PCID</code>: Supports process-context IDs.Cf<code>A</code>: Mask system error (SError) exceptions.Di<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. \xe2\x80\xa6DmParse a <code>SuperName</code>, but do <em>not</em> allow method invocations.De<code>CR4.VME</code>: Enable interrupts and exception handling in \xe2\x80\xa6De<code>VME</code>: Supports virtual real-mode extensions (VME) and \xe2\x80\xa6Cj<code>EIST</code>: Supports enhanced SpeedStep throttling.DjIndicates that the <code>extra_info</code> field of the section header \xe2\x80\xa6Dj<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if \xe2\x80\xa6Co<code>FMA</code>: Supports fused multiply-add SSE instructions.ClControls whether the device is prohibited from asserting \xe2\x80\xa6Dh<code>IOPL</code>: Sets the privilege threshold for a task to access \xe2\x80\xa6Da<code>CR4.PCIDE</code>: The process-context identifier (PCID) \xe2\x80\xa6Dd<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.Dg<code>TSC</code>: Supports reading the processor\xe2\x80\x99s timestamp with \xe2\x80\xa6Dg<code>CR4.TSD</code>: Disable access to processor timestamp counter \xe2\x80\xa6CnFor each type of floating-point exception, defines whether \xe2\x80\xa6Dh<code>XCR0</code>: System control flags that indicate OS support for \xe2\x80\xa6CgRoot System Description Pointer (RSDP) used in ACPI 1.0BaExtended RDSP defined by ACPI 2.0DiDepending on the <code>section_type</code>, this may identify another \xe2\x80\xa60CmSupports carry-less multiplication of two 64-bit integers \xe2\x80\xa6Eg<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement \xe2\x80\xa6CkOffset from the start of this structure to start of the \xe2\x80\xa60CkGet the maximum primary index value (EAX) supported for \xe2\x80\xa6Dk<code>CR0.AM</code>: Enables strict alignment checks for memory access, \xe2\x80\xa6CkThe processor sets this bit whenever a segment register \xe2\x80\xa6Ef<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and \xe2\x80\xa6Dd<code>DE</code>: Supports breaking on I/O and on accessing debug \xe2\x80\xa6DhIndicates how quickly the device can assert the <code>DEVSEL#</code> \xe2\x80\xa6CfIndicates whether the device can run at 66 MHz (true).Ca<code>PAT</code>: Supports page attribute tables.Dk<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode \xe2\x80\xa6Dj<code>PBE</code>: Supports a pin notifying a stopped processor that an \xe2\x80\xa6CmControls whether the device may signal critical errors in \xe2\x80\xa6Dd<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to \xe2\x80\xa6Dg<code>ACPI</code>: Supports thermal monitoring and power management \xe2\x80\xa6Do<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. \xe2\x80\xa6ClIndicates that this core was designated as the bootstrap \xe2\x80\xa6ClOffset within this function\xe2\x80\x99s configuration space that \xe2\x80\xa6Dj<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring \xe2\x80\xa6Df<code>XSAVE</code>: Supports instructions for saving and restoring \xe2\x80\xa6Df<code>F16C</code>: Supports conversion instructions for 16-bit floats.CmIndicates whether a partity error was detected while this \xe2\x80\xa6Dg<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.Dk<code>CR4.PCE</code>: Allow access to performance monitoring counter in \xe2\x80\xa6Dh<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in \xe2\x80\xa6C`<code>PCID</code>: Supports process-context IDs.Cf<code>A</code>: Mask system error (SError) exceptions.Di<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. \xe2\x80\xa6BlStructure shared by all capability registersCeInstruction abort triggered at lower exception level.CaTerminal operation that evaluates to a reference.DkContains the address of the <code>VectorTable</code> that the processor \xe2\x80\xa6Eh<code>VBAR_ELx</code>: Contains the address of the <code>VectorTable</code> that the \xe2\x80\xa6CcIndicates whether the device supports receiving \xe2\x80\xa6CiControls whether the device may use fast back-to-back \xe2\x80\xa6Dj<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to \xe2\x80\xa6DkOne-based index of the <code>interrupt_stack</code> pointer to use when \xe2\x80\xa6ChIndicates whether the transaction was aborted with a \xe2\x80\xa6CjIndicates taht the device has detected a parity error, \xe2\x80\xa6CkControls whether the device responds normally to parity \xe2\x80\xa6Dg<code>XCR0.PKRU</code>: Manage protection key rights registers with \xe2\x80\xa6Ea<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.C`<code>SMX</code>: Supports safer-mode extensionsCnIndicates that the device has detected a critical error in \xe2\x80\xa66CjIndicates that this function generated an abort on the \xe2\x80\xa6Ee<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, \xe2\x80\xa6Dc<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.Dk<code>CR0.AM</code>: Enables strict alignment checks for memory access, \xe2\x80\xa6CkThe processor sets this bit whenever a segment register \xe2\x80\xa6Ef<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and \xe2\x80\xa6Dd<code>DE</code>: Supports breaking on I/O and on accessing debug \xe2\x80\xa6DhIndicates how quickly the device can assert the <code>DEVSEL#</code> \xe2\x80\xa6CfIndicates whether the device can run at 66 MHz (true).Ca<code>PAT</code>: Supports page attribute tables.Dk<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit mode \xe2\x80\xa6Dj<code>PBE</code>: Supports a pin notifying a stopped processor that an \xe2\x80\xa6CmControls whether the device may signal critical errors in \xe2\x80\xa6Dd<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to \xe2\x80\xa6Dd<code>#CP</code>: Improper branching detected by control-flow guard.CfDefine an exception vector table that forwards all \xe2\x80\xa6CiIterate over the functions available on the specified \xe2\x80\xa6Dg<code>MCA</code>: Supports extended features for reporting internal \xe2\x80\xa6Dj<code>CR4.PAE</code>: Enable pages to map to physical addresses larger \xe2\x80\xa6Dk<code>PAE</code>: Supports mapping virtual memory to physical addresses \xe2\x80\xa6Ea<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.Bk<code>F</code>: Mask fast (FIQ) interrupts.Dh<code>DCA</code>: Supports prefetching memory-mapped data from a device.Ej<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit \xe2\x80\xa6Ef<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.Cf<code>VMX</code>: Supports virtual machine extensions.DkOne-based index of the <code>interrupt_stack</code> pointer to use when \xe2\x80\xa6ChIndicates whether the transaction was aborted with a \xe2\x80\xa6CjIndicates taht the device has detected a parity error, \xe2\x80\xa6CkControls whether the device responds normally to parity \xe2\x80\xa6Dg<code>XCR0.PKRU</code>: Manage protection key rights registers with \xe2\x80\xa6Ea<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.C`<code>SMX</code>: Supports safer-mode extensionsCnIndicates that the device has detected a critical error in \xe2\x80\xa66CjIndicates that this function generated an abort on the \xe2\x80\xa6CgInstruction abort triggered at current exception level.ChIndicates whether the configuration space contains a \xe2\x80\xa6C`<code>OSXSAVE</code>: Reflects the value of [\xe2\x80\xa6Cc<code>MTRR</code>: Has memory type range registers.Di<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC \xe2\x80\xa6Cn<code>CR0.NW</code>: Disable write-back/write-through caching.E`<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic \xe2\x80\xa6Eh<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and \xe2\x80\xa6Ce<code>CR4.MCE</code>: Enable machine-check exception.Df<code>MCE</code>: Defines an exception (18) for reporting internal \xe2\x80\xa6Di<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with \xe2\x80\xa6De<code>CR4.VME</code>: Enable interrupts and exception handling in \xe2\x80\xa6De<code>VME</code>: Supports virtual real-mode extensions (VME) and \xe2\x80\xa6Ea<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.Bk<code>F</code>: Mask fast (FIQ) interrupts.Dh<code>DCA</code>: Supports prefetching memory-mapped data from a device.CnControls whether the device may send a \xe2\x80\x9cMemory Write and \xe2\x80\xa6Fd<code>LDTR</code>: Contains a <code>Selector</code> referencing a <code>SegmentDescriptor</code> \xe2\x80\xa6Ec<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision \xe2\x80\xa6CgSet flags in general control registers to a known stateDb<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.CmSupports carry-less multiplication of two 64-bit integers \xe2\x80\xa6Eg<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement \xe2\x80\xa6Dg<code>ACPI</code>: Supports thermal monitoring and power management \xe2\x80\xa6Dg<code>CR4.SMAP</code>: Enable access prevention in privilege levels \xe2\x80\xa6Di<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC \xe2\x80\xa6Cn<code>CR0.NW</code>: Disable write-back/write-through caching.E`<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic \xe2\x80\xa6Eh<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> and \xe2\x80\xa6Ce<code>CR4.MCE</code>: Enable machine-check exception.Df<code>MCE</code>: Defines an exception (18) for reporting internal \xe2\x80\xa6Di<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with \xe2\x80\xa6De<code>CR4.VME</code>: Enable interrupts and exception handling in \xe2\x80\xa6De<code>VME</code>: Supports virtual real-mode extensions (VME) and \xe2\x80\xa6Dj<code>IA32_EFER</code>: Model-specific register that controls features \xe2\x80\xa6Dj<code>GDTR</code>: Points to the memory range of the global descriptor \xe2\x80\xa6CiSupports disabling xTPR task priority messages to the \xe2\x80\xa6CcIndicates whether the device supports receiving \xe2\x80\xa6CiControls whether the device may use fast back-to-back \xe2\x80\xa6Dj<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to \xe2\x80\xa6Ee<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, \xe2\x80\xa6Dc<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.CmSupports carry-less multiplication of two 64-bit integers \xe2\x80\xa6Eg<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement \xe2\x80\xa6Dg<code>ACPI</code>: Supports thermal monitoring and power management \xe2\x80\xa6CfDefine an exception vector table that forwards all \xe2\x80\xa6Cf<code>SDBG</code>: Supports an MSR for chip debugging.Dg<code>MCA</code>: Supports extended features for reporting internal \xe2\x80\xa6Dj<code>CR4.PAE</code>: Enable pages to map to physical addresses larger \xe2\x80\xa6Dk<code>PAE</code>: Supports mapping virtual memory to physical addresses \xe2\x80\xa6Ej<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit \xe2\x80\xa6Ef<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.Cf<code>VMX</code>: Supports virtual machine extensions.?>=<;Dj<code>CR4.UMIP</code>: Prevent access to instructions that allow reads \xe2\x80\xa6ChIndicates whether the configuration space contains a \xe2\x80\xa6C`<code>OSXSAVE</code>: Reflects the value of [\xe2\x80\xa6Cc<code>MTRR</code>: Has memory type range registers.CnControls whether the device may send a \xe2\x80\x9cMemory Write and \xe2\x80\xa6Dj<code>CR4.SMEP</code>: Enable execution prevention in privilege levels \xe2\x80\xa6Dh<code>CR0.TS</code>: Set by processor when task was switched but FPU \xe2\x80\xa6<;:987Da<code>IDTR</code>: Contains the memory range of the interrupt \xe2\x80\xa6Dg<code>DS-CPL</code>: Supports saving the permission level with data \xe2\x80\xa6Ec<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision \xe2\x80\xa6Db<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.Dg<code>CR4.SMAP</code>: Enable access prevention in privilege levels \xe2\x80\xa6:987Dj<code>AC</code>: Enable strict alignment checks for memory accesses in \xe2\x80\xa6Di<code>AHP</code>: Use an alternative format for half-precision floats \xe2\x80\xa6CiSupports disabling xTPR task priority messages to the \xe2\x80\xa6543Cf<code>SDBG</code>: Supports an MSR for chip debugging.1Dd<code>PDCM</code>: Supports a model-specific register that lists \xe2\x80\xa6Dj<code>CR4.UMIP</code>: Prevent access to instructions that allow reads \xe2\x80\xa6<;290<;DkDirectly clear the <code>task_switched_without_fpu_state</code> flag in \xe2\x80\xa665:6522")