var searchIndex = JSON.parse('{\
"aml_parse":{"doc":"","t":[5,3,11,11,11,11,11,11,11,11,11,11],"n":["main","UsageError","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","fmt","fmt"],"q":["aml_parse","","","","","","","","","","",""],"d":["","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1],"f":[[[],[["box",3],["result",4]]],null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]]],"p":[[3,"UsageError"]]},\
"tartan_acpi":{"doc":"Support for Advanced Configuration and Power Interface","t":[0,0,0,3,12,12,11,3,12,12,12,11,11,11,11,8,16,10,0,5,5,0,0,0,5,8,10,6,8,0,5,3,12,3,12,12,11,11,11,11,11,11,4,13,13,4,13,13,13,4,13,13,13,6,0,4,13,13,13,13,13,13,13,13,13,13,3,12,12,3,12,12,3,12,12,4,13,13,4,13,13,13,4,13,13,13,0,4,13,13,13,13,4,13,13,13,13,13,4,13,12,12,13,13,4,13,12,12,12,12,12,13,12,12,12,13,12,12,12,13,12,12,12,13,12,12,12,12,13,12,12,12,13,12,12,12,13,12,12,12,12,13,12,12,13,13,12,12,12,13,12,12,12,13,12,12,12,12,13,12,12,12,13,12,12,13,12,12,12,12,13,12,12,12,12,13,12,12,12,12,12,13,12,12,3,12,12,12,4,13,13,13,13,13,13,4,13,13,13,4,13,12,12,13,12,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,3,12,12,12,11,4,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,12,12,12,13,12,12,12,13,12,12,13,13,12,12,13,12,13,12,13,13,12,13,12,13,12,13,12,12,4,13,13,13,12,12,12,13,4,13,13,13,13,13,12,12,13,13,13,13,13,13,13,13,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,12,12,12,12,13,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,3,3,12,12,3,12,12,12,12,12,3,12,12,12,12,3,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,3,18,18,18,18,18,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["aml","parse","state","MethodSignature","name","arg_count","new","ParserState","data","current_scope","method_signatures","new","get_arg_count","in_scope","lift","ReplaceableParseError","From","replace_input","name","super_name_minus_invoke","parse_target","data","term","misc","parse_table","Parse","parse","AMLParseResult","AMLParseError","name","to_path","NameSeg","0","NameString","anchor","path","empty","new","new_root","new_parent","resolve_as_decl","resolve_as_ref","PathAnchor","Root","Parent","SimpleName","Name","Arg","Local","SuperName","Name","Debug","Reference","Target","data","ComputationalData","Byte","Word","DWord","QWord","String","Zero","One","Ones","Revision","Buffer","Buffer","size","initializer","Package","count","initializers","VarPackage","count","initializers","PackageElement","Ref","Name","DataObject","Data","Package","VarPackage","DataRefObject","Data","ObjectReference","DefinitionBlockHandle","term","TermObject","Modifier","Named","Statement","Expression","TermArg","Expression","Data","Arg","Local","Name","NameSpaceModifier","Alias","source","alias","Name","Scope","NamedObject","BankField","region_name","bank_name","bank_value","flags","elements","CreateBitField","source_buffer","bit_index","name","CreateByteField","source_buffer","byte_index","name","CreateDWordField","source_buffer","byte_index","name","CreateField","source_buffer","bit_index","num_bits","name","CreateQWordField","source_buffer","byte_index","name","CreateWordField","source_buffer","byte_index","name","DataTableRegion","name","signature","oem_id","oem_table_id","Device","name","body","Event","External","name","object_type","argument_count","Field","region_name","flags","elements","IndexField","index_name","data_name","flags","elements","Method","name","flags","body","Mutex","name","sync_level","OperationRegion","name","region_space","offset","length","PowerResource","name","system_level","resource_order","body","Processor","name","id","register_block_addr","register_block_length","body","ThermalZone","name","body","FieldFlags","access_type","lock","update_rule","AccessType","Any","Byte","Word","DWord","QWord","Buffer","UpdateRule","Preserve","WriteAsOnes","WriteAsZeros","FieldElement","Named","name","bit_length","Reserved","bit_length","AccessAs","ConnectNamed","ConnectBuffer","AccessAttrib","None","Quick","SendReceive","Byte","Word","Block","ProcessCall","BlockProcessCall","Bytes","RawBytes","RawProcessBytes","MethodFlags","arg_count","serialized","sync_level","unsynced","RegionSpace","SystemMemory","SystemIO","PCIConfig","EmbeddedControl","SMBus","SystemCMOS","PCIBarTarget","IPMI","GeneralPurposeIO","GenericSerialBus","PCC","OEMDefined","StatementOpcode","Break","BreakPoint","Continue","Fatal","fatal_type","code","arg","If","predicate","if_true","if_false","Load","name","definition_block_handle","NoOp","Notify","device_or_zone","value","Release","mutex","Reset","event","Return","Signal","event","Sleep","milliseconds","Stall","microseconds","While","predicate","body","ReferenceExpressionOpcode","RefOf","Deref","Index","source","index","result","Invoke","ExpressionOpcode","RefExpression","Buffer","Package","VarPackage","Acquire","mutex","timeout","Add","BitwiseAnd","Concat","ConcatRes","CondRefOf","CopyObject","Decrement","Divide","dividend","divisor","remainder","quotient","FindSetLeftBit","FindSetRightBit","FromBCD","Increment","LogicalAnd","Equal","Greater","GreaterEqual","Less","LessEqual","LogicalNot","NotEqual","LoadTable","signature","oem_id","oem_table_id","root_path","parameter_path","parameter_data","LogicalOr","Match","search_package","a","b","start_index","Mid","source","index","length","result","Mod","Multiply","Nand","Nor","BitwiseNot","ObjectType","BitwiseOr","ShiftLeft","ShiftRight","SizeOf","Store","Subtract","Timer","ToBCD","ToBuffer","ToDecimalString","ToHexString","ToInteger","ToString","source","length","result","Wait","event","timeout","BitwiseXor","MatchOpcode","True","Equal","LessEqual","Less","GreaterEqual","Greater","ObjectType","Uninitialized","Integer","String","Buffer","Package","FieldUnit","Device","Event","Method","Mutex","OperationRegion","PowerResource","Processor","ThermalZone","BufferField","DDBHandle","DebugObject","misc","ArgObject","Arg0","Arg1","Arg2","Arg3","Arg4","Arg5","Arg6","LocalObject","Local0","Local1","Local2","Local3","Local4","Local5","Local6","Local7","DebugObject","AMLTable","header","body","RootDescriptionPointerV1","signature","checksum","oem_id","revision","root_description_table_addr","RootDescriptionPointerV2","v1","length","extended_description_table_addr","extended_checksum","DescriptionHeader","signature","length","revision","checksum","oem_id","oem_table_id","oem_revision","creator_id","creator_revision","FixedDescription","header","firmware_api_ctrl_addr_32","diff_description_addr_32","preferred_power_profile","sci_interrupt","smi_command_port","smi_command_acpi_enable","smi_command_acpi_disable","smi_command_s4_bios_enter","smi_command_cpu_state_enable","pm_event_port_block_1a_32","pm_event_port_block_1b_32","pm_cntrl_port_block_1a_32","pm_cntrl_port_block_1b_32","pm_cntrl_port_block_2_32","pm_timer_port_block_32","general_event_port_block_0_32","general_event_port_block_1_32","pm_event_port_block_1_length","pm_cntrl_port_block_1_length","pm_cntrl_port_block_2_length","pm_timer_port_block_length","general_event_port_block_0_length","general_event_port_block_1_length","general_event_port_block_1_base","smi_command_c_state_enable","cpu_c2_latency","cpu_c3_latency","cache_flush_stride_count","cache_flush_stride_width","cpu_duty_cycle_register_offset","cpu_duty_cycle_register_width","rtc_day_alarm_index","rtc_month_alarm_index","rtc_century_alarm_index","pc_boot_architecture_flags","flags","reset_register","reset_register_value","arm_boot_architecture_flags","revision_minor","firmware_api_ctrl_addr_64","diff_description_addr_64","pm_event_port_block_1a_64","pm_event_port_block_1b_64","pm_control_port_block_1a_64","pm_control_port_block_1b_64","pm_control_port_block_2_64","pm_timer_port_block_64","general_event_port_block_0_64","general_event_port_block_1_64","sleep_control_register_addr","sleep_status_register_addr","hypervisor_vendor","GenericAddress","AddressSpace","SystemMemory","SystemIO","PCIConfiguration","EmbeddedController","SMBus","SystemCMOS","PCIBARTarget","IPMI","GeneralPurposeIo","GenericSerialBus","PlatformCommunicationsChannel","FunctionalFixed","OEMDefinedMin","OEMDefinedMax","name","AccessSize","Undefined","Byte","Word","DWord","QWord","name","FixedFlags","x86_wbinvd_supported","x86_wbinvd_requires_flush","c1_supported","c2_multi_cpu_supported","power_button_is_control_method_device","sleep_button_is_control_method_device","rtc_not_fixed","rtc_can_wake_s4","timer_value_32_bit","dock_capable","fixed_description_reset_supported","sealed_case","headless","execute_instruction_after_slp_typ","pci_express_wake","use_platform_clock","rtc_status_valid_after_s4","remote_power_on_supported","force_apic_cluster_model","force_apic_physical_destination_mode","hardware_reduced_acpi","low_power_s0_idle","set_x86_wbinvd_supported","set_x86_wbinvd_requires_flush","set_c1_supported","set_c2_multi_cpu_supported","set_power_button_is_control_method_device","set_sleep_button_is_control_method_device","set_rtc_not_fixed","set_rtc_can_wake_s4","set_timer_value_32_bit","set_dock_capable","set_fixed_description_reset_supported","set_sealed_case","set_headless","set_execute_instruction_after_slp_typ","set_pci_express_wake","set_use_platform_clock","set_rtc_status_valid_after_s4","set_remote_power_on_supported","set_force_apic_cluster_model","set_force_apic_physical_destination_mode","set_hardware_reduced_acpi","set_low_power_s0_idle","parser_fn","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","partial_cmp","partial_cmp","hash","hash","try_from","try_from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","name","name","input_len","as_bytes","iter_indices","iter_elements","position","slice_index"],"q":["tartan_acpi","tartan_acpi::aml","tartan_acpi::aml::parse","tartan_acpi::aml::parse::state","","","","","","","","","","","","","","","tartan_acpi::aml::parse","tartan_acpi::aml::parse::name","","tartan_acpi::aml::parse","","","","","","","","tartan_acpi::aml","tartan_acpi::aml::name","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml","tartan_acpi::aml::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml","tartan_acpi::aml::term","","","","","","","","","","","","","tartan_acpi::aml::term::NameSpaceModifier","","tartan_acpi::aml::term","","","","tartan_acpi::aml::term::NamedObject","","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","tartan_acpi::aml::term","","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::NamedObject","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","tartan_acpi::aml::term::FieldElement","","tartan_acpi::aml::term","tartan_acpi::aml::term::FieldElement","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::term::StatementOpcode","","","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","","","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","","tartan_acpi::aml::term","","tartan_acpi::aml::term::StatementOpcode","","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","tartan_acpi::aml::term","","tartan_acpi::aml::term::StatementOpcode","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","tartan_acpi::aml::term","tartan_acpi::aml::term::StatementOpcode","","tartan_acpi::aml::term","","","","tartan_acpi::aml::term::ReferenceExpressionOpcode","","","tartan_acpi::aml::term","","","","","","","tartan_acpi::aml::term::ExpressionOpcode","","tartan_acpi::aml::term","","","","","","","","tartan_acpi::aml::term::ExpressionOpcode","","","","tartan_acpi::aml::term","","","","","","","","","","","","","tartan_acpi::aml::term::ExpressionOpcode","","","","","","tartan_acpi::aml::term","","tartan_acpi::aml::term::ExpressionOpcode","","","","tartan_acpi::aml::term","tartan_acpi::aml::term::ExpressionOpcode","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::term::ExpressionOpcode","","","tartan_acpi::aml::term","tartan_acpi::aml::term::ExpressionOpcode","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml","tartan_acpi::aml::misc","","","","","","","","","","","","","","","","","","tartan_acpi::aml","","","tartan_acpi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::parse::state","","","","","","","","","","","","","","","","","","tartan_acpi::aml::name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::misc","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml","","","","","","","tartan_acpi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::name","","","","","tartan_acpi::aml::data","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","tartan_acpi::aml::misc","","","tartan_acpi::aml::parse::state","","tartan_acpi::aml","tartan_acpi::aml::name","","","","","tartan_acpi::aml::data","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","tartan_acpi::aml::misc","","","tartan_acpi","","","","","","","","tartan_acpi::aml::name","","","tartan_acpi::aml::parse::state","","","","tartan_acpi::aml","","tartan_acpi::aml::name","","","","","","","","","","tartan_acpi::aml::data","","","","","","","","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::misc","","","tartan_acpi","","","","","","","","","","","","","","","","","","","","","","tartan_acpi::aml::term","","tartan_acpi::aml::parse::state","tartan_acpi::aml::name","","","","","","","","","","","tartan_acpi::aml::data","","","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","","","","","","","tartan_acpi","","","tartan_acpi::aml::parse::state","","tartan_acpi::aml::name","","","","","tartan_acpi::aml::data","","","","","","","tartan_acpi::aml::term","","","","","","","","","","","","","","","","tartan_acpi::aml::misc","","","tartan_acpi","","","","","","","","tartan_acpi::aml::parse::state","","tartan_acpi","","","","","tartan_acpi::aml::parse::state","","","","",""],"d":["Abstract syntax tree for ACPI Machine Language","Parsers for AML bytecode.","Parser context needed to disambiguate grammar","Expected argument count for a method in the ACPI …","","","","Input data plus context needed to disambiguate grammar","","","","","Get the argument count of the named method, if it is …","Execute a parser in a new scope relative to the current …","Wraps a byte-oriented parser to work with <code>ParserState</code>","Helper trait used to convert a parser error from one …","","","Name objects, defined in §20.2.2","Parse a [<code>SuperName</code>], but do <em>not</em> allow method invocations.","Grammar:","Data objects, defined in §20.2.3","Terms, defined in §20.2.5","Miscellaneous objects, defined in §20.2.6","Parse an ACPI table that contains AML, including the …","An object that can be parsed from AML bytecode","Try to parse an object of this type from the given input …","Alias for type returned by AML parsers","Trait “alias” for error type used by AML parsers","Names of objects, arguments, and references","Convert a list of segments in various formats into a path …","Four-character name segment, allowing underscores, …","","Fully qualified object path, either absolute or relative.","Specifies how to resolve this path as absolute or …","Segments of the path","","","","","Convert to an absolute namespace path in the context of …","List all possible absolute pathnames that this name may …","Indicates whether a name is absolute or relative to the …","","","A named object or variable.","","","","A named object, variable, reference expression, or debug …","","","","Location to store the result of an operation","Data resources","Single value resolved at compile time.","","","","","","","","","","","Block of raw bytes, optionally initialized in whole or in …","","","Group of related data elements, optionally inititalized …","","","Group of related data elements, with a number of elements …","","","A name or reference that constitutes part of a [<code>Package</code>] …","","","Data resolved at compile time, possibly grouped in a …","","","","","","","","Top-level terms and opcodes.","Top-level, most general term type where the value (if …","","","","","Term that resolves to a value.","","","","","","Term that attaches a name to its argument.","Create a new <code>alias</code> for existing named <code>source</code> object.","","","Attach a name to an anonymous data or reference.","Evaluate the contained terms within a new scope.","Term that defines an object with a name.","Declare fields that can only be accessed after writing to …","","","","","","Declare a single-bit field within a buffer","","","","Create a one-byte-wide field within a buffer","","","","Declare a four-byte-wide field within a buffer","","","","Declare an arbitrary-width field within a buffer","","","","","Declare an eight-byte-wide field within a buffer","","","","Declare a two-byte-wide field within a buffer","","","","Allow an ACPI table indexed in the XSDT to be used as a …","","","","","Declare a device and its associated fields, methods, and …","","","Declare a waitable synchronization object","Declare an object that is defined in another ACPI table","","","","Declare a group of fields","","","","Declare a group of field that must be accessed by writing …","","","","","Declare a control method","","","","Declare an acquirable mutex","","","Declare an address space that can be used by fields","","","","","Declare a power resource object","","","","","Declare a processor and associated register block","","","","","","Declare a thermal zone namespace","","","Rules for reading and writing a field.","","","","Width used to access a field.","","","","","","","Indicates what to do with unused bits when writing a …","","","","A substructure of a field.","A named bitfield.","","","Indicates that the next most significant <code>bit_length</code> bits …","","Sets access information for <strong>following</strong> fields.","Indicates that <strong>following</strong> fields should be accessed with …","Indicates that <strong>following</strong> fields should be accessed with …","Additional information about how a field is accessed.","","","","","","","","","","","","Information about how to call a method.","","","","","Address space used to access a field.","","","","","","","","","","","","","Terminal operation that does not evaluate to a value, …","Break from a loop","Trigger a debugger breakpoint","Continue to the next loop iteration","Signal an error that requires a system shutdown","","","","Branch on a predicate","","","","Load a dynamically-generated SSDT from a field, region, …","","","Do nothing","Send a signal value to a device/processor/zone","","","Release a held mutex","","Clear the signalled state of an event object","","Exit the current method and yield the given value to the …","Signal to one thread waiting on the event","","Delay for at least the given milliseconds, releasing the …","","Delay for at least the given microseconds, but do <em>not</em> …","","Execute a series of statements as long as the predicate …","","","Terminal operation that evaluates to a reference.","Create a reference to the given name","Get the target of a reference","Create a reference to an index within a buffer","","","","Execute a control method","Terminal operation that evaluates to a value or reference.","","","","","Try to acquire a mutex, returning <em>true</em> if the attempt …","","","Add two integers","Compute a bitwise AND of two integers","Concatenate two strings or buffers","Concatenate two buffers containing resource templates","Try to create a reference, returning false if it is not …","Update the destination with a copy of the given value, <em>…","Decrement an integer variable","Perform integer (quotient-remainder) division","","","","","Get the index of the most-significant set bit in a value","Get the index of the least-significant set bit in a value","Decode a series of binary-coded decimal nibbles into an …","Increment an integer variable","Evaluate to true if both arguments are non-zero integers","Evaluate to true if both values are equal","Evaluate to true if the left value is greater than the …","Evaluate to true if the left value is greater than or …","Evaluate to true if the left value is less than the right …","Evaluate to true if the left value is less than or equal …","Evaluate to true if the value is zero","Evaluate to true if the left value is not equal to the …","Find an ACPI table indexed by the XSDT","","","","","","","Evaluate to true if either of the values is a non-zero …","Search a package and return the index of the first …","","","","","Copy a slice of a string or buffer.","","","","","Compute the remainder of dividing the first integer by …","Multiply two integers","Compute the bitwise NAND of two integers","Compute the bitwise NOR of two integers","Invert the bits of an integer","Get an integer representing the type of the given value. …","Compute the bitwise OR of the two integers","Multiply an integer by the specified power of two","Divide an integer by the specified power of two","Get the length of a string, buffer, or package","Update the destination with the given value, converting …","Subtract an integer from another, ignoring underflow","Get the current value of the system timer in 100ns","Encode an integer into a sequence of binary-coded decimal …","Convert a value to a buffer","Encode a value as an ASCII decimal number","Encode a value as an ASCII hexadecimal number","Convert a value to an integer, either by parsing a string …","Copy an ASCII string from a buffer into a string value","","","","Try to wait for another thread to signal an event object, …","","","Compute the bitwise XOR of two integers","Type of comparison used for a branch in an […","","","","","","","Type ID returned by [<code>ExpressionOpcode::ObjectType</code>].","","","","","","","","","","","","","","","","","","Special symbols","Symbol for a positional argument passed to the current …","","","","","","","","Symbol for a variable local to the current method.","","","","","","","","","Symbol representing debugger output device.","An ACPI table that contains AML, such as the DSDT or an …","Common ACPI table header","Top-level AML objects defined in the table","Root System Description Pointer (RSDP) used in ACPI 1.0","","","","","","Extended RDSP defined by ACPI 2.0","","","","","Common table header defined as <code>DESCRIPTION_HEADER</code> in the …","","","","","","","","","","Fixed ACPI Description Table (FADT)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extended address structure defined in ACPI 2.0 to support …","Type of register address","","","","","","","","","","","","","","","The name of the enum variant in code, if one is defined …","Memory width used to read/write from a register","","","","","","The name of the enum variant in code, if one is defined …","Support flags from Fixed ACPI Description Table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a byte slice parser function, avoiding repetitive …ormat a <code>NameString</code> like a path ini":[0,0,0,0,1,1,1,0,2,2,2,2,2,2,2,0,3,3,0,0,0,0,0,0,0,0,4,0,0,0,0,0,5,0,6,6,6,6,6,6,6,6,0,7,7,0,8,8,8,0,9,9,9,0,0,0,10,10,10,10,10,10,10,10,10,10,0,11,11,0,12,12,0,13,13,0,14,14,0,15,15,15,0,16,16,16,0,0,17,17,17,17,0,18,18,18,18,18,0,19,20,20,19,19,0,21,22,22,22,22,22,21,23,23,23,21,24,24,24,21,25,25,25,21,26,26,26,26,21,27,27,27,21,28,28,28,21,29,29,29,29,21,30,30,21,21,31,31,31,21,32,32,32,21,33,33,33,33,21,34,34,34,21,35,35,21,36,36,36,36,21,37,37,37,37,21,38,38,38,38,38,21,39,39,0,40,40,40,0,41,41,41,41,41,41,0,42,42,42,0,43,44,44,43,45,43,43,43,0,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,50,50,50,49,51,51,51,49,52,52,49,49,53,53,49,54,49,55,49,49,56,49,57,49,58,49,59,59,0,60,60,60,61,61,61,60,0,62,62,62,62,62,63,63,62,62,62,62,62,62,62,62,64,64,64,64,62,62,62,62,62,62,62,62,62,62,62,62,62,65,65,65,65,65,65,62,62,66,66,66,66,62,67,67,67,67,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,68,68,68,62,69,69,62,0,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,0,0,74,74,0,75,75,75,75,75,0,76,76,76,76,0,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,60,60,60,60,60,60,60,60,60,62,62,62,62,62,62,62,62,62,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,82,82,82,82,82,82,82,82,82,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,83,83,83,83,83,83,83,83,83,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,40,43,47,48,49,60,62,70,71,72,73,82,1,2,74,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,40,41,42,43,46,47,48,49,60,62,70,71,72,73,82,75,76,77,78,83,79,80,81,5,6,7,1,1,2,2,74,74,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,21,21,40,40,41,42,43,43,46,46,47,47,48,48,49,49,60,60,62,62,70,71,72,73,82,75,75,76,76,77,77,78,78,83,83,79,79,80,80,81,81,79,80,79,80,79,80,41,42,2,5,6,6,8,8,8,9,9,9,9,9,14,14,15,15,15,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,62,62,62,62,79,80,81,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,40,41,42,43,46,47,48,49,60,62,70,71,72,73,82,75,76,77,78,83,79,80,81,1,2,79,80,81,79,80,2,2,2,2,2,2],"f":[null,null,null,null,null,null,[[["u8",15]]],null,null,null,null,[[]],[[["namestring",3]],[["option",4],["u8",15]]],[[["namestring",3]],["amlparseresult",6]],[[]],null,null,[[]],null,[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6],["supername",4]]],[[["parserstate",3]],[["target",6],["amlparseresult",6],["amlparseerror",8]]],null,null,null,[[],[["result",4],["errorwithposition",3],["amltable",3]]],null,[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],null,null,null,[[],[["vec",3],["nameseg",3]]],null,null,null,null,null,[[]],[[]],[[]],[[["usize",15]]],[[],[["vec",3],["option",4]]],[[],[["vec",3],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["parserstate",3]],[["amlparseerror",8],["amlparseresult",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["methodsignature",3]],["bool",15]],[[["methodsignature",3]],["bool",15]],[[["parserstate",3]],["bool",15]],[[["parserstate",3]],["bool",15]],[[["amltable",3]],["bool",15]],[[["amltable",3]],["bool",15]],[[["nameseg",3]],["bool",15]],[[["nameseg",3]],["bool",15]],[[["namestring",3]],["bool",15]],[[["namestring",3]],["bool",15]],[[["pathanchor",4]],["bool",15]],[[["pathanchor",4]],["bool",15]],[[["simplename",4]],["bool",15]],[[["simplename",4]],["bool",15]],[[["supername",4]],["bool",15]],[[["supername",4]],["bool",15]],[[["computationaldata",4]],["bool",15]],[[["computationaldata",4]],["bool",15]],[[["buffer",3]],["bool",15]],[[["buffer",3]],["bool",15]],[[["package",3]],["bool",15]],[[["package",3]],["bool",15]],[[["varpackage",3]],["bool",15]],[[["varpackage",3]],["bool",15]],[[["packageelement",4]],["bool",15]],[[["packageelement",4]],["bool",15]],[[["dataobject",4]],["bool",15]],[[["dataobject",4]],["bool",15]],[[["datarefobject",4]],["bool",15]],[[["datarefobject",4]],["bool",15]],[[["termobject",4]],["bool",15]],[[["termobject",4]],["bool",15]],[[["termarg",4]],["bool",15]],[[["termarg",4]],["bool",15]],[[["namespacemodifier",4]],["bool",15]],[[["namespacemodifier",4]],["bool",15]],[[["namedobject",4]],["bool",15]],[[["namedobject",4]],["bool",15]],[[["fieldflags",3]],["bool",15]],[[["fieldflags",3]],["bool",15]],[[["accesstype",4]],["bool",15]],[[["updaterule",4]],["bool",15]],[[["fieldelement",4]],["bool",15]],[[["fieldelement",4]],["bool",15]],[[["accessattrib",4]],["bool",15]],[[["accessattrib",4]],["bool",15]],[[["methodflags",3]],["bool",15]],[[["methodflags",3]],["bool",15]],[[["regionspace",4]],["bool",15]],[[["regionspace",4]],["bool",15]],[[["statementopcode",4]],["bool",15]],[[["statementopcode",4]],["bool",15]],[[["referenceexpressionopcode",4]],["bool",15]],[[["referenceexpressionopcode",4]],["bool",15]],[[["expressionopcode",4]],["bool",15]],[[["expressionopcode",4]],["bool",15]],[[["matchopcode",4]],["bool",15]],[[["objecttype",4]],["bool",15]],[[["argobject",4]],["bool",15]],[[["localobject",4]],["bool",15]],[[["debugobject",3]],["bool",15]],[[["rootdescriptionpointerv1",3]],["bool",15]],[[["rootdescriptionpointerv1",3]],["bool",15]],[[["rootdescriptionpointerv2",3]],["bool",15]],[[["rootdescriptionpointerv2",3]],["bool",15]],[[["descriptionheader",3]],["bool",15]],[[["descriptionheader",3]],["bool",15]],[[["fixeddescription",3]],["bool",15]],[[["fixeddescription",3]],["bool",15]],[[["genericaddress",3]],["bool",15]],[[["genericaddress",3]],["bool",15]],[[["addressspace",3]],["bool",15]],[[["addressspace",3]],["bool",15]],[[["accesssize",3]],["bool",15]],[[["accesssize",3]],["bool",15]],[[["fixedflags",3]],["bool",15]],[[["fixedflags",3]],["bool",15]],[[["addressspace",3]],["ordering",4]],[[["accesssize",3]],["ordering",4]],[[["addressspace",3]],[["option",4],["ordering",4]]],[[["accesssize",3]],[["option",4],["ordering",4]]],[[]],[[]],[[["u8",15]],["result",4]],[[["u8",15]],["result",4]],[[]],[[],["nameseg",3]],[[],["namestring",3]],[[["nameseg",3]],["namestring",3]],[[["namestring",3]],["simplename",4]],[[["argobject",4]],["simplename",4]],[[["localobject",4]],["simplename",4]],[[["simplename",4]],["supername",4]],[[["namestring",3]],["supername",4]],[[["argobject",4]],["supername",4]],[[["localobject",4]],["supername",4]],[[["referenceexpressionopcode",4]],["supername",4]],[[["datarefobject",4]],["packageelement",4]],[[["namestring",3]],["packageelement",4]],[[["computationaldata",4]],["dataobject",4]],[[["package",3]],["dataobject",4]],[[["varpackage",3]],["dataobject",4]],[[["dataobject",4]],["datarefobject",4]],[[["computationaldata",4]],["datarefobject",4]],[[["package",3]],["datarefobject",4]],[[["varpackage",3]],["datarefobject",4]],[[["namespacemodifier",4]],["termobject",4]],[[["namedobject",4]],["termobject",4]],[[["statementopcode",4]],["termobject",4]],[[["expressionopcode",4]],["termobject",4]],[[["referenceexpressionopcode",4]],["termobject",4]],[[["buffer",3]],["termobject",4]],[[["package",3]],["termobject",4]],[[["varpackage",3]],["termobject",4]],[[["expressionopcode",4]],["termarg",4]],[[["referenceexpressionopcode",4]],["termarg",4]],[[["buffer",3]],["termarg",4]],[[["package",3]],["termarg",4]],[[["varpackage",3]],["termarg",4]],[[["dataobject",4]],["termarg",4]],[[["computationaldata",4]],["termarg",4]],[[["argobject",4]],["termarg",4]],[[["localobject",4]],["termarg",4]],[[["namestring",3]],["termarg",4]],[[["referenceexpressionopcode",4]],["expressionopcode",4]],[[["buffer",3]],["expressionopcode",4]],[[["package",3]],["expressionopcode",4]],[[["varpackage",3]],["expressionopcode",4]],[[["u8",15]]],[[["u8",15]]],[[["u32",15]]],[[],["methodsignature",3]],[[],["parserstate",3]],[[],["nameseg",3]],[[],["namestring",3]],[[],["pathanchor",4]],[[],["simplename",4]],[[],["supername",4]],[[],["computationaldata",4]],[[],["buffer",3]],[[],["package",3]],[[],["varpackage",3]],[[],["packageelement",4]],[[],["dataobject",4]],[[],["datarefobject",4]],[[],["termobject",4]],[[],["termarg",4]],[[],["namespacemodifier",4]],[[],["namedobject",4]],[[],["fieldflags",3]],[[],["accesstype",4]],[[],["updaterule",4]],[[],["fieldelement",4]],[[],["accessattrib",4]],[[],["methodflags",3]],[[],["regionspace",4]],[[],["statementopcode",4]],[[],["referenceexpressionopcode",4]],[[],["expressionopcode",4]],[[],["matchopcode",4]],[[],["objecttype",4]],[[],["argobject",4]],[[],["localobject",4]],[[],["debugobject",3]],[[],["rootdescriptionpointerv1",3]],[[],["rootdescriptionpointerv2",3]],[[],["descriptionheader",3]],[[],["fixeddescription",3]],[[],["genericaddress",3]],[[],["addressspace",3]],[[],["accesssize",3]],[[],["fixedflags",3]],[[],["methodsignature",3]],[[],["parserstate",3]],[[],["addressspace",3]],[[],["accesssize",3]],[[],["fixedflags",3]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],["usize",15]],[[]],[[]],[[]],[[["fn",8]],[["usize",15],["option",4]]],[[["usize",15]],[["result",4],["usize",15],["needed",4]]]],"p":[[3,"MethodSignature"],[3,"ParserState"],[8,"ReplaceableParseError"],[8,"Parse"],[3,"NameSeg"],[3,"NameString"],[4,"PathAnchor"],[4,"SimpleName"],[4,"SuperName"],[4,"ComputationalData"],[3,"Buffer"],[3,"Package"],[3,"VarPackage"],[4,"PackageElement"],[4,"DataObject"],[4,"DataRefObject"],[4,"TermObject"],[4,"TermArg"],[4,"NameSpaceModifier"],[13,"Alias"],[4,"NamedObject"],[13,"BankField"],[13,"CreateBitField"],[13,"CreateByteField"],[13,"CreateDWordField"],[13,"CreateField"],[13,"CreateQWordField"],[13,"CreateWordField"],[13,"DataTableRegion"],[13,"Device"],[13,"External"],[13,"Field"],[13,"IndexField"],[13,"Method"],[13,"Mutex"],[13,"OperationRegion"],[13,"PowerResource"],[13,"Processor"],[13,"ThermalZone"],[3,"FieldFlags"],[4,"AccessType"],[4,"UpdateRule"],[4,"FieldElement"],[13,"Named"],[13,"Reserved"],[4,"AccessAttrib"],[3,"MethodFlags"],[4,"RegionSpace"],[4,"StatementOpcode"],[13,"Fatal"],[13,"If"],[13,"Load"],[13,"Notify"],[13,"Release"],[13,"Reset"],[13,"Signal"],[13,"Sleep"],[13,"Stall"],[13,"While"],[4,"ReferenceExpressionOpcode"],[13,"Index"],[4,"ExpressionOpcode"],[13,"Acquire"],[13,"Divide"],[13,"LoadTable"],[13,"Match"],[13,"Mid"],[13,"ToString"],[13,"Wait"],[4,"MatchOpcode"],[4,"ObjectType"],[4,"ArgObject"],[4,"LocalObject"],[3,"AMLTable"],[3,"RootDescriptionPointerV1"],[3,"RootDescriptionPointerV2"],[3,"DescriptionHeader"],[3,"FixedDescription"],[3,"AddressSpace"],[3,"AccessSize"],[3,"FixedFlags"],[3,"DebugObject"],[3,"GenericAddress"]]},\
"tartan_arch":{"doc":"Architecture-specific primitives for Tartan OS","t":[0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,18,18,18,18,11,3,0,4,13,13,13,13,4,13,13,13,13,3,3,4,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,4,13,13,13,13,11,4,13,13,11,11,0,0,4,13,13,13,13,13,13,13,3,4,11,11,0,0,3,12,12,12,11,3,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,0,0,3,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,3,12,12,11,3,12,12,0,0,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,3,11,0,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,3,12,12,11,11,3,11,11,11,11,11,11,18,11,11,11,11,0,5,5,5,5,5,5,0,3,11,11,3,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,8,11,11,11,3,3,0,3,12,12,11,11,11,4,11,11,11,4,11,11,4,13,13,13,13,13,13,11,11,3,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,18,18,18,18,18,18,18,18,18,18,18,11,11,3,12,3,3,12,18,11,11,11,11,11,3,11,11,11,11,3,12,11,11,11,11,11,3,11,11,11,11,3,18,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["aarch64","float","ControlRegister","alternative_half_precision_format","default_nan","flush_to_zero","rounding_mode","flush_to_zero_half_precision","trapped_exceptions","set_alternative_half_precision_format","set_default_nan","set_flush_to_zero","set_rounding_mode","set_flush_to_zero_half_precision","set_trapped_exceptions","get","set","StatusRegister","exceptions","set_exceptions","get","set","RoundingMode","Nearest","PlusInfinity","MinusInfinity","Zero","name","Exceptions","interrupt","Kind","Synchronous","Interrupt","FastInterrupt","SystemError","Source","CurrentLevelThread","CurrentLevelHandler","LowerLevel","LowerLevel32Bit","VectorEntry","VectorTable","VectorBaseAddressRegister","get","set","MaskRegister","fast_interrupts_masked","interrupts_masked","system_error_masked","debug_masked","set_fast_interrupts_masked","set_interrupts_masked","set_system_error_masked","set_debug_masked","get","set","SyndromeRegister","class","length_32bit","class_data","set_class","set_length_32bit","set_class_data","get","set","Class","Unknown","Wait","FPUAccess","IllegalState","SupervisorCall","SystemInstruction","VectorAccess","PointerAuthFailure","InstructionAbortFromLower","InstructionAbortFromCurrent","PCAlignment","DataAbortFromLower","DataAbortFromCurrent","SPAlignment","FloatException","SystemError","BreakpointFromLower","BreakpointFromCurrent","StepFromLower","StepFromCurrent","WatchpointFromLower","WatchpointFromCurrent","BreakpointInstruction","name","ExceptionLevel","Zero","One","Two","Three","get","StackPointerSelect","Level0","CurrentLevel","get","set","arm","interrupt","Kind","Reset","UndefinedInstruction","SoftwareInterrupt","PrefetchAbort","DataAbort","HardwareInterrupt","FastHardwareInterrupt","VectorTable","VectorBaseAddressRegister","get","set","x86_64","protection","TaskStateSegmentHeader","privileged_stack","interrupt_stack","io_permission_map_offset","new","ControlRegister8","task_priority_level","set_task_priority_level","get","set","ExtendedFeatureEnableRegister","syscall","long_mode_enabled","long_mode_active","no_execute","set_syscall","set_long_mode_enabled","set_long_mode_active","set_no_execute","get","set","x86","protection","BasicTaskStateSegment","header","bitmaps","TaskStateSegmentHeader","previous_task","privileged_stack","control_register_3","instruction_pointer","flags","general_a","general_c","general_d","general_b","stack_pointer","base_pointer","source_index","destination_index","general_segment_e","code_segment","stack_segment","data_segment","general_segment_f","general_segment_g","local_descriptor_table","debug_trap","io_permission_map_offset","shadow_stack_pointer","new","PrivilegedStack","pointer","segment","new","TaskStateSegmentBitmaps","interrupt_redirect","io_permission","x86_common","features","cpuid","max_cpuid_index_basic","max_cpuid_index_extended","BasicFeatures","on_chip_fpu","virtual_8086_extensions","debugging_extensions","page_size_extension","time_stamp_counter","model_registers","physical_address_extension","machine_check_exception","compare_exchange_64bit","on_chip_apic","sysenter","memory_type_range_registers","global_pages","machine_check_architecture","conditional_move","page_attribute_table","page_size_extension_36bit","serial_number","cache_line_flush","debug_store","thermal_power_management","mmx","fpu_save","sse","sse_2","self_snoop","max_apic_id_field","thermal_monitor","pending_break_enable","sse_3","carryless_multiply_64bit","debug_store_64bit","monitor","permission_qualified_debug_store","virtual_machine_extensions","safer_mode_extensions","enhanced_speedstep","thermal_monitor_2","supplemental_sse_3","l1_context_id","debug_interface_model_register","fused_multiply_add","compare_exchange_128bit","chipset_task_priority_control","monitor_debug_capabilities_register","process_context_ids","memory_mapped_prefetch","sse_4_1","sse_4_2","apic_x2","byte_swap_move","count_bits","apic_timestamp_deadline","aes","extended_state_save","extended_state_save_enabled","avx","float_16_conversion","random","set_on_chip_fpu","set_virtual_8086_extensions","set_debugging_extensions","set_page_size_extension","set_time_stamp_counter","set_model_registers","set_physical_address_extension","set_machine_check_exception","set_compare_exchange_64bit","set_on_chip_apic","set_sysenter","set_memory_type_range_registers","set_global_pages","set_machine_check_architecture","set_conditional_move","set_page_attribute_table","set_page_size_extension_36bit","set_serial_number","set_cache_line_flush","set_debug_store","set_thermal_power_management","set_mmx","set_fpu_save","set_sse","set_sse_2","set_self_snoop","set_max_apic_id_field","set_thermal_monitor","set_pending_break_enable","set_sse_3","set_carryless_multiply_64bit","set_debug_store_64bit","set_monitor","set_permission_qualified_debug_store","set_virtual_machine_extensions","set_safer_mode_extensions","set_enhanced_speedstep","set_thermal_monitor_2","set_supplemental_sse_3","set_l1_context_id","set_debug_interface_model_register","set_fused_multiply_add","set_compare_exchange_128bit","set_chipset_task_priority_control","set_monitor_debug_capabilities_register","set_process_context_ids","set_memory_mapped_prefetch","set_sse_4_1","set_sse_4_2","set_apic_x2","set_byte_swap_move","set_count_bits","set_apic_timestamp_deadline","set_aes","set_extended_state_save","set_extended_state_save_enabled","set_avx","set_float_16_conversion","set_random","get","ExtendedFeatures","get","AddressSpaceSizes","get","interrupt","InterruptVector","DivideError","DebugException","NonMaskable","Breakpoint","Overflow","Bound","InvalidOpcode","DeviceNotAvailable","DoubleFault","InvalidTaskSegment","SegmentNotPresent","StackFault","ProtectionFault","PageFault","FloatingPointError","AlignmentCheck","MachineCheck","SIMDFloatingPointError","VirtualizationException","ControlProtectionException","name","reserved","InterruptDescriptorTableRegister","limit","address","get","set","APICBaseRegister","enabled","x2_interface","bootstrap_processor","set_enabled","set_x2_interface","set_bootstrap_processor","DEFAULT_ADDRESS","address","set_address","get","set","io","in_u8","in_u16","in_u32","out_u8","out_u16","out_u32","paging","ControlRegister2","get","set","ControlRegister3","write_through","cache_disabled","process_context_id","set_write_through","set_cache_disabled","set_process_context_id","get","set","address","set_address","GenericPageTableEntry","present","writable","user","write_through","cache_disabled","accessed","no_execute","set_present","set_writable","set_user","set_write_through","set_cache_disabled","set_accessed","set_no_execute","fmt_fields","DirectPageTableEntry","dirty","attribute_table","global","protection_key","set_dirty","set_attribute_table","set_global","set_protection_key","fmt_fields","HybridPageTableEntry","is_page","set_is_page","fmt_fields","Level2PageTableEntry","Level1PageTableEntry","protection","GlobalDescriptorTableRegister","limit","address","get","set","set_with_segments","LocalDescriptorTableRegister","get","set","current_descriptor","TaskRegister","get","set","SegmentRegister","Code","Data","Stack","Extra","ExtraF","ExtraG","get","set","Selector","privilege_level","local","set_privilege_level","set_local","new","null","offset","set_offset","descriptor_address","DescriptorFlags","system_type","application_accessed","code_readable","data_writable","code_conforming","data_expand_down","is_code","is_application","privilege_level","present","code_mode_64","application_mode_32","set_system_type","set_application_accessed","set_code_readable","set_data_writable","set_code_conforming","set_data_expand_down","set_is_code","set_is_application","set_privilege_level","set_present","set_code_mode_64","set_application_mode_32","fmt_fields","is_gate","SystemDescriptorType","TaskStateAvailable16Bit","LocalDescriptorTable","TaskStateBusy16Bit","CallGate16Bit","TaskGate","InterruptGate16Bit","TrapGate16Bit","TaskStateAvailable","TaskStateBusy","CallGate","InterruptGate","TrapGate","name","is_gate","GenericDescriptor","flags","GenericDescriptorFlags","SegmentDescriptor","flags","LIMIT_MAX","new","address","set_address","limit","set_limit","SegmentDescriptorFlags","os_defined","granularity","set_os_defined","set_granularity","GateDescriptor","flags","new","selector","set_selector","entry_point_offset","set_entry_point_offset","GateDescriptorFlags","call_param_count","interrupt_stack_index","set_call_param_count","set_interrupt_stack_index","IOPermissionBitmap","MAX_SIZE","required_size","max_port_for_size","size","max_port","is_port_checked","set_port_checked","FlagRegister","carry","parity","aux_carry","zero","sign","trap","interrupt_enabled","direction","signed_overflow","io_privilege_level","nested_task","resume","virtual_8086_mode","alignment_check_or_access_control","virtual_interrupt_enabled","virtual_interrupt_pending","identification","set_carry","set_parity","set_aux_carry","set_zero","set_sign","set_trap","set_interrupt_enabled","set_direction","set_signed_overflow","set_io_privilege_level","set_nested_task","set_resume","set_virtual_8086_mode","set_alignment_check_or_access_control","set_virtual_interrupt_enabled","set_virtual_interrupt_pending","set_identification","get","set","ControlRegister0","paging","cache_disabled","cache_not_write_through","alignment_check_mask","write_protect","native_fpu_error","fpu_extension_type","task_switched_without_fpu_state","fpu_emulation","monitor_fpu","protected_mode","set_paging","set_cache_disabled","set_cache_not_write_through","set_alignment_check_mask","set_write_protect","set_native_fpu_error","set_fpu_extension_type","set_task_switched_without_fpu_state","set_fpu_emulation","set_monitor_fpu","set_protected_mode","get","set","clear_task_switched_without_fpu_state","ControlRegister4","virtual_8086_extensions","protected_virtual_interrupts","timestamp_disabled","debugging_extensions","page_size_extensions","physical_address_extension","machine_check_exception","global_pages","performance_counter","sse_and_fpu_save","simd_exceptions","restrict_user_mode_instructions","five_level_paging","virtual_machine_extensions","safer_mode_extensions","extended_base_registers","process_context_ids","extended_state_save","supervisor_execution_prevention","supervisor_access_prevention","user_protection_keys","control_flow_enforcement","supervisor_protection_keys","set_virtual_8086_extensions","set_protected_virtual_interrupts","set_timestamp_disabled","set_debugging_extensions","set_page_size_extensions","set_physical_address_extension","set_machine_check_exception","set_global_pages","set_performance_counter","set_sse_and_fpu_save","set_simd_exceptions","set_restrict_user_mode_instructions","set_five_level_paging","set_virtual_machine_extensions","set_safer_mode_extensions","set_extended_base_registers","set_process_context_ids","set_extended_state_save","set_supervisor_execution_prevention","set_supervisor_access_prevention","set_user_protection_keys","set_control_flow_enforcement","set_supervisor_protection_keys","get","set","ExtendedControlRegister0","fpu","sse","avx_256","mpx_bounds","mpx_bound_config_status","avx_512_opmask","avx_512","avx_512_extended","protection_key_rights","set_fpu","set_sse","set_avx_256","set_mpx_bounds","set_mpx_bound_config_status","set_avx_512_opmask","set_avx_512","set_avx_512_extended","set_protection_key_rights","get","set","jump","aarch64_exception_vector_table","arm_exception_vector_table","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","attribute_table","set_attribute_table","fmt_fields","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","hash","hash","hash","hash","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","name","name","name","name"],"q":["tartan_arch","tartan_arch::aarch64","tartan_arch::aarch64::float","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::aarch64","tartan_arch::aarch64::interrupt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::aarch64","","","","","","","","","","","tartan_arch","tartan_arch::arm","tartan_arch::arm::interrupt","","","","","","","","","","","","tartan_arch","tartan_arch::x86_64","tartan_arch::x86_64::protection","","","","","tartan_arch::x86_64","","","","","","","","","","","","","","","","tartan_arch","tartan_arch::x86","tartan_arch::x86::protection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch","tartan_arch::x86_common","tartan_arch::x86_common::features","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","tartan_arch::x86_common::interrupt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","tartan_arch::x86_common::io","","","","","","tartan_arch::x86_common","tartan_arch::x86_common::paging","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","tartan_arch::x86_common::protection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch","","","tartan_arch::aarch64::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::aarch64::interrupt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::aarch64","","","","","","","","","","","","","","tartan_arch::arm::interrupt","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_64::protection","","","","","","","tartan_arch::x86_64","","","","","","","","","","","","","","tartan_arch::x86::protection","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common::features","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common::interrupt","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common::paging","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common::protection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_arch::aarch64::float","","","","tartan_arch::aarch64::interrupt","","","","","tartan_arch::arm::interrupt","tartan_arch::x86_64::protection","tartan_arch::x86_64","","tartan_arch::x86::protection","","","","tartan_arch::x86_common::features","","","tartan_arch::x86_common::interrupt","","","tartan_arch::x86_common::paging","","","","tartan_arch::x86_common::protection","","","","","","","","","","tartan_arch::x86_common","","","","tartan_arch::aarch64::float","","","","","","","","tartan_arch::aarch64::interrupt","","","","","","","","tartan_arch::arm::interrupt","tartan_arch::x86_64::protection","","tartan_arch::x86_64","","","","tartan_arch::x86::protection","","","","","","","","tartan_arch::x86_common::features","","","","","","tartan_arch::x86_common::interrupt","","","","","","tartan_arch::x86_common::paging","","","","","","","","tartan_arch::x86_common::protection","","","","","","","","","","","","","","","","","","","","tartan_arch::x86_common","","","","","","","","tartan_arch::aarch64::float","tartan_arch::aarch64::interrupt","tartan_arch::x86_common::interrupt","tartan_arch::x86_common::protection","tartan_arch::aarch64::float","tartan_arch::aarch64::interrupt","tartan_arch::x86_common::interrupt","tartan_arch::x86_common::protection","tartan_arch::aarch64::float","tartan_arch::aarch64::interrupt","tartan_arch::x86_common::interrupt","tartan_arch::x86_common::protection","tartan_arch::aarch64::float","","","","tartan_arch::aarch64::interrupt","","","tartan_arch::aarch64","tartan_arch::x86_64","","tartan_arch::x86_common::features","","","tartan_arch::x86_common::interrupt","","tartan_arch::x86_common::paging","","","","tartan_arch::x86_common::protection","","","","","tartan_arch::x86_common","","","","tartan_arch::aarch64::float","","","","tartan_arch::aarch64::interrupt","","","","","tartan_arch::arm::interrupt","tartan_arch::x86_64::protection","tartan_arch::x86_64","","tartan_arch::x86::protection","","tartan_arch::x86_common::features","","","tartan_arch::x86_common::interrupt","","","tartan_arch::x86_common::paging","","","","tartan_arch::x86_common::protection","","","","","","","","","tartan_arch::x86_common","","","","tartan_arch::aarch64::float","","","","tartan_arch::aarch64::interrupt","","","tartan_arch::x86_64::protection","tartan_arch::x86_64","","tartan_arch::x86_common::features","","","tartan_arch::x86_common::interrupt","","","tartan_arch::x86_common::paging","","","","tartan_arch::x86_common::protection","","","","","","","","tartan_arch::x86_common","","","","tartan_arch::aarch64::float","tartan_arch::aarch64::interrupt","tartan_arch::x86_common::interrupt","tartan_arch::x86_common::protection"],"d":["Architecture-specific primitives for 64-bit Arm.","Floating-point control and status.","<code>FPCR</code>: Influences floating-point instruction execution.","<code>AHP</code>: Use an alternative format for half-precision floats …","<code>DN</code>: Always use the default encoding for NaN results. …","<code>FZ</code>: When a result would be denormal, yield zero instead. …","<code>RMode</code>: The IEEE 754 rounding mode in use.","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …","For each type of floating-point exception, defines …","<code>AHP</code>: Use an alternative format for half-precision floats …","<code>DN</code>: Always use the default encoding for NaN results. …","<code>FZ</code>: When a result would be denormal, yield zero instead. …","<code>RMode</code>: The IEEE 754 rounding mode in use.","<code>FZ16</code>: Counterpart to <code>flush_to_zero</code> for half-precision …","For each type of floating-point exception, defines …","Retrieve the current value of this register","Update the register to the given value.","<code>FPSR</code>: Indicates non-trapped floating-point exceptions.","Indicates any non-trapped exceptions that have been …","Indicates any non-trapped exceptions that have been …","Retrieve the current value of this register","Update the register to the given value.","Floating-point rounding mode, as defined by IEEE 754.","Round to the nearest number, with ties toward even …","Round toward positive infinity.","Round toward negative infinity.","Round toward zero (truncate).","The name of the enum variant in code, if one is defined …","Status/mask bits for each type of floating-point …","Exception and interrupt handling.","The kind of exception being handled: sync, IRQ, FIQ, …","A standard exception traceable to a specific instruction.","An external interrupt (IRQ).","An external interrupt through the higher-priority fast …","An internal error with the processor (SError).","The exception level that generated an exception.","Exception from current level using SP_EL0 (thread mode)","Exception from current level using current-level SP …","Exception from lower level (e.g., EL0) in 64-bit mode","Exception from lower level (e.g., EL0) in 32-bit mode","A single entry in the exception [<code>VectorTable</code>].","Exception vector table that contains code to handle …","<code>VBAR_ELx</code>: Contains the address of the [<code>VectorTable</code>] that …","Retrieve the current value of this register for the …","Update the register for the specified exception level …","<code>DAIF</code>: Controls masking of different kinds of exceptions.","<code>F</code>: Mask fast (FIQ) interrupts.","<code>I</code>: Mask regular (IRQ) interrupts.","<code>A</code>: Mask system error (SError) exceptions.","<code>D</code>: Mask debugging-related exceptions (breakpoints, …","<code>F</code>: Mask fast (FIQ) interrupts.","<code>I</code>: Mask regular (IRQ) interrupts.","<code>A</code>: Mask system error (SError) exceptions.","<code>D</code>: Mask debugging-related exceptions (breakpoints, …","Retrieve the current value of this register","Update the register to the given value.","<code>ESR_ELx</code>: Holds information about the cause of the …","<code>EC</code>: The class of exception that was triggered.","<code>IL</code>: When set, indicates that the instruction that …","<code>ISS</code>: Additional data about the exception in a format that …","<code>EC</code>: The class of exception that was triggered.","<code>IL</code>: When set, indicates that the instruction that …","<code>ISS</code>: Additional data about the exception in a format that …","Retrieve the current value of this register for the …","Update the register for the specified exception level …","Classifies different exception causes.","Tried to execute an undefined/unsupported opcode, or for …","Trapped execution of a wait instruction (<code>WFE</code>/<code>WFI</code>).","Trapped access to a FPU/vector register or instruction.","Tried to execute instructions after an illegal return.","Triggered a system call via the <code>SVC</code> instruction.","Trapped access to a system register or instruction.","Trapped access to a vector register or instruction.","Improperly authenticated pointer detected. Requires …","Instruction abort triggered at lower exception level.","Instruction abort triggered at current exception level.","Program counter not properly aligned.","Data abort triggered at lower exception level.","Data abort triggered at current exception level.","Stack pointer not properly aligned.","Trapped floating point exception.","System error (SError).","Breakpoint triggered at lower exception level.","Breakpoint triggered at current exception level.","Software step at lower exception level.","Software step at current exception level.","Watchpoint triggered at lower exception level.","Watchpoint triggered at current exception level.","Executed a <code>BRK</code> breakpoint instruction.","The name of the enum variant in code, if one is defined …","<code>EL</code>: Defines the privilege level of executing code. Higher …","<code>EL0</code>, used for unprivileged user code.","<code>EL1</code>, used for OS kernel code.","<code>EL2</code>, used for hypervisors in virtualized systems.","<code>EL3</code>, used for the secure manager.","Get the current exception level. Only accessible from EL1 …","Controls which stack pointer register is used when …","<code>T</code> (thread) mode: use the stack pointer register from EL0.","<code>H</code> (handler) mode: use the stack pointer register for the …","Get the value of the flag for the current exception …","Update the value of the flag for the current exception …","Architecture-specific primitives for 32-bit Arm.","Exception and interrupt handling.","The kind of exception being handled","","","","","","","","Exception vector table that contains code to handle each …","Contains the address of the [<code>VectorTable</code>] that the …","Retrieve the current value of this register for the …","Update the register for the specified exception level …","Architecture-specific primitives for 64-bit x86 …","Support for protected mode operation.","Stack and I/O permission map pointers that make up the …","Stack pointers to use when switching to privilege levels …","Stack pointers available for use when handling …","Offset from the start of this structure to start of the […","Create a header with zero-initialized stack pointers and …","<code>CR8</code>: System control register for controlling interrupts …","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …","<code>CR8.TPL</code>: Threshold for blocking low-priority interrupts. …","Retrieve the current value of this register","Update the register to the given value.","<code>IA32_EFER</code>: Model-specific register that controls features …","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.","<code>IA32_EFER.LME</code>: Support 64-bit mode.","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.","<code>IA32_EFER.SCE</code>: Support <code>SYSCALL</code>/<code>SYSRET</code> in 64-bit mode.","<code>IA32_EFER.LME</code>: Support 64-bit mode.","<code>IA32_EFER.LMA</code>: Indicates 64-bit mode is active. Read-only.","<code>IA32-EFER.NXE</code>: Support no-execute (NX) bit in page tables.","Retrieve the current value of this register","Update the register to the given value.","Architecture-specific primitives for 32-bit x86 …","Support for protected mode operation.","A task state segment (TSS) with fixed redirect and I/O …","Saved task data and pointer to bitmaps","I/O permission map and interrupt redirect map","Saved task state that makes up the most significant part …","Segment selector saved by the processor referencing the …","Stack pointer and segment for privilege levels 0–2.","Page table pointer from [<code>ControlRegister3</code>].","<code>EIP</code> value saved by the processor.","<code>EFLAGS</code> value saved by the processor.","<code>EAX</code> value saved by the processor.","<code>ECX</code> value saved by the processor.","<code>EDX</code> value saved by the processor.","<code>EBX</code> value saved by the processor.","<code>SP</code> value saved by the processor for privilege level 3.","<code>EBP</code> value saved by the processor.","<code>ESI</code> value saved by the processor.","<code>EDI</code> value saved by the processor.","<code>ES</code> value saved by the processor.","<code>CS</code> value saved by the processor.","<code>SS</code> value saved by the processor for privilege level 3.","<code>DS</code> value saved by the processor.","<code>FS</code> value saved by the processor.","<code>GS</code> value saved by the processor.","[<code>LocalDescriptorTableRegister</code>] value to load when …","Indicates that a debug exception should be raised when …","Offset from the start of this structure to start of the […","Pointer to the shadow stack.","Create a new zero-initialized header","Stack pointer and segment for a given privilege level","Stack pointer (<code>SP</code>) value for this privilege level.","Stack segment (<code>SS</code>) value for this privilege level.","Create a new zero-initialized stack pointer","I/O permission map and interrupt redirect map, which are …","Indicates which handler to use for software-triggered …","The [<code>IOPermissionBitmap</code>] for this task.","Architecture-specific primitives common to 32-bit and …","Processor feature detection with CPUID.","Low-level CPUID call. Writes the leaf/subleaf index given …","Get the maximum primary index value (EAX) supported for <em>…","Get the maximum primary index value (EAX) supported for <em>…","Primary feature list returned in <code>CPUID.01H:ECX+EDX</code>.","<code>FPU</code>: The processor has a built-in x87 floating-point unit","<code>VME</code>: Supports virtual real-mode extensions (VME) and …","<code>DE</code>: Supports breaking on I/O and on accessing debug …","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.","<code>TSC</code>: Supports reading the processor’s timestamp with …","<code>MSR</code>: Has model-specific registers which can be accessed …","<code>PAE</code>: Supports mapping virtual memory to physical …","<code>MCE</code>: Defines an exception (18) for reporting internal …","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.","<code>APIC</code>: The processor has a built-in advanced programmable …","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.","<code>MTRR</code>: Has memory type range registers.","<code>PGE</code>: Supports global pages, which are available in all …","<code>MCA</code>: Supports extended features for reporting internal …","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if …","<code>PAT</code>: Supports page attribute tables.","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …","<code>PSN</code>: Supports retrieving a processor serial number with …","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …","<code>DS</code>: Supports writing debug information to memory.","<code>ACPI</code>: Supports thermal monitoring and power management …","<code>MMX</code>: Supports MMX instructions.","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.","<code>SSE</code>: Supports SSE instructions.","<code>SSE2</code>: Supports SSE2 instructions.","The processor can snoop on its own cache line. This helps …","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …","<code>TM</code>: Has thermal monitor control circuitry (TCC).","<code>PBE</code>: Supports a pin notifying a stopped processor that an …","<code>SSE3</code>: Supports SSE3 instructions.","Supports carry-less multiplication of two 64-bit integers …","<code>DTES64</code>: Supports 64-bit addresses for the debug store.","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.","<code>DS-CPL</code>: Supports saving the permission level with data …","<code>VMX</code>: Supports virtual machine extensions.","<code>SMX</code>: Supports safer-mode extensions","<code>EIST</code>: Supports enhanced SpeedStep throttling.","Supports the TM2 thermal monitor interface.","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …","<code>SDBG</code>: Supports an MSR for chip debugging.","<code>FMA</code>: Supports fused multiply-add SSE instructions.","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …","Supports disabling xTPR task priority messages to the …","<code>PDCM</code>: Supports a model-specific register that lists …","<code>PCID</code>: Supports process-context IDs.","<code>DCA</code>: Supports prefetching memory-mapped data from a …","<code>SSE4_1</code>: Supports SSE4.1 instructions.","<code>SSE4_2</code>: Supports SSE4.2 instructions.","<code>x2APIC</code>: Supports the enhanced “x2” interface for the …","Supports byte swapping with the <code>MOVBE</code> instruction.","Supports counting the set bits in a value with the <code>POPCNT</code> …","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …","<code>AESNI</code>: Supports AES acceleration instructions.","<code>XSAVE</code>: Supports instructions for saving and restoring …","<code>OSXSAVE</code>: Reflects the value of […","<code>AVX</code>: Supports AVX instructions.","<code>F16C</code>: Supports conversion instructions for 16-bit floats.","Supports random number generation with the <code>RDRAND</code> …","<code>FPU</code>: The processor has a built-in x87 floating-point unit","<code>VME</code>: Supports virtual real-mode extensions (VME) and …","<code>DE</code>: Supports breaking on I/O and on accessing debug …","<code>PSE</code>: Supports 4MB virtual memory pages and the dirty flag.","<code>TSC</code>: Supports reading the processor’s timestamp with …","<code>MSR</code>: Has model-specific registers which can be accessed …","<code>PAE</code>: Supports mapping virtual memory to physical …","<code>MCE</code>: Defines an exception (18) for reporting internal …","<code>CX8</code>: Supports the 64-byte <code>CMPXCHG8B</code> atomic instruction.","<code>APIC</code>: The processor has a built-in advanced programmable …","<code>SEP</code>: Supports the <code>SYSENTER</code>/<code>SYSEXIT</code> instructions.","<code>MTRR</code>: Has memory type range registers.","<code>PGE</code>: Supports global pages, which are available in all …","<code>MCA</code>: Supports extended features for reporting internal …","<code>CMOV</code>: Supports the <code>CMOV</code> instruction and <code>FCMOV</code>/<code>FCOMI</code> if …","<code>PAT</code>: Supports page attribute tables.","<code>PSE-36</code>: Supports 4MB virtual memory pages that can map to …","<code>PSN</code>: Supports retrieving a processor serial number with …","<code>CLFSH</code>: Supports flushing a cache line with the <code>CLFLUSH</code> …","<code>DS</code>: Supports writing debug information to memory.","<code>ACPI</code>: Supports thermal monitoring and power management …","<code>MMX</code>: Supports MMX instructions.","<code>FXSAVE</code>: Supports managing FPU state with <code>FXSAVE</code>/<code>FXRSTOR</code>.","<code>SSE</code>: Supports SSE instructions.","<code>SSE2</code>: Supports SSE2 instructions.","The processor can snoop on its own cache line. This helps …","<code>HTT</code>: Indicates that the number of reserved APIC IDs is …","<code>TM</code>: Has thermal monitor control circuitry (TCC).","<code>PBE</code>: Supports a pin notifying a stopped processor that an …","<code>SSE3</code>: Supports SSE3 instructions.","Supports carry-less multiplication of two 64-bit integers …","<code>DTES64</code>: Supports 64-bit addresses for the debug store.","<code>MONITOR</code>: Supports the <code>MONITOR</code>/<code>MWAIT</code> instructions.","<code>DS-CPL</code>: Supports saving the permission level with data …","<code>VMX</code>: Supports virtual machine extensions.","<code>SMX</code>: Supports safer-mode extensions","<code>EIST</code>: Supports enhanced SpeedStep throttling.","Supports the TM2 thermal monitor interface.","<code>SSSE3</code>: Supports Supplemental SSE3 (SSSE3) instructions.","<code>CNXT-ID</code>: Supports setting the L1 cache to adaptive or …","<code>SDBG</code>: Supports an MSR for chip debugging.","<code>FMA</code>: Supports fused multiply-add SSE instructions.","<code>CMPXCHG16B</code>: Supports the 128-bit <code>CMPXCHG16B</code> atomic …","Supports disabling xTPR task priority messages to the …","<code>PDCM</code>: Supports a model-specific register that lists …","<code>PCID</code>: Supports process-context IDs.","<code>DCA</code>: Supports prefetching memory-mapped data from a …","<code>SSE4_1</code>: Supports SSE4.1 instructions.","<code>SSE4_2</code>: Supports SSE4.2 instructions.","<code>x2APIC</code>: Supports the enhanced “x2” interface for the …","Supports byte swapping with the <code>MOVBE</code> instruction.","Supports counting the set bits in a value with the <code>POPCNT</code> …","<code>TSC-Deadline</code>: Supports one-shot interrupts with the APIC …","<code>AESNI</code>: Supports AES acceleration instructions.","<code>XSAVE</code>: Supports instructions for saving and restoring …","<code>OSXSAVE</code>: Reflects the value of […","<code>AVX</code>: Supports AVX instructions.","<code>F16C</code>: Supports conversion instructions for 16-bit floats.","Supports random number generation with the <code>RDRAND</code> …","Retrieve the feature list from the processor using the …","Features applicable to 64-bit processors, returned in …","Retrieve the extended feature list from the processor …","Indicates the processor’s maximum supported physical …","Retrieve the supported address space sizes from the …","Support for managing interrupts.","An interrupt/exception number.","<code>#DE</code>: Division by zero or overflow in division.","<code>#DB</code>: Breakpoints or other debugging-related traps/faults.","<code>NMI</code>: Severe external interrupt that cannot be ignored.","<code>#BP</code>: Breakpoint via <code>INT3</code> instruction.","<code>#OF</code>: Overflow condition was detected with <code>INTO</code> …","<code>#BR</code>: Out-of-bounds index detected with <code>BOUND</code> instruction.","<code>#UD</code>: Unrecognized or reserved instruction opcode.","<code>#NM</code>: Tried to execute FPU instruction with no coprocessor …","<code>#DF</code>: A fault was triggered while handling another …","<code>#TS</code>: An error was found in the TSS while task switching.","<code>#NP</code>: Tried to use a segment without a descriptor defined. …","<code>#SS</code>: The stack overflowed its segment or the segment was …","<code>#GP</code>: Memory protection or other miscellaneous error.","<code>#PF</code>: Tried to load a page that was not present, or used a …","<code>#MF</code>: Unmasked floating-point error that was <em>not</em> part of a …","<code>#AC</code>: Improperly aligned memory access in user mode while …","<code>#MC</code>: Internal processor/bus error.","<code>#XM</code>: Unmasked floating-point error during SIMD operation.","<code>#VE</code>: Improper use of virtualization extensions.","<code>#CP</code>: Improper branching detected by control-flow guard.","The name of the enum variant in code, if one is defined …","Indicates that this is interrupt vector is reserved by …","<code>IDTR</code>: Contains the memory range of the interrupt …","The inclusive maximum address offset (i.e., size - 1) of …","Base address of the descriptor table.","Retrieve the current value of this register","Update the register to the given value.","<code>IA32_APIC_BASE</code>: A model-specific register that allows …","Can be cleared to disable the APIC. However, it cannot be …","Enable the APIC’s","Indicates that this core was designated as the bootstrap …","Can be cleared to disable the APIC. However, it cannot be …","Enable the APIC’s","Indicates that this core was designated as the bootstrap …","The default APIC base address when the processor is reset.","Base address of the APIC’s registers.","Update the base address of the APIC’s registers.","Retrieve the current value of this register","Update the register to the given value.","Access to I/O space","Read an 8-bit value from the port at the given address in …","Read a 16-bit value from the port at the given address in …","Read a 32-bit value from the port at the given address in …","Write an 8-bit value to the port at the given address in …","Write a 16-bit value to the port at the given address in …","Write a 16-bit value to the port at the given address in …","Support for virtual memory paging.","<code>CR2</code>: Contains the address that triggered a page fault.","Retrieve the current value of this register","Update the register to the given value.","<code>CR3</code>: System control register that contains the top-level …","<code>CR3.PWT</code>: Enables write-through caching for the top-level …","<code>CR3.PCD</code>: Disables caching for the top-level page table.","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …","<code>CR3.PWT</code>: Enables write-through caching for the top-level …","<code>CR3.PCD</code>: Disables caching for the top-level page table.","<code>CR4.PCIDE</code>: The process-context identifier (PCID) …","Retrieve the current value of this register","Update the register to the given value.","Get the address of the top-level page table.","Set the address of the top-level page table.","An entry in a page table at any level.","<code>P</code>: Indicates that this entry is mapped. Otherwise the …","<code>R/W</code>: Allows writes to this memory region.","<code>U/S</code>: Allows access to this memory region from permission …","<code>PWT</code>: Enables write-through caching for this memory region.","<code>PCD</code>: Disables caching for this memory region.","<code>A</code>: Set by the processor when an instruction accesses the …","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …","<code>P</code>: Indicates that this entry is mapped. Otherwise the …","<code>R/W</code>: Allows writes to this memory region.","<code>U/S</code>: Allows access to this memory region from permission …","<code>PWT</code>: Enables write-through caching for this memory region.","<code>PCD</code>: Disables caching for this memory region.","<code>A</code>: Set by the processor when an instruction accesses the …","<code>XD</code>/<code>NX</code>: Prevent the processor from executing any …","Print this object’s bitfield values. Helper method for …","An page table entry (any level) that directly maps a page.","<code>D</code>: Set by the processor when an instruction modifies the …","<code>PAT</code>: Used to associate this page with a page attribute …","<code>G</code>: Indicates that this is a global page shared by all …","The protection key that applies to this memory region.","<code>D</code>: Set by the processor when an instruction modifies the …","<code>PAT</code>: Used to associate this page with a page attribute …","<code>G</code>: Indicates that this is a global page shared by all …","The protection key that applies to this memory region.","Print this object’s bitfield values. Helper method for …","A page table entry (any level) that either directly maps …","<code>PS</code>: Indicates that this entry directly maps a page. …","<code>PS</code>: Indicates that this entry directly maps a page. …","Print this object’s bitfield values. Helper method for …","Second-level page table (page directory) entry that …","Bottom-level page table entry that maps a single 4KB page.","Support for protected mode operation.","<code>GDTR</code>: Points to the memory range of the global descriptor …","The inclusive maximum address offset (i.e., size - 1) of …","Base address of the descriptor table","Retrieve the current value of this register","Update the register to the given value.","Update the global descriptor table pointer and all …","<code>LDTR</code>: Contains a [<code>Selector</code>] referencing a […","Retrieve the current value of this register","Update the register with the value in this struct.","Get a pointer to the [<code>SegmentDescriptor</code>] for the …","<code>TR</code>: Contains a [<code>Selector</code>] referencing a [<code>SegmentDescriptor</code>…","Retrieve the current value of this register","Update the register with the provided selector value.","Standard segment registers (<code>CS</code>, <code>DS</code>, <code>SS</code>, etc.), which …","<code>CS</code> register, which controls instruction loading","<code>DS</code> register, which controls the default segment for …","<code>SS</code> segment register, which controls the location of the …","<code>ES</code> segment register, which can be used as an additional …","<code>FS</code> segment register, which can be used as an additional …","<code>GS</code> segment register, which can be used as an additional …","Retrieve the current value of this register","Update the register with the provided selector value.","A reference to an entry in a segment descriptor table.","<code>RPL</code>: The privilege level “requested” when accessing …","Indicates that this selector references a descriptor in …","<code>RPL</code>: The privilege level “requested” when accessing …","Indicates that this selector references a descriptor in …","Create a new selector with the given field values","Create a null selector","The offset of the referenced segment entry in the …","Update the offset of the referenced entry in the …","Calculate the address of the descriptor referenced by …","Settings common to [<code>SegmentDescriptor</code>]s and […","If this is a system descriptor, indicates which type.","The processor sets this bit whenever a segment register …","If this is a code descriptor, indicates that the segment …","If this is a data descriptor, indicates that this segment …","If this is a code descriptor, indicates that this segment …","If this is a data descriptor, indicates that the segment …","Indicates whether this is a code (true) or data (false) …","<code>S</code>: Indicates that this is an application section …","<code>DPL</code>: The privilege level associated with the segment.","<code>P</code>: Indicates that the segment is defined.","<code>L</code>: If this is a code segment, indicates that it should be …","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …","If this is a system descriptor, indicates which type.","The processor sets this bit whenever a segment register …","If this is a code descriptor, indicates that the segment …","If this is a data descriptor, indicates that this segment …","If this is a code descriptor, indicates that this segment …","If this is a data descriptor, indicates that the segment …","Indicates whether this is a code (true) or data (false) …","<code>S</code>: Indicates that this is an application section …","<code>DPL</code>: The privilege level associated with the segment.","<code>P</code>: Indicates that the segment is defined.","<code>L</code>: If this is a code segment, indicates that it should be …","<code>D</code>/<code>B</code>: Indicates that the segment uses 32-bit mode. …","Print this object’s bitfield values. Helper method for …","Indicates that this is a [<code>GateDescriptor</code>].","Discriminate types of segment descriptors that are not …","A [<code>SegmentDescriptor</code>] for a 16-bit task state segment …","A [<code>SegmentDescriptor</code>] for a segment that contains a local …","A [<code>SegmentDescriptor</code>] for a 16-bit task state segment …","A [<code>GateDescriptor</code>] for a call to 16-bit code.","A [<code>GateDescriptor</code>] for task switching.","A [<code>GateDescriptor</code>] for a 16-bit interrupt handler.","A [<code>GateDescriptor</code>] for a 16-bit trap handler.","A [<code>SegmentDescriptor</code>] for a 32/64-bit task state segment …","A [<code>SegmentDescriptor</code>] for a 32/64-bit task state segment …","A [<code>GateDescriptor</code>] for a call to 32/64-bit code.","A [<code>GateDescriptor</code>] for a 32/64-bit interrupt handler.","A [<code>GateDescriptor</code>] for a 32/64-bit interrupt handler.","The name of the enum variant in code, if one is defined …","Indicates that this is a [<code>GateDescriptor</code>].","Generic entry in a global/local/interrupt descriptor …","Common descriptor settings.","Settings for [<code>GenericDescriptor</code>]s.","An entry in a segment descriptor table that defines a new …","Common segment descriptor settings.","The maximum supported value of the <code>limit</code> field (20 bits).","Create a zero-initialized descriptor","Base virtual address of the segment, to which offsets are …","Update the base address.","The “limit” of the segment, which is a maximum or …","Update the segment limit.","Settings for [<code>SegmentDescriptor</code>]s.","<code>AVL</code>: Ignored bit that can be used by the operating system.","<code>G</code>: Indicates that the segment limit is in units of 4KB. …","<code>AVL</code>: Ignored bit that can be used by the operating system.","<code>G</code>: Indicates that the segment limit is in units of 4KB. …","An entry in a segment descriptor table that points to an …","Common gate descriptor settings.","Create a zero-initialized descriptor","Selector that points to the code or task state segment to …","Update the selector pointing to the segment to be …","Offset of the entry point in code segment referenced by …","Update the offset of the entry point within the …","Settings for [<code>GateDescriptor</code>]s.","Number of stack parameters to copy if the code segment …","One-based index of the <code>interrupt_stack</code> pointer to use …","Number of stack parameters to copy if the code segment …","One-based index of the <code>interrupt_stack</code> pointer to use …","Bitmap that controls which I/O port addresses are covered …","Size in bytes required to map all I/O ports","Calculate the size in bytes of a map that has bits for …","Calculate the last I/O port that is covered by a map of …","The number of bytes in this structure.","The last I/O port that is covered by this map. The bits …","Get the value in this bitmap that indicates whether the …","Set the value in this bitmap that indicates whether the …","<code>EFLAGS</code>/<code>RFLAGS</code>: General flags, including control, status, …","<code>CF</code>: Indicates an arithmetic instruction generated a …","<code>PF</code>: Indicates that the least-significant byte of the …","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …","<code>ZF</code>: Indicates that the result of an instruction is zero.","<code>SF</code>: Indicates that the most-significant bit of a result …","<code>TF</code>: Enable single-step debugging.","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …","<code>DF</code>: String instructions work on addresses high-to-low …","<code>OF</code>: Indicates that the result overflowed for signed …","<code>IOPL</code>: Sets the privilege threshold for a task to access …","<code>NT</code>: Indicates that the processor should switch back to a …","<code>RF</code>: Disable instruction breakpoints.","<code>VM</code>: Enable virtual real mode.","<code>AC</code>: Enable strict alignment checks for memory accesses in …","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.","<code>CF</code>: Indicates an arithmetic instruction generated a …","<code>PF</code>: Indicates that the least-significant byte of the …","<code>AF</code>: Indicates a carry/borrow/overflow out of bit 3 in …","<code>ZF</code>: Indicates that the result of an instruction is zero.","<code>SF</code>: Indicates that the most-significant bit of a result …","<code>TF</code>: Enable single-step debugging.","<code>IF</code>: Enable non-maskable interrupts. Non-maskable …","<code>DF</code>: String instructions work on addresses high-to-low …","<code>OF</code>: Indicates that the result overflowed for signed …","<code>IOPL</code>: Sets the privilege threshold for a task to access …","<code>NT</code>: Indicates that the processor should switch back to a …","<code>RF</code>: Disable instruction breakpoints.","<code>VM</code>: Enable virtual real mode.","<code>AC</code>: Enable strict alignment checks for memory accesses in …","<code>VIF</code>: Virtual counterpart to the <code>interrupt_enabled</code> flag, …","<code>VIP</code>: Indicates an interrupt is pending for VME or PVI.","<code>ID</code>: Indicates <code>CPUID</code> support when the flag is modifiable.","Retrieve the current value of the <code>EFLAGS</code> register.","Update the <code>EFLAGS</code> register with the given value, as …","<code>CR0</code>: System control register with flags affecting …","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.","<code>CR0.CD</code>: Disable all memory caching.","<code>CR0.NW</code>: Disable write-back/write-through caching.","<code>CR0.AM</code>: Enables strict alignment checks for memory …","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …","<code>CR0.TS</code>: Set by processor when task was switched but FPU …","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. …","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code>…","Enable protected mode. Does not enable paging on its own. …","<code>CR0.PG</code>: Enable paging. Requires <code>protected_mode</code>.","<code>CR0.CD</code>: Disable all memory caching.","<code>CR0.NW</code>: Disable write-back/write-through caching.","<code>CR0.AM</code>: Enables strict alignment checks for memory …","<code>CR0.WP</code>: Enforce read-only pages even in privilege levels …","<code>CR0.NE</code>: Use internal error mechanism for FPU errors, …","<code>CR0.ET</code>: On 386/486, 387 FPU instructions are supported if …","<code>CR0.TS</code>: Set by processor when task was switched but FPU …","<code>CR0.EM</code>: Trigger an exception on all FPU instructions. …","<code>CR0.MP</code>: Enable exception behavior described for the <code>CR0.TS</code>…","Enable protected mode. Does not enable paging on its own. …","Retrieve the current value of this register","Update the register to the given value.","Directly clear the <code>task_switched_without_fpu_state</code> flag in…","<code>CR4</code>: Miscellaneous system control flags.","<code>CR4.VME</code>: Enable interrupts and exception handling in …","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.","<code>CR4.TSD</code>: Disable access to processor timestamp counter …","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit …","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …","<code>CR4.MCE</code>: Enable machine-check exception.","<code>CR4.PGE</code>: Enable global pages, which are shared across …","<code>CR4.PCE</code>: Allow access to performance monitoring counter …","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging …","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> …","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …","<code>CR4.VME</code>: Enable interrupts and exception handling in …","<code>CR4.PVI</code>: Enable virtual interrupts in protected mode.","<code>CR4.TSD</code>: Disable access to processor timestamp counter …","<code>CR4.DE</code>: Enable newer debug register scheme where <code>DR4</code> and …","<code>CR4.PSE</code>: Support large pages (4MB). Applies to 32-bit …","<code>CR4.PAE</code>: Enable pages to map to physical addresses larger …","<code>CR4.MCE</code>: Enable machine-check exception.","<code>CR4.PGE</code>: Enable global pages, which are shared across …","<code>CR4.PCE</code>: Allow access to performance monitoring counter …","<code>CR4.OSFXSR</code>: Enable the <code>FXSAVE</code>/<code>FXRSTOR</code> and SSE …","<code>CR4.OSXMMEXCPT</code>: Enable unmasked SIMD floating-point …","<code>CR4.UMIP</code>: Prevent access to instructions that allow reads …","<code>CR4.LA57</code>: Support 57-bit addresses using 5-level paging …","<code>CR4.VMX</code> (<strong>Intel-only</strong>): Enable virtual machine extensions.","<code>CR4.SME</code> (<strong>Intel-only</strong>): Enable safer-mode extensions.","<code>CR4.FSGSBASE</code>: Enable instructions to load/store the <code>FS</code> …","<code>CR4.PCIDE</code>: Enable process-context identifiers (PCID) in …","<code>CR4.OSXSAVE</code>: Enable instructions for saving and restoring …","<code>CR4.SMEP</code>: Enable execution prevention in privilege levels …","<code>CR4.SMAP</code>: Enable access prevention in privilege levels …","<code>CR4.PKE</code>: Use page protection keys in 64-bit mode to …","<code>CR4.CET</code> (<strong>Intel-only</strong>): Enable control-flow enforcement …","<code>CR4.PKS</code> (<strong>Intel-only</strong>): Use page protection keys in 64-bit …","Retrieve the current value of this register","Update the register to the given value.","<code>XCR0</code>: System control flags that indicate OS support for …","<code>XCR0.X87</code>: Hardcoded to 1.","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …","<code>XCR0.PKRU</code>: Manage protection key rights registers with …","<code>XCR0.X87</code>: Hardcoded to 1.","<code>XCR0.SSE</code>: Manage SSE state with <code>XSAVE</code>, including the <code>XMM</code> …","<code>XCR0.AVX</code>: Manage 256-bit AVX state in upper halves of the …","<code>XCR0.BNDREG</code>: Manage MPX bounds registers with <code>XSAVE</code>.","<code>XCR0.BNDCSR</code>: Manage MPX config and status registers with …","<code>XCR0.OPMASK</code>: Manage AVX-512 opmask registers with <code>XSAVE</code>.","<code>XCR0.ZMM_Hi256</code>: Manage 512-bit AVX state in the upper …","<code>XCR0.Hi16_ZMM</code>: Manage AVX-512 state in <code>ZMM16</code>–<code>ZMM31</code> with …","<code>XCR0.PKRU</code>: Manage protection key rights registers with …","Retrieve the current value of this register","Update the register to the given value.","Unconditionally transfer control to the instruction at …","Define an exception vector table that forwards all …","Define an exception vector table that forwards all …rint this object’s bitfield values. Helper method for …i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,3,0,0,0,4,4,4,4,0,5,5,5,5,0,0,0,6,6,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,0,11,11,11,11,0,0,0,12,12,12,12,12,12,12,0,0,13,13,0,0,0,14,14,14,14,0,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,0,0,0,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,0,20,20,0,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,0,23,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,27,27,0,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,0,31,31,31,0,0,0,0,32,32,32,32,32,0,33,33,33,0,34,34,0,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,0,0,40,40,40,40,40,40,40,0,41,41,41,41,0,42,42,42,42,42,42,0,43,43,43,43,0,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,49,49,49,49,49,49,49,4,4,4,4,4,4,4,5,5,5,5,5,5,5,50,50,50,50,50,50,50,51,51,51,51,51,51,51,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,52,52,52,52,52,52,52,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,38,38,38,38,38,38,38,39,39,39,39,39,39,39,55,55,55,55,55,55,55,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,1,2,3,49,4,5,7,8,9,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,53,54,32,36,38,39,55,40,41,42,43,44,45,46,47,48,1,1,2,2,3,3,49,49,4,5,7,7,8,8,9,9,12,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,53,53,54,54,32,32,36,36,38,38,39,39,55,55,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,3,9,24,38,3,9,24,38,3,9,24,38,1,2,3,49,7,8,9,10,15,16,21,22,23,24,26,27,28,53,54,36,38,55,41,43,45,46,47,48,1,2,3,49,4,5,7,8,9,12,14,15,16,18,19,21,22,23,24,25,26,27,28,53,54,32,36,38,39,55,40,41,42,43,45,46,47,48,1,2,3,49,7,8,9,14,15,16,21,22,23,24,25,26,27,28,53,54,32,36,38,55,40,41,42,43,45,46,47,48,3,9,24,38],"f":[null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["roundingmode",3]],[[],["bool",15]],[[],["exceptions",3]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["roundingmode",3]]],[[["bool",15]]],[[["exceptions",3]]],[[]],[[]],null,[[],["exceptions",3]],[[["exceptions",3]]],[[]],[[]],null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["exceptionlevel",4]]],[[["exceptionlevel",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],null,[[],["class",3]],[[],["bool",15]],[[],["u32",15]],[[["class",3]]],[[["bool",15]]],[[["u32",15]]],[[["exceptionlevel",4]]],[[["exceptionlevel",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,[[]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,[[]],null,[[],["u8",15]],[[["u8",15]]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[]],null,null,null,null,null,[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],[[],["bool",15]],null,null,null,[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,[[],["usize",15]],[[["usize",15]]],[[]],[[]],null,[[["u16",15]],["u8",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u32",15]],[[["u16",15],["u8",15]]],[[["u16",15]]],[[["u32",15],["u16",15]]],null,null,[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["u16",15]],[[["bool",15]]],[[["bool",15]]],[[["u16",15]]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["debugstruct",3]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["debugstruct",3]]],null,[[],["bool",15]],[[["bool",15]]],[[["debugstruct",3]]],null,null,null,null,null,null,[[]],[[]],[[["selector",3]]],null,[[],["selector",3]],[[["selector",3]]],[[]],null,[[],["selector",3]],[[["selector",3]]],null,null,null,null,null,null,null,[[],["selector",3]],[[["selector",3]]],null,[[],["u8",15]],[[],["bool",15]],[[["u8",15]]],[[["bool",15]]],[[["bool",15],["u16",15],["u8",15]]],[[]],[[],["u16",15]],[[["u16",15]]],[[],["usize",15]],null,[[],["systemdescriptortype",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["systemdescriptortype",3]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["debugstruct",3]]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],[[],["bool",15]],null,null,null,null,null,null,[[]],[[],["usize",15]],[[["usize",15]]],[[],["u32",15]],[[["u32",15]]],null,[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],null,null,[[]],[[],["selector",3]],[[["selector",3]]],[[],["usize",15]],[[["usize",15]]],null,[[],["u8",15]],[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],null,null,[[["u16",15]],["usize",15]],[[["usize",15]],[["nonzerou16",3],["option",4]]],[[],["usize",15]],[[],[["nonzerou16",3],["option",4]]],[[["u16",15]],["bool",15]],[[["bool",15],["u16",15]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[["usize",15]]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["bool",15]]],[[["debugstruct",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["controlregister",3]],["bool",15]],[[["controlregister",3]],["bool",15]],[[["statusregister",3]],["bool",15]],[[["statusregister",3]],["bool",15]],[[["roundingmode",3]],["bool",15]],[[["roundingmode",3]],["bool",15]],[[["exceptions",3]],["bool",15]],[[["exceptions",3]],["bool",15]],[[["kind",4]],["bool",15]],[[["source",4]],["bool",15]],[[["maskregister",3]],["bool",15]],[[["maskregister",3]],["bool",15]],[[["syndromeregister",3]],["bool",15]],[[["syndromeregister",3]],["bool",15]],[[["class",3]],["bool",15]],[[["class",3]],["bool",15]],[[["kind",4]],["bool",15]],[[["taskstatesegmentheader",3]],["bool",15]],[[["taskstatesegmentheader",3]],["bool",15]],[[["controlregister8",3]],["bool",15]],[[["controlregister8",3]],["bool",15]],[[["extendedfeatureenableregister",3]],["bool",15]],[[["extendedfeatureenableregister",3]],["bool",15]],[[["basictaskstatesegment",3]],["bool",15]],[[["basictaskstatesegment",3]],["bool",15]],[[["taskstatesegmentheader",3]],["bool",15]],[[["taskstatesegmentheader",3]],["bool",15]],[[["privilegedstack",3]],["bool",15]],[[["privilegedstack",3]],["bool",15]],[[["taskstatesegmentbitmaps",3]],["bool",15]],[[["taskstatesegmentbitmaps",3]],["bool",15]],[[["basicfeatures",3]],["bool",15]],[[["basicfeatures",3]],["bool",15]],[[["extendedfeatures",3]],["bool",15]],[[["extendedfeatures",3]],["bool",15]],[[["addressspacesizes",3]],["bool",15]],[[["addressspacesizes",3]],["bool",15]],[[["interruptvector",3]],["bool",15]],[[["interruptvector",3]],["bool",15]],[[["interruptdescriptortableregister",3]],["bool",15]],[[["interruptdescriptortableregister",3]],["bool",15]],[[["apicbaseregister",3]],["bool",15]],[[["apicbaseregister",3]],["bool",15]],[[["controlregister2",3]],["bool",15]],[[["controlregister2",3]],["bool",15]],[[["controlregister3",3]],["bool",15]],[[["controlregister3",3]],["bool",15]],[[["level2pagetableentry",3]],["bool",15]],[[["level2pagetableentry",3]],["bool",15]],[[["level1pagetableentry",3]],["bool",15]],[[["level1pagetableentry",3]],["bool",15]],[[["globaldescriptortableregister",3]],["bool",15]],[[["globaldescriptortableregister",3]],["bool",15]],[[["selector",3]],["bool",15]],[[["selector",3]],["bool",15]],[[["systemdescriptortype",3]],["bool",15]],[[["systemdescriptortype",3]],["bool",15]],[[["genericdescriptor",3]],["bool",15]],[[["genericdescriptor",3]],["bool",15]],[[["genericdescriptorflags",3]],["bool",15]],[[["genericdescriptorflags",3]],["bool",15]],[[["segmentdescriptor",3]],["bool",15]],[[["segmentdescriptor",3]],["bool",15]],[[["segmentdescriptorflags",3]],["bool",15]],[[["segmentdescriptorflags",3]],["bool",15]],[[["gatedescriptor",3]],["bool",15]],[[["gatedescriptor",3]],["bool",15]],[[["gatedescriptorflags",3]],["bool",15]],[[["gatedescriptorflags",3]],["bool",15]],[[["iopermissionbitmap",3]],["bool",15]],[[["iopermissionbitmap",3]],["bool",15]],[[["flagregister",3]],["bool",15]],[[["flagregister",3]],["bool",15]],[[["controlregister0",3]],["bool",15]],[[["controlregister0",3]],["bool",15]],[[["controlregister4",3]],["bool",15]],[[["controlregister4",3]],["bool",15]],[[["extendedcontrolregister0",3]],["bool",15]],[[["extendedcontrolregister0",3]],["bool",15]],[[["roundingmode",3]],["ordering",4]],[[["class",3]],["ordering",4]],[[["interruptvector",3]],["ordering",4]],[[["systemdescriptortype",3]],["ordering",4]],[[["roundingmode",3]],[["option",4],["ordering",4]]],[[["class",3]],[["option",4],["ordering",4]]],[[["interruptvector",3]],[["option",4],["ordering",4]]],[[["systemdescriptortype",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u8",15]]],[[["u8",15]]],[[["u64",15]]],[[["u64",15]]],[[["u8",15]]],[[["u8",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u8",15]]],[[["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[],["controlregister",3]],[[],["statusregister",3]],[[],["roundingmode",3]],[[],["exceptions",3]],[[],["kind",4]],[[],["source",4]],[[],["maskregister",3]],[[],["syndromeregister",3]],[[],["class",3]],[[],["kind",4]],[[],["taskstatesegmentheader",3]],[[],["controlregister8",3]],[[],["extendedfeatureenableregister",3]],[[],["taskstatesegmentheader",3]],[[],["privilegedstack",3]],[[],["basicfeatures",3]],[[],["extendedfeatures",3]],[[],["addressspacesizes",3]],[[],["interruptvector",3]],[[],["interruptdescriptortableregister",3]],[[],["apicbaseregister",3]],[[],["controlregister2",3]],[[],["controlregister3",3]],[[],["level2pagetableentry",3]],[[],["level1pagetableentry",3]],[[],["globaldescriptortableregister",3]],[[],["selector",3]],[[],["systemdescriptortype",3]],[[],["genericdescriptor",3]],[[],["genericdescriptorflags",3]],[[],["segmentdescriptor",3]],[[],["segmentdescriptorflags",3]],[[],["gatedescriptor",3]],[[],["gatedescriptorflags",3]],[[],["flagregister",3]],[[],["controlregister0",3]],[[],["controlregister4",3]],[[],["extendedcontrolregister0",3]],[[],["controlregister",3]],[[],["statusregister",3]],[[],["roundingmode",3]],[[],["exceptions",3]],[[],["maskregister",3]],[[],["syndromeregister",3]],[[],["class",3]],[[]],[[],["controlregister8",3]],[[],["extendedfeatureenableregister",3]],[[],["basicfeatures",3]],[[],["extendedfeatures",3]],[[],["addressspacesizes",3]],[[],["interruptvector",3]],[[],["interruptdescriptortableregister",3]],[[],["apicbaseregister",3]],[[],["controlregister2",3]],[[],["controlregister3",3]],[[],["level2pagetableentry",3]],[[],["level1pagetableentry",3]],[[],["globaldescriptortableregister",3]],[[],["selector",3]],[[],["systemdescriptortype",3]],[[],["genericdescriptorflags",3]],[[]],[[],["segmentdescriptorflags",3]],[[]],[[],["gatedescriptorflags",3]],[[],["flagregister",3]],[[],["controlregister0",3]],[[],["controlregister4",3]],[[],["extendedcontrolregister0",3]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]]],"p":[[3,"ControlRegister"],[3,"StatusRegister"],[3,"RoundingMode"],[4,"Kind"],[4,"Source"],[4,"VectorBaseAddressRegister"],[3,"MaskRegister"],[3,"SyndromeRegister"],[3,"Class"],[4,"ExceptionLevel"],[4,"StackPointerSelect"],[4,"Kind"],[4,"VectorBaseAddressRegister"],[3,"TaskStateSegmentHeader"],[3,"ControlRegister8"],[3,"ExtendedFeatureEnableRegister"],[3,"BasicTaskStateSegment"],[3,"TaskStateSegmentHeader"],[3,"PrivilegedStack"],[3,"TaskStateSegmentBitmaps"],[3,"BasicFeatures"],[3,"ExtendedFeatures"],[3,"AddressSpaceSizes"],[3,"InterruptVector"],[3,"InterruptDescriptorTableRegister"],[3,"APICBaseRegister"],[3,"ControlRegister2"],[3,"ControlRegister3"],[8,"GenericPageTableEntry"],[8,"DirectPageTableEntry"],[8,"HybridPageTableEntry"],[3,"GlobalDescriptorTableRegister"],[4,"LocalDescriptorTableRegister"],[4,"TaskRegister"],[4,"SegmentRegister"],[3,"Selector"],[8,"DescriptorFlags"],[3,"SystemDescriptorType"],[3,"GenericDescriptor"],[3,"SegmentDescriptor"],[3,"SegmentDescriptorFlags"],[3,"GateDescriptor"],[3,"GateDescriptorFlags"],[3,"IOPermissionBitmap"],[3,"FlagRegister"],[3,"ControlRegister0"],[3,"ControlRegister4"],[3,"ExtendedControlRegister0"],[3,"Exceptions"],[3,"VectorEntry"],[3,"VectorTable"],[3,"VectorTable"],[3,"Level2PageTableEntry"],[3,"Level1PageTableEntry"],[3,"GenericDescriptorFlags"]]},\
"tartan_bitfield":{"doc":"Define structures that wrap a number with accessors for …","t":[8,11,11,5,5,5,5,8,10,8,10,11,8,10,11,14,14,14],"n":["Bitfield","new","value","get_bit","set_bit","get_bits","set_bits","TruncateInto","truncate_into","OverflowingShl","overflowing_shl","saturating_shl","OverflowingShr","overflowing_shr","saturating_shr","bitfield","bitfield_without_debug","bitfield_accessors"],"q":["tartan_bitfield","","","","","","","","","","","","","","","","",""],"d":["Marker trait implemented by types defined with the […","Construct a new bitfield type from its underlying …","Unwrap the bitfield into its underlying representation","Get a boolean reflecting a single bit of the value.","Create a copy of the value with a single bit modified.","Extract a range of bits from the value, shifted so the …","Create a copy of the value with a subset of bits updated …","A type whose values can be truncated into another type. …","Truncate the value to fit in the destination type","A type with an overflowing left shift operation. Also …","Shift the value left by <code>n mod m</code> bits, where <code>m</code> is the …","Shift the value left by <code>n</code> bits. If <code>n</code> is greater than or …","A type with an overflowing right shift operation. Also …","Shift the value right by <code>n mod m</code> bits, where <code>m</code> is the …","Shift the value right by <code>n</code> bits. If <code>n</code> is greater than or …","Define a structure that wraps a number with accessors for …","Same as the [<code>bitfield</code>] macro without a [<code>Debug</code>] …","Define getters and setters for certain bit ranges. The …"],"i":[0,1,1,0,0,0,0,0,2,0,3,3,0,4,4,0,0,0],"f":[null,[[]],[[]],[[["u8",15]],["bool",15]],[[["bool",15],["u8",15]]],[[["u8",15]]],[[["u8",15]]],null,[[]],null,[[["u32",15]]],[[["u32",15]]],null,[[["u32",15]]],[[["u32",15]]],null,null,null],"p":[[8,"Bitfield"],[8,"TruncateInto"],[8,"OverflowingShl"],[8,"OverflowingShr"]]},\
"tartan_c_enum":{"doc":"Support for C-style enums that support unknown values.","t":[8,10,14],"n":["CEnum","name","c_enum"],"q":["tartan_c_enum","",""],"d":["Trait implemented by all [<code>c_enum</code>] types.","The name of the enum variant in code, if one is defined …","Define a struct that wraps an integer type and acts like …"],"i":[0,1,0],"f":[null,[[],[["str",15],["option",4]]],null],"p":[[8,"CEnum"]]},\
"tartan_devicetree":{"doc":"Support for the Devicetree specification.","t":[0,3,11,11,11,11,4,13,13,13,12,12,3,12,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["blob","Tree","from_ptr","from_buffer","memory_reservation_iter","structure_iter","StructureData","BeginNode","EndNode","Property","name","value","Value","data","MemoryReservation","address","size","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","clone","clone","clone","clone","default","default"],"q":["tartan_devicetree","tartan_devicetree::blob","","","","","","","","","tartan_devicetree::blob::StructureData","","tartan_devicetree","","","","","tartan_devicetree::blob","","","","","","","","","","","","","","","","","","tartan_devicetree","","","","","","","","","","","","","","","","","","tartan_devicetree::blob","","tartan_devicetree","","tartan_devicetree::blob","","","","tartan_devicetree","","","","tartan_devicetree::blob","","tartan_devicetree","","tartan_devicetree::blob","tartan_devicetree"],"d":["Flattened device tree, a.k.a. devicetree blob (DTB), as …","Represents a full flattened device tree blob (DTB).","Parse a devicetree blob that begins at the specified …","Parse a devicetree blob that starts at the beginning of …","Iterate over memory reservations defined by this …","Iterate over elements in the device tree. Note that this …","An event that signals the start/end of a node or a …","Indicates that the following events are within the scope …","Indicates that the previous current node is complete, and …","Defines a property of the current node","The name of the property.","The value of the property.","Wrapper for a raw byte array used as the value of a …","Property value as raw bytes","Indicates an area of memory that the kernel does not have …","Start address of the reserved memory","Size of the reserved memory in bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,0,2,2,2,3,3,0,4,0,5,5,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,1,2,4,5,1,1,2,2,4,4,5,5,1,2,4,5,1,5],"f":[null,null,[[],[["err",4],["result",4]]],[[],[["err",4],["result",4]]],[[["tree",3]]],[[["tree",3]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["tree",3]],["bool",15]],[[["tree",3]],["bool",15]],[[["structuredata",4]],["bool",15]],[[["structuredata",4]],["bool",15]],[[["value",3]],["bool",15]],[[["value",3]],["bool",15]],[[["memoryreservation",3]],["bool",15]],[[["memoryreservation",3]],["bool",15]],[[],["tree",3]],[[],["structuredata",4]],[[],["value",3]],[[],["memoryreservation",3]],[[],["tree",3]],[[],["memoryreservation",3]]],"p":[[3,"Tree"],[4,"StructureData"],[13,"Property"],[3,"Value"],[3,"MemoryReservation"]]},\
"tartan_elf":{"doc":"Support for Executable and Linkable Format (ELF) binaries.","t":[6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,18,11,3,12,12,12,12,12,12,18,18,11,11,3,18,18,18,11,18,18,3,18,18,18,11,18,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,3,18,18,18,18,18,18,18,18,18,11,3,18,18,18,18,18,18,18,18,18,18,18,18,18,11,18,18,6,3,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,3,18,18,18,18,18,18,18,18,18,18,18,11,3,11,11,11,11,11,11,11,11,11,11,6,3,12,12,12,12,12,12,12,12,12,12,11,11,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HeaderNative","Header","ident","file_type","machine","version","entry_point","program_header_offset","section_header_offset","flags","header_size","program_header_size","program_header_count","section_header_size","section_header_count","section_names_index","VERSION","verify_native","HeaderIdent","magic","class","endianness","header_version","os_abi","os_abi_version","MAGIC","VERSION","verify_format","verify_native","FileClass","None","Size32","Size64","name","NATIVE","NATIVE","Endianness","None","Little","Big","name","NATIVE","OSABI","None","HPUX","NetBSD","Linux","Hurd","Solaris","AIX","IRIX","FreeBSD","TRU64","Modesto","OpenBSD","OpenVMS","NonStopKernel","AROS","FenixOS","CloudABI","OpenVOS","MinArchDefined","MaxArchDefined","name","FileType","None","Relocatable","Executable","SharedObject","Core","MinOSDefined","MaxOSDefined","MinArchDefined","MaxArchDefined","name","Machine","None","SPARC","X86","M68K","MIPS","MIPSRS3kLittleEndian","PowerPC","PowerPC64","Arm","IA64","X86_64","Arm64","RISCV","name","NATIVE","NATIVE","ProgramHeaderNative","ProgramHeader32","segment_type","file_offset","virtual_addr","physical_addr","file_size","mem_size","flags","alignment","ProgramHeader64","segment_type","flags","file_offset","virtual_addr","physical_addr","file_size","mem_size","alignment","ProgramSegmentType","None","Loadable","DynamicLink","Interpreter","Note","ProgramHeaderTable","ThreadLocalStorage","MinOSDefined","MaxOSDefined","MinArchDefined","MaxArchDefined","name","ProgramSegmentFlags","execute","write","read","os_defined","arch_defined","set_execute","set_write","set_read","set_os_defined","set_arch_defined","SectionHeaderNative","SectionHeader","name_table_offset","section_type","flags_raw","virtual_addr","file_offset","file_size","associated_section_index","extra_info","alignment","entry_size","flags","set_flags","SectionType","None","ProgramDefined","Symbols","Strings","RelocationWithAdded","SymbolHash","DynamicLink","Note","NoBits","RelocationNoAdded","DynamicLinkSymbol","Constructors","Destructors","PreConstructors","Group","SymbolIndirectSections","MinOSDefined","MaxOSDefined","MinArchDefined","MaxArchDefined","MinUserDefined","MaxUserDefined","name","SectionFlags","write","allocate","execute","merged","strings","extra_info_is_link","keep_order","os_nonconforming","group_member","thread_locals","os_defined","arch_defined","set_write","set_allocate","set_execute","set_merged","set_strings","set_extra_info_is_link","set_keep_order","set_os_nonconforming","set_group_member","set_thread_locals","set_os_defined","set_arch_defined","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","hash","hash","hash","hash","hash","hash","hash","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","name","name","name","name","name","name","name"],"q":["tartan_elfd":["Variant of the [<code>Header</code>] structure native to the current …","File header for an ELF file with a specific address size.","Header common to all ELF variants.","Distinguishes executables, libraries, etc.","CPU architecture","ELF format version","Virtual address of executable entry point. Zero if not …","File offset to the array of program section headers which …","File offset to the array of section header which control …","CPU architecture-specific flags.","Size in bytes of this header. May be longer than the …","Size in bytes of of each program segment header. May be …","Number of program segment headers.","Size in bytes of each section header. May be longer than …","Number of section headers.","Index of the section header which contains the list of …","Expected value of the <code>version</code> field.","Checks that the header represents a valid ELF file for …","Initial header which has the same layout in all ELF …","Magic number that identifies this as an ELF file.","Specifies the address size (32- or 64-bit) of the file.","Specifies whether the file uses big or little endian byte …","Version of the ELF header.","Operating-system-specific ABI extensions that this file …","Backwards-incompatible version number of the <code>os_abi</code> …","Expected value of the <code>magic</code> field.","Expected value of the <code>header_version</code> field.","Checks that the header represents a valid ELF file, of …","Checks that the header represents an ELF file in the …","Specifies the address size (32- or 64-bit) of the file.","Invalid placeholder value.","File uses 32-bit addresses/offsets.","File uses 64-bit addresses/offsets.","The name of the enum variant in code, if one is defined …","The expected file class for the current platform.","The expected file class for the current platform.","Specifies whether the file uses big or little endian byte …","Invalid placeholder value.","File uses little-endian (LSB first) byte ordering.","File uses big-endian (MSB-first) byte ordering.","The name of the enum variant in code, if one is defined …","The expected endianness value for the current platform.","Operating-system-specific ABI extensions supported by the …","Original Unix System V ABI","HP-UX","NetBSD","GNU with Linux kernel","GNU with Hurd kernel","Sun/Oracle Solaris","IBM AIX","SGI IRIX","FreeBSD","Compaq TRU64 Unix","Novell Modesto","OpenBSD","DEC OpenVMS","HP Non-Stop Kernel","AROS (Amiga)","FenixOS (Passas and Karlsson 2011?)","Nuxi CloudABI","Stratus Open VOS","Beginning of range (inclusive) for CPU …","End of range (inclusive) for CPU architecture-specific …","The name of the enum variant in code, if one is defined …","Types of object files supported by the ELF specification","Invalid placeholder value.","Relocatable object file","A file with an entry point that can be executed","Dynamic shared library","Core dump","Beginning of range (inclusive) for OS-specific values","End of range (inclusive) for OS-specific values","Beginning of range (inclusive) for CPU …","Beginning of range (inclusive) for CPU …","The name of the enum variant in code, if one is defined …","Identifies the target CPU architecture.","No specific architecture defined.","Sun/Oracle SPARC","32-bit x86","Motorola 68000","MIPS I","MIPS RS3000 (little-endian)","32-bit PowerPC","64-bit PowerPC","32-bit Arm","Intel Itanium IA-64","64-bit x86","64-bit Arm","RISC-V","The name of the enum variant in code, if one is defined …","The expected machine type for the current platform.","The expected machine type for the current platform.","Program header variant native to the current target","Header that controls loading of a single segment of an …","Indicates the contents/meaning of the segment described …","File offset to the start of this segment’s data.","Virtual base address where the segment should be loaded.","Physical base address where the segment should be loaded. …","Size in bytes of the file data for this segment.","Size in bytes of this segment once it is loaded into …","Controls permissions and other OS/arch-specific flags.","Alignment of the segment in bytes, for both the file and …","Header that controls loading of a single segment of an …","Indicates the contents/meaning of the segment described …","Controls permissions and other OS/arch-specific flags.","File offset to the start of this segment’s data.","Virtual base address where the segment should be loaded.","Physical base address where the segment should be loaded. …","Size in bytes of the file data for this segment.","Size in bytes of this segment once it is loaded into …","Alignment of the segment in bytes, for both the file and …","Defines the contents and meaning of individual program …","Marks an ignored or unused segment.","Segment that should be loaded into memory.","Segment containing information for the dynamic linker.","Segment containing the path to the program’s …","Segment containing auxillary information.","Segment that contains the program header itself, …","Segment that contains a template for the thread-local …","Beginning of range (inclusive) for OS-specific values","End of range (inclusive) for OS-specific values","Beginning of range (inclusive) for CPU …","End of range (inclusive) for CPU architecture-specific …","The name of the enum variant in code, if one is defined …","Permissions and other OS/arch-specific flags for …","Indicates the segment contains code that should be …","Indicates the segment contains data that should be …","Indicates the segment contains data that should be …","Bits that are left for OS-specific flags.","Bits that are left for CPU architecture-specific flags.","Indicates the segment contains code that should be …","Indicates the segment contains data that should be …","Indicates the segment contains data that should be …","Bits that are left for OS-specific flags.","Bits that are left for CPU architecture-specific flags.","Variant of the [<code>SectionHeader</code>] structure native to the …","Header that controls linking","Offset within the names section to the start of this …","Indicates the contents/meaning of the section described …","Flags for various attributes of this section.","Virtual address where this section should be loaded in …","File offset to the start of this section’s data.","Size in bytes of this section’s file data.","Depending on the <code>section_type</code>, this may identify another …","Additional flags that depend on the <code>section_type</code>.","Required alignment of the section in bytes.","Depending on the <code>section_type</code>, this may identify the size …","Flags for various attributes of this section.","Flags for various attributes of this section.","Defines the contents and meaning of individual sections.","Marks an ignored or unused section.","Section containing data that is only meaningful to the …","Section containing the symbol table for this object file.","Section containing packed null-terminated strings.","Section containing relocation data with addends given in …","Section containing the hash table for symbols.","Section containing information for the dynamic linker.","Section containing auxillary information.","An empty file section that will be filled with zeros when …","Section containing relocation data where the addends are …","Section containing the symbol table for dynamic linking.","Section containing the addresses of constructor functions …","Section containing the addresses of destructor functions …","Section containing the addresses of constructor functions …","Section that groups other sections.","Table of section indexes that correspond to entries in …","Beginning of range (inclusive) for OS-specific values","End of range (inclusive) for OS-specific values","Beginning of range (inclusive) for CPU …","End of range (inclusive) for CPU architecture-specific …","Beginning of range (inclusive) for user-defined values","End of range (inclusive) for user-defined values","The name of the enum variant in code, if one is defined …","Additional attributes for object file sections.","Indicates the section contains data that should be …","Indicates this section should be loaded into memory when …","Indicates this section contains code that should be …","Indicates that multiple sections of this type can be …","Indicates the section contains null-terminate strings.","Indicates that the <code>extra_info</code> field of the section header …","Indicates that this section and the […","Indicates that the section must be processed in an …","Indicates the section is listed by a section with type […","Indicates the section contains a template for the …","Bits that are left for OS-defined flags.","Bits that are left for CPU architecture-defined flags.","Indicates the section contains data that should be …","Indicates this section should be loaded into memory when …","Indicates this section contains code that should be …","Indicates that multiple sections of this type can be …","Indicates the section contains null-terminate strings.","Indicates that the <code>extra_info</code> field of the section header …","Indicates that this section and the […","Indicates that the section must be processed in an …","Indicates the section is listed by a section with type […","Indicates the section contains a template for the …","Bits that are left for OS-defined flags.","Bits that are left for CPU architecture-defined flagsi":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,0,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,3,4,5,6,7,10,13,3,4,5,6,7,10,13,3,4,5,6,7,10,13,3,4,5,6,7,10,11,13,14,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,3,4,5,6,7,10,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["u8",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["sectionflags",3]],[[["sectionflags",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["u8",15]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["header",3]],["bool",15]],[[["header",3]],["bool",15]],[[["headerident",3]],["bool",15]],[[["headerident",3]],["bool",15]],[[["fileclass",3]],["bool",15]],[[["fileclass",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["endianness",3]],["bool",15]],[[["osabi",3]],["bool",15]],[[["osabi",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[["machine",3]],["bool",15]],[[["machine",3]],["bool",15]],[[["programheader32",3]],["bool",15]],[[["programheader32",3]],["bool",15]],[[["programheader64",3]],["bool",15]],[[["programheader64",3]],["bool",15]],[[["programsegmenttype",3]],["bool",15]],[[["programsegmenttype",3]],["bool",15]],[[["programsegmentflags",3]],["bool",15]],[[["programsegmentflags",3]],["bool",15]],[[["sectionheader",3]],["bool",15]],[[["sectionheader",3]],["bool",15]],[[["sectiontype",3]],["bool",15]],[[["sectiontype",3]],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["sectionflags",3]],["bool",15]],[[["fileclass",3]],["ordering",4]],[[["endianness",3]],["ordering",4]],[[["osabi",3]],["ordering",4]],[[["filetype",3]],["ordering",4]],[[["machine",3]],["ordering",4]],[[["programsegmenttype",3]],["ordering",4]],[[["sectiontype",3]],["ordering",4]],[[["fileclass",3]],[["option",4],["ordering",4]]],[[["endianness",3]],[["option",4],["ordering",4]]],[[["osabi",3]],[["option",4],["ordering",4]]],[[["filetype",3]],[["option",4],["ordering",4]]],[[["machine",3]],[["option",4],["ordering",4]]],[[["programsegmenttype",3]],[["option",4],["ordering",4]]],[[["sectiontype",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u16",15]]],[[["u8",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]],["sectionflags",3]],[[],["header",3]],[[],["headerident",3]],[[],["fileclass",3]],[[],["endianness",3]],[[],["osabi",3]],[[],["filetype",3]],[[],["machine",3]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["programsegmenttype",3]],[[],["programsegmentflags",3]],[[],["sectionheader",3]],[[],["sectiontype",3]],[[],["sectionflags",3]],[[],["header",3]],[[],["headerident",3]],[[],["fileclass",3]],[[],["endianness",3]],[[],["osabi",3]],[[],["filetype",3]],[[],["machine",3]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["programsegmenttype",3]],[[],["programsegmentflags",3]],[[],["sectionheader",3]],[[],["sectiontype",3]],[[],["sectionflags",3]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]]],"p":[[3,"Header"],[3,"HeaderIdent"],[3,"FileClass"],[3,"Endianness"],[3,"OSABI"],[3,"FileType"],[3,"Machine"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"ProgramSegmentType"],[3,"ProgramSegmentFlags"],[3,"SectionHeader"],[3,"SectionType"],[3,"SectionFlags"]]},\
"tartan_kernel":{"doc":"","t":[0,3,12,11,11,3,12,11,11,11,3,12,11,11,11,11,11,11,3,12,11,11,11,18,11,11,11,11,11,11,11,11,5,5,0,0,7,7,7,3,12,12,12,12,3,12,5,5,5,5,5,5,5,5,0,5,0,5,5,0,5,5,5,5,5,0,5,5,7,5,5,5,7,7,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["allocator","Allocator","block_list","uninitialized","init","BlockList","data","from_block","cursor_from_data_ptr","front_mut","CursorMut","0","current","move_next","split_exact","split_to_minimum","split_to_align","merge_next_if_free","BlockHeader","0","free","set_free","fmt_fields","SIZE_MASK","data_size","set_data_size","data_ptr","is_end","next_ptr","next","next_mut","can_fit","align_up","align_mask","arch","x86_common","GLOBAL_DESCRIPTOR_TABLE","INTERRUPT_DESCRIPTOR_TABLE","TASK_STATE_SEGMENT","GlobalDescriptorTable","null_segment","code_segment","data_segment","task_state_segment","InterruptDescriptorTable","descriptors","initialize_control_registers","initialize_segments","make_code_descriptor","make_data_descriptor","make_task_state_descriptor","initialize_interrupts","make_interrupt_gate","handle_unknown_interrupt","x86_64","initialize","cpu","print_state","describe_segment_register","intrinsics","memcpy","memmove","memset","memcmp","bcmp","pci","find_pci_access","print_devices","X","_start","kernel_main","find_uart","ALLOCATOR","HEAP","alloc_error","panic_handler","eh_personality","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","eq","ne","from","clone","default","alloc","dealloc"],"q":["tartan_kernel","tartan_kernel::allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_kernel","tartan_kernel::arch","tartan_kernel::arch::x86_common","","","","","","","","","","","","","","","","","","tartan_kernel::arch","tartan_kernel::arch::x86_64","tartan_kernel","tartan_kernel::cpu","","tartan_kernel","tartan_kernel::intrinsics","","","","","tartan_kernel","tartan_kernel::pci","","tartan_kernel","","","","","","","","","tartan_kernel::allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_kernel::arch::x86_common","","","","","","","","","","","","","","tartan_kernel::allocator","","","","","","",""],"d":["","Simple kernel allocator that keeps a singly-linked list …","","","","","","","","","","","","","","","","","","","","","Print this object’s bitfield values. Helper method for …","","","","","","","","","","","","Interface to architecture-specific code","Shared architecture-specific bindings for 32-bit and …","","","","Global descriptor table structure specific to Tartan OS.","Dummy descriptor for segment index 0. The processor …","Main code segment that covers all memory, used by CS.","Main data that covers all memory, used by everything but …","Sole task state segment required by task register.","","","Set flags in general control registers to a known state","Initialize the segmentation system to use a flat memory …","","","","","","","Architecture-specific bindings for 64-bit Intel x86-based …","Perform early architecture-specific setup","","","","This module contains some compiler-rt intrinsics that are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,2,2,2,0,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,5,5,5,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,4,4,4,4,4,4,1,1],"f":[null,null,null,[[]],[[["blocklist",3]]],null,null,[[]],[[],["cursormut",3]],[[],["cursormut",3]],null,null,[[],["pin",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["layout",3]]],[[]],null,null,[[],["bool",15]],[[["bool",15]]],[[["debugstruct",3]]],null,[[],["usize",15]],[[["usize",15]]],[[["pin",3]]],[[],["bool",15]],[[["pin",3]],["option",4]],[[["pin",3]],[["pin",3],["option",4]]],[[["pin",3]],[["pin",3],["option",4]]],[[["pin",3],["layout",3]],["bool",15]],[[["usize",15],["layout",3]],["usize",15]],[[["layout",3]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["segmentdescriptor",3]],[[],["segmentdescriptor",3]],[[],["segmentdescriptor",3]],[[]],[[["selector",3]],["gatedescriptor",3]],[[["interruptvector",3]]],null,[[]],null,[[["write",8]],["result",6]],[[["write",8],["selector",3],["str",15]],["result",6]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15],["i32",15]]],[[["usize",15]],["i32",15]],[[["usize",15]],["i32",15]],null,[[]],[[["write",8]],["result",6]],null,[[["isize",15]],["isize",15]],[[]],[[]],null,null,[[["layout",3]]],[[["panicinfo",3]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["blockheader",3]],["bool",15]],[[["blockheader",3]],["bool",15]],[[["usize",15]]],[[],["blockheader",3]],[[],["blockheader",3]],[[["layout",3]]],[[["layout",3]]]],"p":[[3,"Allocator"],[3,"BlockList"],[3,"CursorMut"],[3,"BlockHeader"],[3,"GlobalDescriptorTable"],[3,"InterruptDescriptorTable"]]},\
"tartan_parsers":{"doc":"Utilities for nom parsers","t":[0,8,5,3,12,12,3,12,12,11,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","GeneralParseError","err","Position","state","full_input","ErrorWithPosition","error","full_input","new","opcode","result_iterator","struct_parser","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","fmt","fmt","fmt","clone"],"q":["tartan_parsers","tartan_parsers::error","","","","","","","","","tartan_parsers","","","tartan_parsers::error","","","","","","","","","","","","","","","","","","","","",""],"d":["Helpers for reporting parsing errors","Trait alias combining the nom error traits <code>ParseError</code> and …","Shortcut for constructing parser errors","Helper struct that prints human-readable position …","The state of the parser at the time we are interested in","The complete input we are trying to parse","A parser error with position info useful for printing …","The error returned by the parser","The complete input we were trying to parse","Associate a parse error with its full input, to reference …","Combinator for productions that use a deterministic opcode","Create an iterator that repeatedly executes the parser.","Parse struct fields in order using an initializer-like …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,2,2,2,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2],"f":[null,null,[[["errorkind",4]],[["iresult",6],["parseerror",8]]],null,null,null,null,null,null,[[["err",4],["verboseerror",3]]],[[["str",15]]],[[]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["errorwithposition",3]]],"p":[[3,"Position"],[3,"ErrorWithPosition"]]},\
"tartan_pci":{"doc":"Support for Peripheral Component Interconnect (PCI) and …","t":[0,0,3,8,10,10,11,11,3,12,12,12,12,3,12,12,0,8,18,3,11,11,11,11,11,3,11,11,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,3,11,11,3,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,3,11,11,11,11,11,4,13,13,4,13,13,13,3,11,11,11,11,17,17,17,5,5,5,5,3,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["access","io","IOConfigAccess","ConfigAccess","get_register","set_register","get_fixed_register","set_fixed_register","ConfigSelector","segment_group","bus","device","function","MemMapConfigAccess","base_address","bus_range","config","FixedConfigRegister","REGISTER_NUMBER","HeaderRegister0","device","vendor","set_device","set_vendor","valid","HeaderRegister1","status","command","set_status","set_command","HeaderRegister2","class","subclass","interface","revision","set_class","set_subclass","set_interface","set_revision","HeaderRegister3","self_test","multi_function","header_type","latency_timer","cache_line_size","set_self_test","set_multi_function","set_header_type","set_latency_timer","set_cache_line_size","Type0HeaderRegister11","subsystem","subsystem_vendor","set_subsystem","set_subsystem_vendor","Type0HeaderRegister13","capabilities_offset","set_capabilities_offset","Type0HeaderRegister15","max_latency","min_grant","interrupt_pin","interrupt_line","set_max_latency","set_min_grant","set_interrupt_pin","set_interrupt_line","CommandRegister","interrupt_disabled","fast_back_to_back_enabled","system_error_enabled","parity_error_response","vga_palette_snoop","write_and_invalidate_enable","special_cycle","bus_master","memory_space","io_space","set_interrupt_disabled","set_fast_back_to_back_enabled","set_system_error_enabled","set_parity_error_response","set_vga_palette_snoop","set_write_and_invalidate_enable","set_special_cycle","set_bus_master","set_memory_space","set_io_space","StatusRegister","parity_error_detected","system_error_signaled","master_abort_received","target_abort_received","target_abort_signaled","device_select_timing","master_parity_error","fast_back_to_back_capable","double_clock_capable","capabilities_list_available","interrupt_status","set_parity_error_detected","set_system_error_signaled","set_master_abort_received","set_target_abort_received","set_target_abort_signaled","set_device_select_timing","set_master_parity_error","set_fast_back_to_back_capable","set_double_clock_capable","set_capabilities_list_available","set_interrupt_status","SelfTest","capable","start","completion_code","set_capable","set_start","set_completion_code","BaseAddressRegister","address_space","prefetchable","address_width","address_u32","address_u64","AddressSpace","Memory","IO","AddressWidth","U32","U64","Invalid","GenericCapabilityRegister","id","next_offset","set_id","set_next_offset","MAX_DEVICE","MAX_FUNCTION","INVALID_VENDOR","enumerate_bus","enumerate_bus_devices","enumerate_device_functions","check_valid","CapabilityEntry","id","register","iter_capabilities","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","get_register","set_register","get_register","set_register","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","from","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default"],"q":["tartan_pci","tartan_pci::access","tartan_pci::access::io","tartan_pci::access","","","","","","","","","","","","","tartan_pci","tartan_pci::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_pci","","","","","","","","","","","tartan_pci::access::io","","","","","","","tartan_pci::access","","","","","","","","","","","","","","tartan_pci::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_pci","","","","","","","tartan_pci::access","","tartan_pci::access::io","","tartan_pci::access","","tartan_pci::access::io","tartan_pci::config","","","","","","","","","","","","","","tartan_pci::access","","","","tartan_pci::access::io","tartan_pci::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_pci::access","","tartan_pci::access::io","tartan_pci::config","","","","","","","","","","","","","","tartan_pci::access","tartan_pci::access::io","tartan_pci::config","","","","","","","","","","",""],"d":["Access methods for PCI configuration space.","Support for the I/O based configuration access method on …","I/O based configuration access method on x86/x86-64.","Provides methods to access PCI configuration space.","Get a specific 32-bit register in PCI configuration space.","Set a specific 32-bit register in PCI configuration space.","Get a register in PCI configuration space with an offset …","Set a register in PCI configuration space with an offset …","Logical PCI address for a function of a specific …","Segment group as defined by PCI Express. Always zero for …","PCI bus number within the indicated segment group. The …","PCI device number on the indicated bus.","PCI function number on the indicated device. Usually …","Access to memory-mapped PCI configuration space","Address of register 0 on bus","Bus numbers covered by this memory map","Data exposed in PCI configuration space.","A register type that is always located at a specific …","Fixed offset for this register type","The first register of the standard configuration header …","Vendor-defined device ID","ID of the chipset manufacturer for this function, …","Vendor-defined device ID","ID of the chipset manufacturer for this function, …","Return false if the function is not present, as indicated …","The second register of the standard configuration header …","Status bits indicated by the function","Control bits set by the host","Status bits indicated by the function","Control bits set by the host","The third register of the standard configuration header …","Indicates the general purpose of the function, from a …","Indicates the purpose of the function more specifically, …","Indicates a standard programming interface that can be …","Vendor-defined revision of the hardware","Indicates the general purpose of the function, from a …","Indicates the purpose of the function more specifically, …","Indicates a standard programming interface that can be …","Vendor-defined revision of the hardware","The fourth register of the standard configuration header …","Control and status flags for a function’s self test …","If true, then this device responds to at least some …","Indicates which of the standard PCI configuration header …","The value of the bus master’s latency timer in PCI …","Informs the device of the size of the system’s cache …","Control and status flags for a function’s self test …","If true, then this device responds to at least some …","Indicates which of the standard PCI configuration header …","The value of the bus master’s latency timer in PCI …","Informs the device of the size of the system’s cache …","Twelfth register of the standard configuration header for …","ID of the device as defined by the card manufacturer.","ID of the card manufacturer, which may be different than …","ID of the device as defined by the card manufacturer.","ID of the card manufacturer, which may be different than …","Fourtheenth register of the standard configuration header …","Offset within this function’s configuration space that …","Offset within this function’s configuration space that …","Sixteenth register of the standard configuration header …","Indicates the longest period the device can wait to …","Indicates the desired length of bursts in units of 0.25 …","Indicates which of the four interrupt pins on the PCI bus …","Indicates which system interrupt number the function …","Indicates the longest period the device can wait to …","Indicates the desired length of bursts in units of 0.25 …","Indicates which of the four interrupt pins on the PCI bus …","Indicates which system interrupt number the function …","Control bits set by the host","Controls whether the device is prohibited from asserting …","Controls whether the device may use fast back-to-back …","Controls whether the device may signal critical errors in …","Controls whether the device responds normally to parity …","Controls whether a VGA or graphics card device may “…","Controls whether the device may send a “Memory Write …","Controls whether the device may respond to “special …","Controls whether the device may act as a master of the …","Controls whether the device may respond to accesses …","Controls whether the device may respond to accesses …","Controls whether the device is prohibited from asserting …","Controls whether the device may use fast back-to-back …","Controls whether the device may signal critical errors in …","Controls whether the device responds normally to parity …","Controls whether a VGA or graphics card device may “…","Controls whether the device may send a “Memory Write …","Controls whether the device may respond to “special …","Controls whether the device may act as a master of the …","Controls whether the device may respond to accesses …","Controls whether the device may respond to accesses …","Status bits indicated by the function","Indicates taht the device has detected a parity error, …","Indicates that the device has detected a critical error …","Indicates whether the transaction was aborted with a …","Indicates whether the transaction was aborted with a …","Indicates that this function generated an abort on the …","Indicates how quickly the device can assert the <code>DEVSEL#</code> …","Indicates whether a partity error was detected while this …","Indicates whether the device supports receiving …","Indicates whether the device can run at 66 MHz (true).","Indicates whether the configuration space contains a …","Indicates whether the device wants to signal an …","Indicates taht the device has detected a parity error, …","Indicates that the device has detected a critical error …","Indicates whether the transaction was aborted with a …","Indicates whether the transaction was aborted with a …","Indicates that this function generated an abort on the …","Indicates how quickly the device can assert the <code>DEVSEL#</code> …","Indicates whether a partity error was detected while this …","Indicates whether the device supports receiving …","Indicates whether the device can run at 66 MHz (true).","Indicates whether the configuration space contains a …","Indicates whether the device wants to signal an …","Control and status flags for a function’s self test …","Indicates whether the function has a self-test capability.","Setting this bit triggers the device to start its self …","If a self-test is complete, then any non-zero value in …","Indicates whether the function has a self-test capability.","Setting this bit triggers the device to start its self …","If a self-test is complete, then any non-zero value in …","A pointer to a memory or I/O space that is used to …","Indicates whether this BAR points to memory or I/O space","Indicates whether the host can safely cache the memory …","Size of address bus supported by this PCI function.","The address as a 32-bit number.","The address as a 64-bit number, when combined with the …","Differentiates between memory and I/O addresses","This address is in the normal memory address space","This address is in I/O space (supported on x86/x86-64 …","Size of address bus supported by a PCI function","32-bit address bus","64-bit address bus","Unknown address bus width","Structure shared by all capability registers","Capability ID defined by PCI-SIG","Byte offset within capability space of next capability …","Capability ID defined by PCI-SIG","Byte offset within capability space of next capability …","Highest device number allowed by the PCI specification.","Highest function number allowed by the PCI specification.","Placeholder value that will always be returned in the …","Iterate over the devices and functions present on the …","Iterate over the devices present on the specified bus.","Iterate over the functions available on the specified …","Return true if a function is available at the specified …","Information to identify and locate capability registers","Capability ID defined by PCI-SIG","Register number in config space (offset in 4-byte units) …","Iterate over all capabilities defined in the …i":[0,0,0,0,1,1,1,1,0,2,2,2,2,0,3,3,0,0,4,0,5,5,5,5,5,0,6,6,6,6,0,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,0,10,10,0,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,0,15,15,15,15,15,0,16,16,0,17,17,17,0,18,18,18,18,0,0,0,0,0,0,0,0,19,19,0,20,20,20,20,20,20,20,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,3,3,20,20,2,3,20,5,6,7,8,9,10,11,12,13,14,15,16,17,18,2,2,3,3,20,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,17,18,18,5,6,7,8,9,10,11,12,13,14,18,2,3,20,5,6,7,8,9,10,11,12,13,14,15,16,17,18,2,20,5,6,7,8,9,10,11,12,13,14,15,18],"f":[null,null,null,null,[[["u16",15],["configselector",3]],["u32",15]],[[["u32",15],["u16",15],["configselector",3]]],[[["configselector",3]],["fixedconfigregister",8]],[[["fixedconfigregister",8],["configselector",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["u16",15]],[[],["u16",15]],[[["u16",15]]],[[["u16",15]]],[[],["bool",15]],null,[[],["statusregister",3]],[[],["commandregister",3]],[[["statusregister",3]]],[[["commandregister",3]]],null,[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],null,[[],["selftest",3]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["selftest",3]]],[[["bool",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],null,[[],["u16",15]],[[],["u16",15]],[[["u16",15]]],[[["u16",15]]],null,[[],["u8",15]],[[["u8",15]]],null,[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[["bool",15]]],[[["bool",15]]],[[["u8",15]]],null,[[],["addressspace",4]],[[],["bool",15]],[[],["addresswidth",4]],[[],["u32",15]],[[["u32",15]],["u64",15]],null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u8",15]],[[["u8",15]]],[[["u8",15]]],null,null,null,[[["configselector",3]]],[[["configselector",3]]],[[["configselector",3]]],[[["configselector",3]],["bool",15]],null,null,null,[[["configselector",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["u16",15],["configselector",3]],["u32",15]],[[["u32",15],["u16",15],["configselector",3]]],[[["u16",15],["configselector",3]],["u32",15]],[[["u32",15],["u16",15],["configselector",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["configselector",3]],["bool",15]],[[["configselector",3]],["bool",15]],[[["memmapconfigaccess",3]],["bool",15]],[[["memmapconfigaccess",3]],["bool",15]],[[["ioconfigaccess",3]],["bool",15]],[[["headerregister0",3]],["bool",15]],[[["headerregister0",3]],["bool",15]],[[["headerregister1",3]],["bool",15]],[[["headerregister1",3]],["bool",15]],[[["headerregister2",3]],["bool",15]],[[["headerregister2",3]],["bool",15]],[[["headerregister3",3]],["bool",15]],[[["headerregister3",3]],["bool",15]],[[["type0headerregister11",3]],["bool",15]],[[["type0headerregister11",3]],["bool",15]],[[["type0headerregister13",3]],["bool",15]],[[["type0headerregister13",3]],["bool",15]],[[["type0headerregister15",3]],["bool",15]],[[["type0headerregister15",3]],["bool",15]],[[["commandregister",3]],["bool",15]],[[["commandregister",3]],["bool",15]],[[["statusregister",3]],["bool",15]],[[["statusregister",3]],["bool",15]],[[["selftest",3]],["bool",15]],[[["selftest",3]],["bool",15]],[[["baseaddressregister",3]],["bool",15]],[[["baseaddressregister",3]],["bool",15]],[[["addressspace",4]],["bool",15]],[[["addresswidth",4]],["bool",15]],[[["genericcapabilityregister",3]],["bool",15]],[[["genericcapabilityregister",3]],["bool",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u8",15]]],[[["u32",15]]],[[],["configselector",3]],[[],["memmapconfigaccess",3]],[[],["ioconfigaccess",3]],[[],["headerregister0",3]],[[],["headerregister1",3]],[[],["headerregister2",3]],[[],["headerregister3",3]],[[],["type0headerregister11",3]],[[],["type0headerregister13",3]],[[],["type0headerregister15",3]],[[],["commandregister",3]],[[],["statusregister",3]],[[],["selftest",3]],[[],["baseaddressregister",3]],[[],["addressspace",4]],[[],["addresswidth",4]],[[],["genericcapabilityregister",3]],[[],["configselector",3]],[[],["ioconfigaccess",3]],[[],["headerregister0",3]],[[],["headerregister1",3]],[[],["headerregister2",3]],[[],["headerregister3",3]],[[],["type0headerregister11",3]],[[],["type0headerregister13",3]],[[],["type0headerregister15",3]],[[],["commandregister",3]],[[],["statusregister",3]],[[],["selftest",3]],[[],["baseaddressregister",3]],[[],["genericcapabilityregister",3]]],"p":[[8,"ConfigAccess"],[3,"ConfigSelector"],[3,"MemMapConfigAccess"],[8,"FixedConfigRegister"],[3,"HeaderRegister0"],[3,"HeaderRegister1"],[3,"HeaderRegister2"],[3,"HeaderRegister3"],[3,"Type0HeaderRegister11"],[3,"Type0HeaderRegister13"],[3,"Type0HeaderRegister15"],[3,"CommandRegister"],[3,"StatusRegister"],[3,"SelfTest"],[3,"BaseAddressRegister"],[4,"AddressSpace"],[4,"AddressWidth"],[3,"GenericCapabilityRegister"],[3,"CapabilityEntry"],[3,"IOConfigAccess"]]},\
"tartan_serial":{"doc":"Support for Universal Asynchronous Receiver/Transmitter …","t":[0,3,12,12,3,0,8,10,10,3,3,11,8,10,10,10,10,3,12,3,12,12,12,12,4,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["model_pl011","UARTPL011","register_block","base_clock_rate","RegisterBlock","model_16550","RegisterAccess","read","write","ActualRegisterAccess","UART16550","new","UART","reset","line_mode","set_line_mode","write","UARTWriteAdapter","0","LineMode","baud","data_bits","parity","extended_stop","Parity","None","Odd","Even","High","Low","NullUART","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","read","write","reset","line_mode","set_line_mode","write","reset","line_mode","set_line_mode","write","reset","set_line_mode","write","line_mode","fmt","fmt","eq","ne","eq","write_str","clone","clone","default","default","default"],"q":["tartan_serial","tartan_serial::model_pl011","","","","tartan_serial","tartan_serial::model_16550","","","","","","tartan_serial","","","","","","","","","","","","","","","","","","","tartan_serial::model_pl011","","","","","","","","","","","","","","tartan_serial::model_16550","","","","","","","","","","","","","","tartan_serial","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_serial::model_16550","","tartan_serial::model_pl011","","","","tartan_serial::model_16550","","","","tartan_serial","","","","","","","","","","","","tartan_serial::model_16550","tartan_serial",""],"d":["Driver for Arm’s <code>PrimeCell</code> PL011 UART","Driver for the PL011 UART.","Memory-mapped registers for this device.","Frequency, in hertz, of the clock input to the UART.","Memory-mapped registers for PL011 UART.","Driver for the common UART interface provided on PCs that …","Strategy that provides access to registers for a 16550 …","Read 8-bit register at the given port","Write 8-bit register at the given port","Strategy that reads and writes registers from I/O space.","Driver for a PC UART based on the National Semiconductor …","Create a driver for the UART with the given base I/O …","High-level interface for UART drivers.","Stop transmission, clear buffers, and set the device to a …","Get the device’s active line protocol mode.","Update the device’s line protocol mode.","Send the given data through the UART. Blocks until all …","Newtype wrapper that allows a UART implementation to be …","","Speed and other line protocol settings.","Bits per second (including non-data bits) of line …","Number of data bits per word in line protocol.","Parity setting for line protocol.","Use 1.5 or 2 stop bits (depending on baud rate) if set. …","Parity setting for line protocol.","No parity bit.","Set parity so that there are an odd number of high bits …","Set parity so that there are an even number of high bits …","Set parity bit high unconditionally (sticky).","Set parity bit low unconditionally (sticky).","Dummy UART driver that drops outgoing data and never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,0,2,2,0,0,3,0,4,4,4,4,0,5,0,6,6,6,6,0,7,7,7,7,7,0,1,1,1,1,1,1,1,8,8,8,8,8,8,8,9,9,9,9,9,9,9,3,3,3,3,3,3,3,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,10,10,10,10,10,10,10,9,9,1,1,1,1,3,3,3,3,10,10,10,10,6,7,6,6,7,5,6,7,9,6,7],"f":[null,null,null,null,null,null,null,[[["u16",15]],["u8",15]],[[["u16",15],["u8",15]]],null,null,[[["u16",15]]],null,[[]],[[],["linemode",3]],[[["linemode",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["u16",15]],["u8",15]],[[["u16",15],["u8",15]]],[[]],[[],["linemode",3]],[[["linemode",3]]],[[]],[[]],[[],["linemode",3]],[[["linemode",3]]],[[]],[[]],[[["linemode",3]]],[[]],[[],["linemode",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["linemode",3]],["bool",15]],[[["linemode",3]],["bool",15]],[[["parity",4]],["bool",15]],[[["str",15]],["result",6]],[[],["linemode",3]],[[],["parity",4]],[[],["actualregisteraccess",3]],[[],["linemode",3]],[[]]],"p":[[3,"UARTPL011"],[8,"RegisterAccess"],[3,"UART16550"],[8,"UART"],[3,"UARTWriteAdapter"],[3,"LineMode"],[4,"Parity"],[3,"RegisterBlock"],[3,"ActualRegisterAccess"],[3,"NullUART"]]},\
"tartan_uefi":{"doc":"Support for Unified Extensible Firmware Interface","t":[0,3,0,7,0,3,12,11,3,12,5,0,8,18,3,3,12,12,12,12,3,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,18,3,12,18,11,3,12,18,11,11,11,11,11,11,11,11,3,18,18,18,11,3,17,3,18,3,18,18,18,18,18,18,18,18,18,18,18,18,11,18,11,11,11,6,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,18,11,11,11,8,18,18,10,11,11,11,11,11,3,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,11,3,12,3,12,12,12,12,12,11,11,11,11,3,11,3,12,18,18,18,18,18,18,3,12,12,12,12,12,3,12,12,12,12,18,11,11,11,11,11,11,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,3,18,18,18,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,18,18,18,18,18,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["allocator","BootAllocator","global","SYSTEM_TABLE","io","OutputStream","last_result","new","Logger","0","encode_c_utf16","proto","Protocol","PROTOCOL_ID","SimpleTextInput","SimpleTextOutput","reset","output_string","test_string","mode","SimpleTextOutputMode","max_mode","mode","attribute","cursor_column","cursor_row","cursor_visible","LoadedImage","revision","parent_handle","system_table","device_handle","load_options_size","load_options","image_base","image_size","image_code_type","image_data_type","unload","MIN_REVISION","SimpleFileSystem","revision","MIN_REVISION","open_volume","File","revision","MIN_REVISION","open","close","delete","read","write","get_position","set_position","flush","FileMode","Read","ReadWrite","ReadWriteCreate","name","FileAttributes","PAGE_SIZE","Handle","NULL","Revision","V2_80","V2_70","V2_60","V2_50","V2_40","V2_31","V2_30","V2_20","V2_10","V2_00","V1_10","V1_02","name","LATEST","major_version","minor_version","fix_version","Result","Status","Success","WarnUnknownGlyph","WarnDeleteFailure","WarnWriteFailure","WarnBufferTooSmall","WarnStaleData","WarnFileSystem","WarnResetRequired","LoadError","InvalidParameter","Unsupported","BadBufferSize","BufferTooSmall","NotReady","DeviceError","WriteProtected","OutOfResources","VolumeCorrupted","VolumeFull","NoMedia","MediaChanged","NotFound","AccessDenied","NoResponse","NoMapping","Timeout","NotStarted","AlreadyStarted","Aborted","ICMPError","TFTPError","ProtocolError","IncompatibleVersion","SecurityViolation","CRCError","EndOfMedia","EndOfFile","InvalidLanguage","CompromisedData","HTTPError","name","ERROR_BIT","is_error","is_warning","into_result","Table","SIGNATURE","MIN_REVISION","header","verify","verify_signature","verify_revision","verify_size","verify_crc32","TableHeader","signature","revision","header_size","crc32","SystemTable","header","firmware_vendor","firmware_revision","console_in_handle","console_in","console_out_handle","console_out","std_err_handle","std_err","runtime_services","boot_services","config_entry_count","config_table","exit_boot_services","RuntimeServices","header","BootServices","header","free_pages","allocate_pool","free_pool","handle_protocol","allocate_pages","get_memory_map","get_protocol","exit_boot_services","GUID","from","ConfigurationTable","vendor_guid","ACPI_20_GUID","ACPI_GUID","SAL_SYSTEM_GUID","SMBIOS_GUID","SMBIOS3_GUID","MPS_GUID","MemoryDescriptor","memory_type","physical_start","virtual_start","page_count","attributes","MemoryMap","raw_map","key","descriptor_size","descriptor_version","MIN_VERSION","new","verify","verify_version","verify_descriptor_size","verify_map","iter","MemoryType","Reserved","LoaderCode","LoaderData","BootServicesCode","BootServicesData","RuntimeServicesCode","RuntimeServicesData","Conventional","Unusable","ACPIReclaim","ACPINonVolatile","MappedIO","MappedIOPortSpace","ProcessorCode","Persistent","MinOEMDefined","MaxOEMDefined","MinOSDefined","MaxOSDefined","name","AllocateType","AnyAddress","MaxAddress","ExactAddress","name","MemoryAttributes","supports_uncacheable","supports_write_combining","supports_write_through","supports_write_back","supports_uncacheable_sem","supports_write_protect","supports_read_protect","supports_exec_protect","nonvolatile","more_reliable","supports_read_only","specific_purpose","supports_cpu_crypto","runtime","set_supports_uncacheable","set_supports_write_combining","set_supports_write_through","set_supports_write_back","set_supports_uncacheable_sem","set_supports_write_protect","set_supports_read_protect","set_supports_exec_protect","set_nonvolatile","set_more_reliable","set_supports_read_only","set_specific_purpose","set_supports_cpu_crypto","set_runtime","OpenProtocolAttributes","ByHandle","Get","Test","ByChild","ByDriver","Exclusive","name","writeln_result","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","header","header","header","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","hash","hash","hash","hash","hash","hash","write_str","write_char","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","alloc","dealloc","name","name","name","name","name","name","log","enabled","flush"],"q":["tartan_uefi","tartan_uefi::allocator","tartan_uefi","tartan_uefi::global","tartan_uefi","tartan_uefi::io","","","","","","tartan_uefi","tartan_uefi::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_uefitartan_uefi::allocator","","","","","","","tartan_uefi::io","","","","","","","","","","","","","","","","tartan_uefi::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_uefi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tartan_uefi::proto","","","","","tartan_uefi","","","","","","","","","","","","","","","","","tartan_uefi::proto","","","","","","tartan_uefi","","","","","tartan_uefi::proto","tartan_uefi","","","","","tartan_uefi::proto","tartan_uefi","","","","","tartan_uefi::proto","tartan_uefi::io","","tartan_uefi","","","","","","","","tartan_uefi::proto","","tartan_uefi::io","tartan_uefi","","","","","","","","tartan_uefi::proto","","","tartan_uefi","","","","","","","tartan_uefi::proto","","tartan_uefi::allocator","","tartan_uefi","","","","","tartan_uefi::proto","tartan_uefi::io","",""],"d":["<code>BootServices</code>-based heap allocator to support the standard …","","Static pointer to the [<code>SystemTable</code>], used by features …","","[<code>SimpleTextOutput</code>]-based [<code>Write</code>] implementation to …","","","","","","Convert a Rust string to a buffer containing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Protocol for accessing a file system supported by UEFI …","Implemented revision of the SimpleFileSystem protocol.","Minimum supported [<code>SimpleFileSystem::revision</code>]. Future …","Get a handle to the root of the file system.","Protocol for accessing a file or directory.","Implemented revision of the File protocol.","Minimum supported [<code>SimpleFileSystem::revision</code>]. Future …","Get a handle to a new file, relative to the directory …","Flush and close the file or directory represented by the …","Delete the file or directory represented by the current …","Read file contents or a directory entry into the buffer.","Write the contents of <code>buffer</code> out to the current position.","Get the handle’s current position in the file.","Set the handle’s current position in the file.","Write any buffered changes.","Controls how a file is opened.","File will be read, and should exist already.","File will be read and written, and should exist already.","File will be read and written, and will be created if it …","The name of the enum variant in code, if one is defined …","Basic properties of a file or directory as defined by the …","Constant page size defined by UEFI specification for […","","","","","","","","","","","","","","","","The name of the enum variant in code, if one is defined …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of the enum variant in code, if one is defined …","","","","Wraps success <em>and</em> warning codes in [<code>Ok</code>], and error codes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safe(r) wrapper around [<code>BootServices::exit_boot_services</code>] …","","","","","","","","","Allocate a number of pages of a given type of memory, …","Get a map representing the status of all available memory.","Get the implementation of a protocol offered by the given …","Signal to UEFI that the OS is now taking over.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over memory descriptors contained in the map.","","Memory that is never available for use","Memory used for UEFI application code.","Memory allocated by UEFI applications.","Memory used for drivers that provide [<code>BootServices</code>].","Memory allocated by drivers that provide [<code>BootServices</code>].","Memory used for drivers that provide [<code>RuntimeServices</code>].","Memory allocated by drivers that provide [<code>RuntimeServices</code>]…","Free memory.","Damaged memory modules.","Memory that can be used after the OS initializes ACPI.","Memory that must be preserved in ACPI states S1–S3.","Memory mapped to device I/O.","Memory mapped to I/O ports.","Memory used by processor firmware code.","Free nonvolatile memory.","Beginning of range (inclusive) for OEM-specific memory …","End of range (inclusive) for OEM-specific memory types","Beginning of range (inclusive) for operating …","End of range (inclusive) for operating system-specific …","The name of the enum variant in code, if one is defined …","","","","","The name of the enum variant in code, if one is defined …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of the enum variant in code, if one is defined …","Write formatted data to an [<code>OutputStream</code>] and return the …i":[0,0,0,0,0,0,1,1,0,2,0,0,0,3,0,0,4,4,4,4,0,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,0,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,0,0,0,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,0,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,0,17,17,17,17,17,17,17,17,17,0,18,0,19,19,19,19,19,19,19,0,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,27,27,27,27,27,27,27,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,28,28,28,28,28,28,28,28,28,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,15,16,17,10,11,12,18,22,23,24,25,27,5,6,9,28,11,10,10,11,11,12,12,18,18,22,22,23,23,24,24,25,25,5,5,9,9,28,28,11,12,22,23,25,9,11,12,22,23,25,9,11,12,22,23,25,9,1,1,11,12,29,18,22,23,24,25,9,28,1,10,11,12,18,22,23,24,25,5,9,28,11,12,21,22,23,24,25,9,28,26,26,11,12,22,23,25,9,2,2,2],"f":[null,null,null,null,null,null,null,[[["simpletextoutput",3]]],null,null,[[["str",15]],["box",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["file",3],["status",3]]],null,null,null,[[["fileattributes",3],["filemode",3]],[["result",4],["file",3],["status",3]]],[[]],[[],["status",3]],[[],[["usize",15],["status",3],["result",4]]],[[],[["usize",15],["status",3],["result",4]]],[[],[["result",4],["status",3],["u64",15]]],[[["u64",15]],["result",6]],[[],["result",6]],null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["result",6]],null,null,null,[[],["tableheader",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["handle",3]],["memorymap",3]],null,null,null,null,null,null,null,null,[[["usize",15],["allocatetype",3],["memorytype",3],["u64",15],["option",4]],[["result",4],["status",3],["u64",15]]],[[],["memorymap",3]],[[["handle",3]],[["status",3],["result",4]]],[[["usize",15],["handle",3]],["result",6]],null,[[["u128",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,null,null,null,[[],[["str",15],["option",4]]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,null,null,null,null,null,null,[[],[["str",15],["option",4]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["tableheader",3]],[[],["tableheader",3]],[[],["tableheader",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["handle",3]],["bool",15]],[[["handle",3]],["bool",15]],[[["revision",3]],["bool",15]],[[["revision",3]],["bool",15]],[[["status",3]],["bool",15]],[[["status",3]],["bool",15]],[[["guid",3]],["bool",15]],[[["guid",3]],["bool",15]],[[["memorytype",3]],["bool",15]],[[["memorytype",3]],["bool",15]],[[["allocatetype",3]],["bool",15]],[[["allocatetype",3]],["bool",15]],[[["memoryattributes",3]],["bool",15]],[[["memoryattributes",3]],["bool",15]],[[["openprotocolattributes",3]],["bool",15]],[[["openprotocolattributes",3]],["bool",15]],[[["simpletextoutputmode",3]],["bool",15]],[[["simpletextoutputmode",3]],["bool",15]],[[["filemode",3]],["bool",15]],[[["filemode",3]],["bool",15]],[[["fileattributes",3]],["bool",15]],[[["fileattributes",3]],["bool",15]],[[["revision",3]],["ordering",4]],[[["status",3]],["ordering",4]],[[["memorytype",3]],["ordering",4]],[[["allocatetype",3]],["ordering",4]],[[["openprotocolattributes",3]],["ordering",4]],[[["filemode",3]],["ordering",4]],[[["revision",3]],[["option",4],["ordering",4]]],[[["status",3]],[["option",4],["ordering",4]]],[[["memorytype",3]],[["option",4],["ordering",4]]],[[["allocatetype",3]],[["option",4],["ordering",4]]],[[["openprotocolattributes",3]],[["option",4],["ordering",4]]],[[["filemode",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",6]],[[["char",15]],["result",6]],[[["u32",15]]],[[["usize",15]]],[[["status",3]]],[[["u128",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[],["outputstream",3]],[[],["handle",3]],[[],["revision",3]],[[],["status",3]],[[],["guid",3]],[[],["memorytype",3]],[[],["allocatetype",3]],[[],["memoryattributes",3]],[[],["openprotocolattributes",3]],[[],["simpletextoutputmode",3]],[[],["filemode",3]],[[],["fileattributes",3]],[[],["revision",3]],[[],["status",3]],[[]],[[],["memorytype",3]],[[],["allocatetype",3]],[[],["memoryattributes",3]],[[],["openprotocolattributes",3]],[[],["filemode",3]],[[],["fileattributes",3]],[[["layout",3]]],[[["layout",3]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[["record",3]]],[[["metadata",3]],["bool",15]],[[]]],"p":[[3,"OutputStream"],[3,"Logger"],[8,"Protocol"],[3,"SimpleTextOutput"],[3,"SimpleTextOutputMode"],[3,"LoadedImage"],[3,"SimpleFileSystem"],[3,"File"],[3,"FileMode"],[3,"Handle"],[3,"Revision"],[3,"Status"],[8,"Table"],[3,"TableHeader"],[3,"SystemTable"],[3,"RuntimeServices"],[3,"BootServices"],[3,"GUID"],[3,"ConfigurationTable"],[3,"MemoryDescriptor"],[3,"MemoryMap"],[3,"MemoryType"],[3,"AllocateType"],[3,"MemoryAttributes"],[3,"OpenProtocolAttributes"],[3,"BootAllocator"],[3,"SimpleTextInput"],[3,"FileAttributes"],[6,"Result"]]}\
}');
initSearch(searchIndex);