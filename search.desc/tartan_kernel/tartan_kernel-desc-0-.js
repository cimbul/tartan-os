searchState.loadedDescShard("tartan_kernel", 0, "Interface to architecture-specific code\nThis module contains some compiler-rt intrinsics that are …\nSimple kernel allocator that keeps a singly-linked list of …\nPrint this object’s bitfield values. Helper method for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArchitecture-specific bindings for 64-bit Intel x86-based …\nShared architecture-specific bindings for 32-bit and …\nPerform early architecture-specific setup\nGlobal descriptor table structure specific to Tartan OS.\nMain code segment that covers all memory, used by CS.\nMain data that covers all memory, used by everything but …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a segment selector that points to the given …\nSet flags in general control registers to a known state\nInitialize the segmentation system to use a flat memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDummy descriptor for segment index 0. The processor always …\nSole task state segment required by task register.")