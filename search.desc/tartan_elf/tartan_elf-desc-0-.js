searchState.loadedDescShard("tartan_elf", 0, "Support for Executable and Linkable Format (ELF) binaries.\nIBM AIX\nAROS (Amiga)\n32-bit Arm\n64-bit Arm\nFile uses big-endian (MSB-first) byte ordering.\nNuxi CloudABI\nSection containing the addresses of constructor functions …\nCore dump\nSection containing the addresses of destructor functions …\nSegment containing information for the dynamic linker.\nSection containing information for the dynamic linker.\nSection containing the symbol table for dynamic linking.\nSpecifies whether the file uses big or little endian byte …\nA file with an entry point that can be executed\nFenixOS (Passas and Karlsson 2011?)\nSpecifies the address size (32- or 64-bit) of the file.\nTypes of object files supported by the ELF specification\nFreeBSD\nSection that groups other sections.\nHP-UX\nFile header for an ELF file with a specific address size.\nInitial header which has the same layout in all ELF …\nVariant of the <code>Header</code> structure native to the current …\nGNU with Hurd kernel\nIntel Itanium IA-64\nSGI IRIX\nSegment containing the path to the program’s interpreter …\nGNU with Linux kernel\nFile uses little-endian (LSB first) byte ordering.\nSegment that should be loaded into memory.\nMotorola 68000\nExpected value of the <code>magic</code> field.\nMIPS I\nMIPS RS3000 (little-endian)\nIdentifies the target CPU architecture.\nEnd of range (inclusive) for CPU architecture-specific …\nBeginning of range (inclusive) for CPU …\nEnd of range (inclusive) for CPU architecture-specific …\nEnd of range (inclusive) for CPU architecture-specific …\nEnd of range (inclusive) for OS-specific values\nEnd of range (inclusive) for OS-specific values\nEnd of range (inclusive) for OS-specific values\nEnd of range (inclusive) for user-defined values\nBeginning of range (inclusive) for CPU …\nBeginning of range (inclusive) for CPU …\nBeginning of range (inclusive) for CPU …\nBeginning of range (inclusive) for CPU …\nBeginning of range (inclusive) for OS-specific values\nBeginning of range (inclusive) for OS-specific values\nBeginning of range (inclusive) for OS-specific values\nBeginning of range (inclusive) for user-defined values\nNovell Modesto\nThe expected file class for the current platform.\nThe expected file class for the current platform.\nThe expected endianness value for the current platform.\nThe expected machine type for the current platform.\nThe expected machine type for the current platform.\nNetBSD\nAn empty file section that will be filled with zeros when …\nHP Non-Stop Kernel\nInvalid placeholder value.\nInvalid placeholder value.\nOriginal Unix System V ABI\nInvalid placeholder value.\nNo specific architecture defined.\nMarks an ignored or unused segment.\nMarks an ignored or unused section.\nSegment containing auxillary information.\nSection containing auxillary information.\nOperating-system-specific ABI extensions supported by the …\nOpenBSD\nDEC OpenVMS\nStratus Open VOS\n32-bit PowerPC\n64-bit PowerPC\nSection containing the addresses of constructor functions …\nSection containing data that is only meaningful to the …\nHeader that controls loading of a single segment of an …\nHeader that controls loading of a single segment of an …\nProgram header variant native to the current target\nSegment that contains the program header itself, including …\nPermissions and other OS/arch-specific flags for …\nDefines the contents and meaning of individual program …\nRISC-V\nRelocatable object file\nSection containing relocation data where the addends are …\nSection containing relocation data with addends given in …\nSun/Oracle SPARC\nAdditional attributes for object file sections.\nHeader that controls linking\nVariant of the <code>SectionHeader</code> structure native to the …\nDefines the contents and meaning of individual sections.\nDynamic shared library\nFile uses 32-bit addresses/offsets.\nFile uses 64-bit addresses/offsets.\nSun/Oracle Solaris\nSection containing packed null-terminated strings.\nSection containing the hash table for symbols.\nTable of section indexes that correspond to entries in the …\nSection containing the symbol table for this object file.\nCompaq TRU64 Unix\nSegment that contains a template for the thread-local …\nExpected value of the <code>version</code> field.\nExpected value of the <code>header_version</code> field.\n32-bit x86\n64-bit x86\nAlignment of the segment in bytes, for both the file and …\nRequired alignment of the section in bytes.\nAlignment of the segment in bytes, for both the file and …\nAlignment of the segment in bytes, for both the file and …\nRequired alignment of the section in bytes.\nIndicates this section should be loaded into memory when …\nBits that are left for CPU architecture-specific flags.\nBits that are left for CPU architecture-defined flags.\nDepending on the <code>section_type</code>, this may identify another …\nDepending on the <code>section_type</code>, this may identify another …\nSpecifies the address size (32- or 64-bit) of the file.\nSpecifies whether the file uses big or little endian byte …\nVirtual address of executable entry point. Zero if not …\nVirtual address of executable entry point. Zero if not …\nDepending on the <code>section_type</code>, this may identify the size …\nDepending on the <code>section_type</code>, this may identify the size …\nIndicates the segment contains code that should be …\nIndicates this section contains code that should be …\nAdditional flags that depend on the <code>section_type</code>.\nAdditional flags that depend on the <code>section_type</code>.\nIndicates that the <code>extra_info</code> field of the section header …\nFile offset to the start of this segment’s data.\nFile offset to the start of this section’s data.\nFile offset to the start of this segment’s data.\nFile offset to the start of this segment’s data.\nFile offset to the start of this section’s data.\nSize in bytes of the file data for this segment.\nSize in bytes of this section’s file data.\nSize in bytes of the file data for this segment.\nSize in bytes of the file data for this segment.\nSize in bytes of this section’s file data.\nDistinguishes executables, libraries, etc.\nDistinguishes executables, libraries, etc.\nFlags for various attributes of this section.\nCPU architecture-specific flags.\nControls permissions and other OS/arch-specific flags.\nCPU architecture-specific flags.\nControls permissions and other OS/arch-specific flags.\nControls permissions and other OS/arch-specific flags.\nFlags for various attributes of this section.\nFlags for various attributes of this section.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates the section is listed by a section with type …\nSize in bytes of this header. May be longer than the …\nSize in bytes of this header. May be longer than the …\nVersion of the ELF header.\nHeader common to all ELF variants.\nHeader common to all ELF variants.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates that this section and the […\nCPU architecture\nCPU architecture\nMagic number that identifies this as an ELF file.\nSize in bytes of this segment once it is loaded into …\nSize in bytes of this segment once it is loaded into …\nSize in bytes of this segment once it is loaded into …\nIndicates that multiple sections of this type can be …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nOffset within the names section to the start of this …\nOffset within the names section to the start of this …\nOperating-system-specific ABI extensions that this file …\nBackwards-incompatible version number of the <code>os_abi</code> …\nBits that are left for OS-specific flags.\nBits that are left for OS-defined flags.\nIndicates that the section must be processed in an …\nPhysical base address where the segment should be loaded. …\nPhysical base address where the segment should be loaded. …\nPhysical base address where the segment should be loaded. …\nNumber of program segment headers.\nNumber of program segment headers.\nFile offset to the array of program section headers which …\nFile offset to the array of program section headers which …\nSize in bytes of of each program segment header. May be …\nSize in bytes of of each program segment header. May be …\nIndicates the segment contains data that should be …\nNumber of section headers.\nNumber of section headers.\nFile offset to the array of section header which control …\nFile offset to the array of section header which control …\nSize in bytes of each section header. May be longer than …\nSize in bytes of each section header. May be longer than …\nIndex of the section header which contains the list of …\nIndex of the section header which contains the list of …\nIndicates the contents/meaning of the section described by …\nIndicates the contents/meaning of the section described by …\nIndicates the contents/meaning of the segment described by …\nIndicates the contents/meaning of the segment described by …\nIndicates the contents/meaning of the segment described by …\nIndicates this section should be loaded into memory when …\nBits that are left for CPU architecture-specific flags.\nBits that are left for CPU architecture-defined flags.\nIndicates the segment contains code that should be …\nIndicates this section contains code that should be …\nIndicates that the <code>extra_info</code> field of the section header …\nFlags for various attributes of this section.\nIndicates the section is listed by a section with type …\nIndicates that this section and the […\nIndicates that multiple sections of this type can be …\nBits that are left for OS-specific flags.\nBits that are left for OS-defined flags.\nIndicates that the section must be processed in an …\nIndicates the segment contains data that should be …\nIndicates the section contains null-terminate strings.\nIndicates the section contains a template for the …\nIndicates the segment contains data that should be …\nIndicates the section contains data that should be …\nIndicates the section contains null-terminate strings.\nIndicates the section contains a template for the …\nChecks that the header represents a valid ELF file, of any …\nChecks that the header represents a valid ELF file for the …\nChecks that the header represents an ELF file in the …\nELF format version\nELF format version\nVirtual base address where the segment should be loaded.\nVirtual address where this section should be loaded in …\nVirtual base address where the segment should be loaded.\nVirtual base address where the segment should be loaded.\nVirtual address where this section should be loaded in …\nIndicates this section should be loaded into memory when …\nBits that are left for CPU architecture-specific flags.\nBits that are left for CPU architecture-defined flags.\nIndicates the segment contains code that should be …\nIndicates this section contains code that should be …\nIndicates that the <code>extra_info</code> field of the section header …\nIndicates the section is listed by a section with type …\nIndicates that this section and the […\nIndicates that multiple sections of this type can be …\nBits that are left for OS-specific flags.\nBits that are left for OS-defined flags.\nIndicates that the section must be processed in an …\nIndicates the segment contains data that should be …\nIndicates the section contains null-terminate strings.\nIndicates the section contains a template for the …\nIndicates the segment contains data that should be …\nIndicates the section contains data that should be …\nIndicates the segment contains data that should be …\nIndicates the section contains data that should be …")