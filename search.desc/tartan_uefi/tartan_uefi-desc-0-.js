searchState.loadedDescShard("tartan_uefi", 0, "Support for Unified Extensible Firmware Interface\nMemory that must be preserved in ACPI states S1–S3.\nMemory that can be used after the OS initializes ACPI.\nMemory used for drivers that provide <code>BootServices</code>.\nMemory allocated by drivers that provide <code>BootServices</code>.\nFree memory.\nContains the error value\nMemory used for UEFI application code.\nMemory allocated by UEFI applications.\nMemory mapped to device I/O.\nMemory mapped to I/O ports.\nEnd of range (inclusive) for OEM-specific memory types\nEnd of range (inclusive) for operating system-specific …\nBeginning of range (inclusive) for OEM-specific memory …\nBeginning of range (inclusive) for operating …\nContains the success value\nConstant page size defined by UEFI specification for …\nFree nonvolatile memory.\nMemory used by processor firmware code.\nMemory that is never available for use\nMemory used for drivers that provide <code>RuntimeServices</code>.\nMemory allocated by drivers that provide <code>RuntimeServices</code>.\nDamaged memory modules.\nAllocate a number of pages of a given type of memory, …\n<code>BootServices</code>-based heap allocator to support the standard …\nSafe(r) wrapper around <code>BootServices::exit_boot_services</code> …\nSignal to UEFI that the OS is now taking over.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a map representing the status of all available memory.\nGet the implementation of a protocol offered by the given …\nStatic pointer to the <code>SystemTable</code>, used by features where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps success <em>and</em> warning codes in <code>Ok</code>, and error codes in …\n<code>SimpleTextOutput</code>-based <code>Write</code> implementation to support …\nIterate over memory descriptors contained in the map.\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nWrite formatted data to an <code>OutputStream</code> and return the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a Rust string to a buffer containing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProtocol for accessing a file or directory.\nBasic properties of a file or directory as defined by the …\nControls how a file is opened.\nMinimum supported <code>SimpleFileSystem::revision</code>. Future …\nMinimum supported <code>SimpleFileSystem::revision</code>. Future …\nFile will be read, and should exist already.\nFile will be read and written, and should exist already.\nFile will be read and written, and will be created if it …\nProtocol for accessing a file system supported by UEFI …\nFlush and close the file or directory represented by the …\nDelete the file or directory represented by the current …\nWrite any buffered changes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the handle’s current position in the file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the enum variant in code, if one is defined …\nGet a handle to a new file, relative to the directory …\nGet a handle to the root of the file system.\nRead file contents or a directory entry into the buffer.\nImplemented revision of the <code>SimpleFileSystem</code> protocol.\nImplemented revision of the File protocol.\nSet the handle’s current position in the file.\nWrite the contents of <code>buffer</code> out to the current position.")