initSidebarItems({"fn":[["get_bit","Get a boolean reflecting a single bit of the value."],["get_bits","Extract a range of bits from the value, shifted so the first bit of the subset is the least significant bit of the result."],["set_bit","Create a copy of the value with a single bit modified."],["set_bits","Create a copy of the value with a subset of bits updated based on the passed value."]],"macro":[["bitfield","Define a structure that wraps a number with accessors for certain bit ranges."]],"trait":[["OverflowingShl","A type with an overflowing left shift operation. Also adds a saturating version."],["OverflowingShr","A type with an overflowing right shift operation. Also adds a saturating version."],["TruncateInto","A type whose values can be truncated into another type. This is more explicit than `x as T`."]]});