searchState.loadedDescShard("tartan_acpi", 0, "Support for Advanced Configuration and Power Interface\nMemory width used to read/write from a register\nType of register address\nCommon table header defined as <code>DESCRIPTION_HEADER</code> in the …\nFixed ACPI Description Table (FADT)\nSupport flags from Fixed ACPI Description Table\nExtended address structure defined in ACPI 2.0 to support …\nRoot System Description Pointer (RSDP) used in ACPI 1.0\nExtended RDSP defined by ACPI 2.0\nAbstract syntax tree for ACPI Machine Language\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the enum variant in code, if one is defined …\nThe name of the enum variant in code, if one is defined …\nDefines a byte slice parser function, avoiding repetitive …\nAn ACPI table that contains AML, such as the DSDT or an …\nTop-level AML objects defined in the table\nData resources\nReturns the argument unchanged.\nCommon ACPI table header\nCalls <code>U::from(self)</code>.\nSpecial symbols\nNames of objects, arguments, and references\nParsers for AML bytecode.\nTop-level terms and opcodes.\nBlock of raw bytes, optionally initialized in whole or in …\nSingle value resolved at compile time.\nData resolved at compile time, possibly grouped in a …\nGroup of related data elements, optionally inititalized in …\nA name or reference that constitutes part of a <code>Package</code> (or …\nGroup of related data elements, with a number of elements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSymbol for a positional argument passed to the current …\nSymbol representing debugger output device.\nSymbol for a variable local to the current method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFour-character name segment, allowing underscores, …\nFully qualified object path, either absolute or relative.\nNo value.\nIndicates whether a name is absolute or relative to the …\nA named object or variable.\nSome value of type <code>T</code>.\nA named object, variable, reference expression, or debug …\nLocation to store the result of an operation\nSpecifies how to resolve this path as absolute or relative.\nFormat a <code>NameString</code> like a path in ASL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSegments of the path\nConvert to an absolute namespace path in the context of …\nList all possible absolute pathnames that this name may …\nConvert a list of segments in various formats into a path …\nTrait “alias” for error type used by AML parsers\nAlias for type returned by AML parsers\nContains the error value\nContains the success value\nAn object that can be parsed from AML bytecode\nData objects, defined in §20.2.3\nMiscellaneous objects, defined in §20.2.6\nName objects, defined in §20.2.2\nTry to parse an object of this type from the given input …\nParse an ACPI table that contains AML, including the header\nParser context needed to disambiguate grammar\nTerms, defined in §20.2.5\nGrammar:\nParse a <code>SuperName</code>, but do <em>not</em> allow method invocations.\nExpected argument count for a method in the ACPI namespace.\nInput data plus context needed to disambiguate grammar\nHelper trait used to convert a parser error from one input …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the argument count of the named method, if it is …\nExecute a parser in a new scope relative to the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a byte-oriented parser to work with <code>ParserState</code>\nSets access information for <strong>following</strong> fields.\nAdditional information about how a field is accessed.\nWidth used to access a field.\nTry to acquire a mutex, returning <em>true</em> if the attempt …\nAdd two integers\nCreate a new <code>alias</code> for existing named <code>source</code> object.\nDeclare fields that can only be accessed after writing to …\nCompute a bitwise AND of two integers\nInvert the bits of an integer\nCompute the bitwise OR of the two integers\nCompute the bitwise XOR of two integers\nBreak from a loop\nTrigger a debugger breakpoint\nConcatenate two strings or buffers\nConcatenate two buffers containing resource templates\nTry to create a reference, returning false if it is not …\nIndicates that <strong>following</strong> fields should be accessed with …\nIndicates that <strong>following</strong> fields should be accessed with …\nContinue to the next loop iteration\nUpdate the destination with a copy of the given value, …\nDeclare a single-bit field within a buffer\nCreate a one-byte-wide field within a buffer\nDeclare a four-byte-wide field within a buffer\nDeclare an arbitrary-width field within a buffer\nDeclare an eight-byte-wide field within a buffer\nDeclare a two-byte-wide field within a buffer\nAllow an ACPI table indexed in the XSDT to be used as a …\nDecrement an integer variable\nGet the target of a reference\nDeclare a device and its associated fields, methods, and …\nPerform integer (quotient-remainder) division\nEvaluate to true if both values are equal\nDeclare a waitable synchronization object\nTerminal operation that evaluates to a value or reference.\nDeclare an object that is defined in another ACPI table\nSignal an error that requires a system shutdown\nDeclare a group of fields\nA substructure of a field.\nRules for reading and writing a field.\nGet the index of the most-significant set bit in a value\nGet the index of the least-significant set bit in a value\nDecode a series of binary-coded decimal nibbles into an …\nEvaluate to true if the left value is greater than the …\nEvaluate to true if the left value is greater than or …\nBranch on a predicate\nIncrement an integer variable\nCreate a reference to an index within a buffer\nDeclare a group of field that must be accessed by writing …\nExecute a control method\nEvaluate to true if the left value is less than the right …\nEvaluate to true if the left value is less than or equal …\nLoad a dynamically-generated SSDT from a field, region, or …\nFind an ACPI table indexed by the XSDT\nEvaluate to true if both arguments are non-zero integers\nEvaluate to true if the value is zero\nEvaluate to true if either of the values is a non-zero …\nSearch a package and return the index of the first …\nType of comparison used for a branch in an …\nDeclare a control method\nInformation about how to call a method.\nCopy a slice of a string or buffer.\nCompute the remainder of dividing the first integer by the …\nMultiply two integers\nDeclare an acquirable mutex\nAttach a name to an anonymous data or reference.\nTerm that attaches a name to its argument.\nA named bitfield.\nTerm that defines an object with a name.\nCompute the bitwise NAND of two integers\nDo nothing\nCompute the bitwise NOR of two integers\nEvaluate to true if the left value is not equal to the …\nSend a signal value to a device/processor/zone\nType ID returned by <code>ExpressionOpcode::ObjectType</code>.\nGet an integer representing the type of the given value. …\nDeclare an address space that can be used by fields\nDeclare a power resource object\nDeclare a processor and associated register block\nCreate a reference to the given name\nTerminal operation that evaluates to a reference.\nAddress space used to access a field.\nRelease a held mutex\nIndicates that the next most significant <code>bit_length</code> bits …\nClear the signalled state of an event object\nExit the current method and yield the given value to the …\nEvaluate the contained terms within a new scope.\nMultiply an integer by the specified power of two\nDivide an integer by the specified power of two\nSignal to one thread waiting on the event\nGet the length of a string, buffer, or package\nDelay for at least the given milliseconds, releasing the …\nDelay for at least the given microseconds, but do <em>not</em> …\nTerminal operation that does not evaluate to a value, …\nUpdate the destination with the given value, converting it …\nSubtract an integer from another, ignoring underflow\nTerm that resolves to a value.\nTop-level, most general term type where the value (if any) …\nDeclare a thermal zone namespace\nGet the current value of the system timer in 100ns\nEncode an integer into a sequence of binary-coded decimal …\nConvert a value to a buffer\nEncode a value as an ASCII decimal number\nEncode a value as an ASCII hexadecimal number\nConvert a value to an integer, either by parsing a string …\nCopy an ASCII string from a buffer into a string value\nIndicates what to do with unused bits when writing a field.\nTry to wait for another thread to signal an event object, …\nExecute a series of statements as long as the predicate is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")